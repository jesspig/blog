<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo + gh-pages 搭建个人博客</title>
    <url>/2022/03/24/221537/c2f16b4c5af9/</url>
    <content><![CDATA[<p>使用 <code>hexo</code> 和 <code>GitHub Pages</code> 来搭建属于自己的个人博客，可以随时随地通过网络进行对自己的博客进行访问<span id="more"></span></p>
<h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>在安装 <code>hexo</code> 之前请确保已经安装了 <code>nodejs</code> 以及其相关的包管理工具，如 <code>npm</code> 和 <code>yarn</code> ，还需要安装了 <code>git</code> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># npm 安装</span></span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"><span class="comment"># yarn 安装</span></span><br><span class="line">yarn global add hexo-cli</span><br></pre></td></tr></table></figure>

<h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><p>安装完 hexo 以后就可以开始使用 hexo 进行搭建个人博客了</p>
<h3 id="初始化-hexo"><a href="#初始化-hexo" class="headerlink" title="初始化 hexo"></a>初始化 hexo</h3><p>首先要为自己写博客的地方新建一个文件夹，然后在这个目录当中输入一下的命令，这时候 <code>hexo</code> 就会下载一些需要用到的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<h3 id="启动博客"><a href="#启动博客" class="headerlink" title="启动博客"></a>启动博客</h3><p>初始化完成以后，可以执行下面的命令来在本地启动博客</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>启动完成以后可以打开浏览地址栏输入 <code>http://localhost:4000/</code> 进行访问，默认会生成一篇 <code>hello world</code> 的文章，也可以指定一个端口进行访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 8888 端口进行访问</span></span><br><span class="line">hexo server --port 8888	<span class="comment"># http://localhost:8888/</span></span><br></pre></td></tr></table></figure>

<h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><p>启动博客后就可以开始编写文章了，执行一下命令进行新建，文章使用 <code>markdown</code> 进行编写</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p><code>&lt;title&gt;</code> 是文章的文件名，同时也是文章标题，就比如这样</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;我的第一篇博客&quot;</span></span><br></pre></td></tr></table></figure>

<p>新建以后就会在 <code>source/_posts</code> 目录下生成了一个 <code>.md</code> 的文件，这时候就可以对它进行编辑，如果已经在本地启动了博客，在编辑完文章后可以通过刷新浏览器对预览进行更新</p>
<p>但是通过 <code>new</code> 直接生成的文章默认是发布状态，但很多时候文章并没有写完，或者同时在编辑多个文章，这时候就需要草稿了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new draft &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>新建的草稿不会被发布，但是草稿是没办法直接预览效果的，所以需要将已经启动的博客先停掉 输入键盘按下 <code>Ctrl + C</code> 就可以停止博客了，需要预览草稿，可以输入一下指令来启动本地博客</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server --draft</span><br></pre></td></tr></table></figure>

<h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><p><code>Front-matter</code> 是指一些文章的属性，是在生成的文章头部的包含以下内容的部分</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: xxxx</span><br><span class="line"><span class="section">date: xxxx/x/xx xx:xx:xx</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<p>里面的属性是文章的属性</p>
<ul>
<li><p><code>title</code> 是文章的标题  </p>
</li>
<li><p><code>date</code> 是文章的发布日期  </p>
</li>
<li><p><code>tag</code> 是文章的标签  </p>
</li>
<li><p><code>layout</code> 是文章的布局</p>
<p>文章内容需要在 <code>front-matter</code> 下进行编写</p>
</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: xxxx</span><br><span class="line"><span class="section">date: xxxx/x/xx xx:xx:xx</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line">这里是文章内容</span><br></pre></td></tr></table></figure>

<h3 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h3><p>在草稿已经编辑完成时，就需要将文章进行发布，只需要输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo publish &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<p><code>&lt;filename&gt;</code> 是指文件名而不是文章标题，因为有可能在编辑草稿时会修改文章标题</p>
<h3 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h3><p>在此之前，博客都是在本地运行的，需要将它们部署在服务器上，并且需要一个公网 IP 或者域名才能让其他人进行访问，但是有种更省钱的办法，就是利用 <code>GitHub Pages</code> 进行部署</p>
<p>首先要注册一个 GitHub 的账号，然后再新建一个名为 <code>&lt;username&gt;.github.io</code> 的远程仓库，这个<code>&lt;username&gt;</code> 是指 GitHub 的用户名</p>
<p>做完这些就需要开始编辑 <code>_config.yml</code> 文件了，将其最底部的信息改成一下内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&quot;git&quot;</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">&quot;gh-pages&quot;</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&quot;https://github.com/&lt;username&gt;/&lt;username&gt;.github.io&quot;</span></span><br></pre></td></tr></table></figure>

<p>不过部署到 GitHub 上还需要安装一个插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># npm</span></span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"><span class="comment"># yarn</span></span><br><span class="line">yarn add hexo-deployer-git</span><br></pre></td></tr></table></figure>

<p>安装完成后，只需要输入以下命令就可以一键部署到 GitHub 了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>

<ul>
<li><code>hexo clean</code> 是清理之前生成的网页文件</li>
<li><code>hexo generate</code> 是生成新的网页文件</li>
<li><code>hexo deploy</code> 是将生成后的网页文件部署到服务器</li>
</ul>
<h3 id="开启访问"><a href="#开启访问" class="headerlink" title="开启访问"></a>开启访问</h3><p>部署完以后还有一件事，就是让这个网站变得可以访问，首先要进到刚刚创建的远程仓库里，选择 settings</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202203242202874.png"></p>
<p>然后去到网页的最下面选着修改可视属性</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202203242204180.png"></p>
<p>将其修改为 <code>public</code> ，如果原本就是，那就不用修改</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202203242207921.png"></p>
<p>回到最上面，在侧边栏里悬着 <code>Pages</code></p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202203242209887.png"></p>
<p>选择对应的分支并保存</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202203242210924.png" alt="image-20220324221009853"></p>
<p>这时候点上面的链接就可以到个人博客里了，以后谁都可以通过这个链接访问到自己的个人博客</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202203242214770.png"></p>
]]></content>
      <categories>
        <category>分享</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>hexo</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 生成随机姓名</title>
    <url>/2022/05/15/185106/2f0066a457fb/</url>
    <content><![CDATA[<p>做数据库的时候写人名实在是太麻烦，用姓氏 + 数字的形式好像又感觉不太好（主要是闲的），所以我就制作了一个用 Java 写的工具类👉 <a href="https://github.com/jesspig/MyUtils/blob/main/Java/RandomName.java"><strong>RandomName.java</strong></a> <span id="more"></span></p>
<h2 id="生成姓氏"><a href="#生成姓氏" class="headerlink" title="生成姓氏"></a>生成姓氏</h2><p>首先就是要找到姓氏，其实这比较简单，直接上网搜 <span class="exturl" data-url="aHR0cHM6Ly9jbi5iaW5nLmNvbS9zZWFyY2g/cT0lRTclOTklQkUlRTUlQUUlQjYlRTUlQTclOTM=">百家姓<i class="fa fa-external-link-alt"></i></span> ，随随便便就有一大把，然后将它们全部复制下来，进行一些处理，比如说去掉空格和做成数组啥的，只需要随便找一个 ide 或代码编辑器就能做到，这里拿 idea 举例，使用正则表达式将他们替换就好了</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/blog/202205151819363.png"></p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/blog/202205151820447.png"></p>
<p>最后前后都加上花括号包住即可</p>
<blockquote>
<p>注意：复姓也会被切成单个字，要自行修改</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getFamilyName</span><span class="params">()</span> &#123;</span><br><span class="line">    String[] familyName = &#123;...&#125;;</span><br><span class="line">    <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> random.nextInt(familyName.length);</span><br><span class="line">    <span class="keyword">return</span> familyName[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>&#123;...&#125;</code> 代表已经切割好的数组</p>
<h2 id="生成名字"><a href="#生成名字" class="headerlink" title="生成名字"></a>生成名字</h2><p>一样的，直接上网搜一些随机的汉字即可，我这里直接就是搜 <span class="exturl" data-url="aHR0cHM6Ly9jbi5iaW5nLmNvbS9zZWFyY2g/cT0lRTYlQjElODklRTUlQUQlOTclRTUlQTQlQTclRTUlODUlQTg=">汉字大全<i class="fa fa-external-link-alt"></i></span> 了，又是同样的切割替换，然后写上代码，我这里做了一些处理，让生成的名字可以是一个字或两个字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getGivenName</span><span class="params">()</span> &#123;</span><br><span class="line">    String[] givenName = &#123;...&#125;;</span><br><span class="line">	<span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">	<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> random.nextInt(givenName.length);</span><br><span class="line">	<span class="type">String</span> <span class="variable">newGivenName</span> <span class="operator">=</span> givenName[i];</span><br><span class="line">	<span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> (<span class="type">int</span>) (System.currentTimeMillis() % <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span> (size == <span class="number">2</span>) &#123;</span><br><span class="line">	    newGivenName = givenName[i] + givenName[(<span class="type">int</span>) (System.currentTimeMillis() % givenName.length)];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> newGivenName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="生成姓名"><a href="#生成姓名" class="headerlink" title="生成姓名"></a>生成姓名</h2><p>做完以上两步就可以进行优化了，再加一个函数即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> getFamilyName() + getGivenName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exam.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomName</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] familyName = &#123;...&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] givenName = &#123;...&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFamilyName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> random.nextInt(familyName.length);</span><br><span class="line">        <span class="keyword">return</span> familyName[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGivenName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> random.nextInt(givenName.length);</span><br><span class="line">        <span class="type">String</span> <span class="variable">newGivenName</span> <span class="operator">=</span> givenName[i];</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> (<span class="type">int</span>) (System.currentTimeMillis() % <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">2</span>) &#123;</span><br><span class="line">            newGivenName = givenName[i] + givenName[(<span class="type">int</span>) (System.currentTimeMillis() % givenName.length)];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newGivenName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getFamilyName() + getGivenName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看看效果</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/blog/202205151856948.png"></p>
<blockquote>
<p> 需要源代码的话可以到 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2plc3NwaWcvTXlVdGlscy90cmVlL21haW4vSmF2YQ==">https://github.com/jesspig/MyUtils/tree/main/Java<i class="fa fa-external-link-alt"></i></span> 中获取</p>
</blockquote>
]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua 学习笔记</title>
    <url>/2022/01/21/024632/f29997384681/</url>
    <content><![CDATA[<p> 最近不知道发什么神经，突然想起 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvTHVh">Lua<i class="fa fa-external-link-alt"></i></span> 来了，没错就是发神经，就是我又不是写脚本，又不是写mod啥的，无端端就想起来这门语言了，所以这次就来写个快速入门的教程吧。这次是 Windows 环境下使用 VSCode 进行编写，Linux 和 Mac 其实也差不多</p>
<span id="more"></span>

<h2 id="配置-Lua"><a href="#配置-Lua" class="headerlink" title="配置 Lua"></a>配置 Lua</h2><p>首先先把 Lua 的环境配置好</p>
<h3 id="下载-Lua"><a href="#下载-Lua" class="headerlink" title="下载 Lua"></a>下载 Lua</h3><p>首先到浏览器中打开 <span class="exturl" data-url="aHR0cHM6Ly93d3cubHVhLm9yZy8=">Lua 官网 (https://www.lua.org/)<i class="fa fa-external-link-alt"></i></span> </p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main//img/image-20220120230324696.png"></p>
<p>然后点击 get started</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main//img/image-20220120230520591.png"></p>
<p>然后点击在 Installing 下面的 LuaDist</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main//img/image-20220120230621447.png"></p>
<p>然后下载自己需要的版本</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main//img/image-20220120231052484.png"></p>
<p>然后解压</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main//img/image-20220120231318459.png"></p>
<p>解压完以后将 bin 配置到环境变量当中，这一步我就不讲了</p>
<p>配置完环境变量后打开 cmd ，如果是 Linux 或者 Mac 就打开 Terminal ，然后输入 <code>lua -v</code> 查看版本信息，检查是否安装成功</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main//img/image-20220120232404660.png"></p>
<p>也可以输入 <code>lua -i</code> 直接进入控制台</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main//img/image-20220120232630696.png"></p>
<h3 id="vscode-配置"><a href="#vscode-配置" class="headerlink" title="vscode 配置"></a>vscode 配置</h3><p>安装以下插件</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main//img/image-20220120231957256.png"></p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main//img/image-20220120232046494.png"></p>
<h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><p>接下就是快速入门 Lua 的代码编写</p>
<h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h3><p>程序员的第一步</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>) </span><br></pre></td></tr></table></figure>



<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = <span class="number">123</span></span><br><span class="line">b = <span class="string">&#x27;123&#x27;</span></span><br></pre></td></tr></table></figure>



<p>Lua 的变量默认是全局变量，所以想要用局部变量可以在变量名前加上 <code>local</code></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> a = <span class="number">123</span></span><br><span class="line"><span class="keyword">local</span> b = <span class="string">&#x27;123&#x27;</span></span><br></pre></td></tr></table></figure>



<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>注释用 <code>--</code></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 注释</span></span><br></pre></td></tr></table></figure>



<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="number"><a href="#number" class="headerlink" title="number"></a>number</h4><p>所有的数字都是 number 类型，比如下面的</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = <span class="number">123</span>		<span class="comment">-- 整数</span></span><br><span class="line">b = <span class="number">123.3</span>	<span class="comment">-- 小数</span></span><br><span class="line">c = <span class="number">0x123</span>	<span class="comment">-- 十六进制</span></span><br><span class="line">e = <span class="number">1e34</span>	<span class="comment">-- 科学计数法</span></span><br></pre></td></tr></table></figure>

<h4 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h4><p>Lua 也有布尔类型</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = <span class="literal">true</span></span><br><span class="line">b = <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>在 Lua 中只有 <code>false</code> 和 <code>nil</code> 表示 <code>false</code> 其余都是 <code>true</code> 包括 <code>0</code></p>
<h4 id="nil"><a href="#nil" class="headerlink" title="nil"></a>nil</h4><p>空，没有就是空，虽然是废话</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = <span class="literal">nil</span></span><br></pre></td></tr></table></figure>



<h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><p>跟其他编程语言差不多</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span> + <span class="number">2</span></span><br><span class="line">b = <span class="number">2</span> * <span class="number">3</span></span><br><span class="line">c = <span class="number">5</span> % <span class="number">2</span></span><br><span class="line">d = <span class="number">1</span> &lt;&lt; <span class="number">2</span></span><br><span class="line">e = <span class="number">1</span> == <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>下面这些跟其他语言可能不太一样</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = <span class="number">5</span> / <span class="number">2</span>	<span class="comment">-- 除尽</span></span><br><span class="line">b = <span class="number">5</span> // <span class="number">2</span>	<span class="comment">-- 整除</span></span><br><span class="line">c = <span class="number">2</span> ^ <span class="number">3</span>	<span class="comment">-- 乘幂</span></span><br><span class="line">d = <span class="number">1</span> ~= <span class="number">2</span>	<span class="comment">-- 不等于</span></span><br></pre></td></tr></table></figure>

<h4 id="与或非"><a href="#与或非" class="headerlink" title="与或非"></a>与或非</h4><p>Lua 中的与或非跟 Python 类似</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = <span class="literal">true</span> <span class="keyword">and</span> <span class="literal">false</span></span><br><span class="line">b = <span class="literal">true</span> <span class="keyword">or</span> <span class="literal">false</span></span><br><span class="line">c = <span class="keyword">not</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>与或非并不是只输出 <code>true</code> 或者 <code>false</code>，还可以输出原本的值，这跟 JavaScript 类似</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span> <span class="keyword">or</span> <span class="number">2</span>	<span class="comment">-- 输出 1</span></span><br><span class="line">b = <span class="number">1</span> <span class="keyword">and</span> <span class="number">2</span>	<span class="comment">-- 输出 2</span></span><br></pre></td></tr></table></figure>



<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>单引号和双引号都表示字符串</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;hello&quot;</span></span><br><span class="line">b = <span class="string">&#x27;world&#x27;</span></span><br></pre></td></tr></table></figure>



<p>Lua 也有转义字符，比如</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;abc\nefg&quot;</span></span><br></pre></td></tr></table></figure>



<p>多行文本可以用 <code>[[]]</code> 来表示</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = <span class="string">[[</span></span><br><span class="line"><span class="string">123</span></span><br><span class="line"><span class="string">456</span></span><br><span class="line"><span class="string">789</span></span><br><span class="line"><span class="string">]]</span></span><br></pre></td></tr></table></figure>



<p>字符串拼接，在 Lua 中是用 <code>..</code> 来表示</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;hello&quot;</span></span><br><span class="line">b = <span class="string">&quot;world&quot;</span></span><br><span class="line">c = a..b</span><br></pre></td></tr></table></figure>



<p>字符串和数字键互相转换，可以用 <code>tostring</code> 和 <code>tonumber</code></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = <span class="number">123</span></span><br><span class="line">b = <span class="built_in">tostring</span>(a)</span><br><span class="line">c = <span class="built_in">tonumber</span>(b)</span><br></pre></td></tr></table></figure>



<p>提醒一句如果 <code>tonumber</code> 转换失败的话是会变成 <code>nil</code> 的</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;abc&quot;</span></span><br><span class="line">b = <span class="built_in">tonumber</span>(a)</span><br></pre></td></tr></table></figure>



<p>获取字符串长度可以在前面加上 <code>#</code></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;abcdefg&quot;</span></span><br><span class="line">b = #a</span><br></pre></td></tr></table></figure>



<h3 id="控制流程"><a href="#控制流程" class="headerlink" title="控制流程"></a>控制流程</h3><h4 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h4><p>判断使用 <code>if ... then ... end</code></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> a &gt; b <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a &gt; b&#x27;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>如果否则 <code>if ... then ... else ... end</code></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> a &gt; b <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a &gt; b&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a &lt; b&#x27;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>多种不同的判断 <code>if ... then ... elseif ... then ... else ... end</code></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> a &gt; b <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a &gt; b&#x27;</span>)</span><br><span class="line"><span class="keyword">elseif</span> a &lt; b <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a &lt; b&#x27;</span>)</span><br><span class="line"><span class="keyword">elseif</span> a == b <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a == b&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>



<h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><h5 id="for"><a href="#for" class="headerlink" title="for"></a>for</h5><p>for 循环跟 Python 差不多，但不完全一样，它有初值和结束值，比如输出 1 到 9</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">9</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>或者再加上第三个参数，步长，下面是输出 10 以内奇数</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h5 id="while"><a href="#while" class="headerlink" title="while"></a>while</h5><p>满足 <code>while</code> 后面的表达式是循环</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>



<h5 id="repeat-…-until"><a href="#repeat-…-until" class="headerlink" title="repeat … until"></a>repeat … until</h5><p>满足 <code>until</code> 后面的表达式时停止</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">repeat</span></span><br><span class="line">   <span class="built_in">print</span>(i)</span><br><span class="line">   i = i + <span class="number">1</span></span><br><span class="line"><span class="keyword">until</span> i &lt; <span class="number">10</span></span><br></pre></td></tr></table></figure>



<h5 id="break"><a href="#break" class="headerlink" title="break"></a>break</h5><p>退出循环</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">9</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">5</span> <span class="keyword">then</span> <span class="keyword">break</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>



<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组使用 <code>&#123;&#125;</code> 包含</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">b = &#123;<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>Lua 的数组不仅可以包含同类型还可以包含不同类型</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="string">&#x27;2&#x27;</span>,&#123;&#125;,<span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">end</span>&#125;</span><br></pre></td></tr></table></figure>

<p>需要注意的是，Lua 的下标从 1 开始而不是 0</p>
<p>除此以外，还可以通过键值对来存储数组</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">t = &#123;</span><br><span class="line">    a = <span class="number">1</span>,</span><br><span class="line">    b = <span class="number">2</span>,</span><br><span class="line">    c = <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果要获取数组的长度也同样是同 <code>#</code></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="string">&#x27;2&#x27;</span>,&#123;&#125;,<span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">end</span>&#125;</span><br><span class="line">b = #a</span><br></pre></td></tr></table></figure>

<p>可以通过下标改变数值</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">a[<span class="number">2</span>] = <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>如果是键值对存储的话可以这样</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">t[<span class="string">&#x27;a&#x27;</span>] = <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>或者这样也是可以访问的</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(t.a)</span><br></pre></td></tr></table></figure>

<p>也可以用 <code>table.insert</code> 来在尾部插入元素</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">insert</span>(a,<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p>按下标进行中间插入</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">insert</span>(a,<span class="number">3</span>,<span class="string">&#x27;3&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>删除元素</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">remove</span>(a,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>







<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><p>函数的声明是用 <code>function ... end</code> 比如</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span><span class="params">()</span></span></span><br><span class="line">    <span class="comment">-- code</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>



<p>也可以是这样</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">funcName = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">    <span class="comment">-- code</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>



<h4 id="入参"><a href="#入参" class="headerlink" title="入参"></a>入参</h4><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span><span class="params">(a, b)</span></span></span><br><span class="line">    <span class="comment">-- code</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>



<h4 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h4><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span><span class="params">(a, b)</span></span></span><br><span class="line">    <span class="comment">-- code</span></span><br><span class="line">    <span class="keyword">return</span> a,b</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>



<h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span><span class="params">()</span></span></span><br><span class="line">    <span class="comment">-- code</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">A()</span><br></pre></td></tr></table></figure>



<hr>
<p>好了差不多了，更多的用法可以用到再查</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Lua</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 语法</title>
    <url>/2022/03/24/014020/cd2f2ef0ebaa/</url>
    <content><![CDATA[<p><code>markdown</code> （以下称 <code>md</code> ）是一种轻量级的文本标记语言，通常用于编写文档时进行快速排版，是一种很好用的文档编写工具（或者说语言？），并且可以通过一些 Markdown 编辑器可以将其生成为 PDF 、HTML、Word 等文件格式<span id="more"></span></p>
<h2 id="Markdown-编辑器"><a href="#Markdown-编辑器" class="headerlink" title="Markdown 编辑器"></a>Markdown 编辑器</h2><p>这里推荐一些好用的 Markdown 编辑器</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>功能</th>
<th>价格</th>
</tr>
</thead>
<tbody><tr>
<td><span class="exturl" data-url="aHR0cDovL3R5cG9yYS5pby8=">Typora<i class="fa fa-external-link-alt"></i></span> （推荐）</td>
<td>所见即所得，实时渲染</td>
<td>￥ 89 &#x2F; $ 14.99</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v">vscode<i class="fa fa-external-link-alt"></i></span></td>
<td>写代码和写文档无缝切换</td>
<td>免费</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9vYnNpZGlhbi5tZC8=">Obsidian<i class="fa fa-external-link-alt"></i></span> （推荐）</td>
<td>逼格高，适合做笔记和思维导图</td>
<td>免费 &#x2F; 订阅</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9tcC5jc2RuLm5ldC8=">CSDN<i class="fa fa-external-link-alt"></i></span></td>
<td>在线编辑 <code>md</code> ，并且可以快速发布到博客</td>
<td>免费</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vd3JpdGVy">简书<i class="fa fa-external-link-alt"></i></span></td>
<td>跟 CSDN 差不多</td>
<td>免费</td>
</tr>
</tbody></table>
<h2 id="Markdown-常用语法"><a href="#Markdown-常用语法" class="headerlink" title="Markdown 常用语法"></a>Markdown 常用语法</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>由于不好展示，我这里将其对应的 <code>HTML</code> 语法写出来</p>
<table>
<thead>
<tr>
<th>Markdown 语法</th>
<th>HTML 语法</th>
</tr>
</thead>
<tbody><tr>
<td><code># 一级标题</code></td>
<td><code>&lt;h1&gt;一级标题&lt;/h1&gt;</code></td>
</tr>
<tr>
<td><code>## 二级标题</code></td>
<td><code>&lt;h2&gt;二级标题&lt;/h2&gt;</code></td>
</tr>
<tr>
<td><code>### 三级标题</code></td>
<td><code>&lt;h3&gt;三级标题&lt;/h3&gt;</code></td>
</tr>
<tr>
<td><code>#### 四级标题</code></td>
<td><code>&lt;h4&gt;四级标题&lt;/h4&gt;</code></td>
</tr>
<tr>
<td><code>##### 五级标题</code></td>
<td><code>&lt;h5&gt;五级标题&lt;/h5&gt;</code></td>
</tr>
<tr>
<td><code>###### 六级标题</code></td>
<td><code>&lt;h6&gt;六级标题&lt;/h6&gt;</code></td>
</tr>
</tbody></table>
<h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><table>
<thead>
<tr>
<th>Markdown</th>
<th>预览</th>
</tr>
</thead>
<tbody><tr>
<td><code>*预览文本*</code></td>
<td><em>预览文本</em></td>
</tr>
<tr>
<td><code>_预览文本</code></td>
<td><em>预览文本</em></td>
</tr>
<tr>
<td><code>**预览文本**</code></td>
<td><strong>预览文本</strong></td>
</tr>
<tr>
<td><code>__预览文本__</code></td>
<td><strong>预览文本</strong></td>
</tr>
<tr>
<td><code>***预览文本***</code></td>
<td><em><strong>预览文本</strong></em></td>
</tr>
<tr>
<td><code>___预览文本___</code></td>
<td><em><strong>预览文本</strong></em></td>
</tr>
</tbody></table>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt;   这里是引用文本</span></span><br><span class="line"></span><br><span class="line"><span class="quote">&gt;   这里是引用文本块  </span></span><br><span class="line"><span class="quote">&gt;   这里是引用文本块  </span></span><br><span class="line"><span class="quote">&gt;   这里是引用文本块  </span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>  这里是引用文本</p>
</blockquote>
<blockquote>
<p>  这里是引用文本块<br>  这里是引用文本块<br>  这里是引用文本块  </p>
</blockquote>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>可以使用 <code>-</code> 、<code>+</code> 、<code>*</code> 来表示</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span>   这里是无序列表</span><br><span class="line"><span class="bullet">-</span>   这里是无序列表</span><br><span class="line"><span class="bullet">-</span>   这里是无序列表</span><br><span class="line"><span class="bullet">    -</span>   这里是无序列表</span><br><span class="line"><span class="bullet">    -</span>   这里是无序列表</span><br><span class="line"><span class="bullet">-</span>   这里是无序列表</span><br></pre></td></tr></table></figure>

<ul>
<li>这里是无序列表</li>
<li>这里是无序列表</li>
<li>这里是无序列表<ul>
<li>这里是无序列表</li>
<li>这里是无序列表</li>
</ul>
</li>
<li>这里是无序列表</li>
</ul>
<h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span>   这里是有序列表</span><br><span class="line"><span class="bullet">2.</span>   这里是有序列表</span><br><span class="line"><span class="bullet">3.</span>   这里是有序列表</span><br><span class="line"><span class="bullet">     1.</span>   这里是有序列表</span><br><span class="line"><span class="bullet">     2.</span>   这里是有序列表</span><br><span class="line"><span class="bullet">4.</span>   这里是有序列表</span><br></pre></td></tr></table></figure>

<ol>
<li>这里是有序列表</li>
<li>这里是有序列表</li>
<li>这里是有序列表<ol>
<li>这里是有序列表</li>
<li>这里是有序列表</li>
</ol>
</li>
<li>这里是有序列表</li>
</ol>
<h4 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span>   这里是有序列表</span><br><span class="line"><span class="bullet">2.</span>   这里是有序列表</span><br><span class="line"><span class="bullet">     -</span>   这里是无序列表</span><br><span class="line"><span class="bullet">     -</span>   这里是无序列表</span><br><span class="line"><span class="bullet">         1.</span>   这里是有序列表</span><br><span class="line"><span class="bullet">         2.</span>   这里是有序列表</span><br></pre></td></tr></table></figure>

<ol>
<li>这里是有序列表</li>
<li>这里是有序列表<ul>
<li>这里是无序列表</li>
<li>这里是无序列表<ol>
<li>这里是有序列表</li>
<li>这里是有序列表</li>
</ol>
</li>
</ul>
</li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><strong>代码块</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```python</span></span><br><span class="line"><span class="code">print(&#x27;Hello Markdown&#x27;)</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello Markdown&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>代码段</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">`print(&#x27;Hello Markdown&#x27;)`</span></span><br></pre></td></tr></table></figure>

<p><code>print(&#39;Hello Markdown&#39;)</code></p>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><strong>网站链接</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">Markdown 语法</span>](<span class="link">https://jesspig.github.io/blog/2022/03/24/014020/cd2f2ef0ebaa/</span>)</span><br></pre></td></tr></table></figure>

<p><span class="exturl" data-url="aHR0cHM6Ly9qZXNzcGlnLmdpdGh1Yi5pby9ibG9nLzIwMjIvMDMvMjQvMDE0MDIwL2NkMmYyZWYwZWJhYS8=">Markdown 语法<i class="fa fa-external-link-alt"></i></span> </p>
<p>图片链接</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">微信</span>](<span class="link">https://jesspig.github.io/blog/images/wechatpay.png</span>)</span><br><span class="line">![](<span class="link">https://jesspig.github.io/blog/images/alipay.png &quot;支付宝&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jesspig.github.io/blog/images/wechatpay.png" alt="微信"><br><img data-src="https://jesspig.github.io/blog/images/alipay.png" title="支付宝"></p>
<h3 id="内嵌-HTML"><a href="#内嵌-HTML" class="headerlink" title="内嵌 HTML"></a>内嵌 HTML</h3><p>除了上面那些用法，还可以使用 <code>内嵌 HTML</code> 的方式使得 <code>md</code> 具有更加多的样式，就比如这样</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span>这是一段<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&#x27;font-weight:900;color:white;background:black;&#x27;</span>&gt;</span>居中<span class="tag">&lt;/<span class="name">span</span>&gt;</span>的文字<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure>

<center>这是一段<span style='font-weight:900;color:white;background:black;'>居中</span>的文字</center>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Log4j 配置</title>
    <url>/2022/05/07/014411/070fc9e13887/</url>
    <content><![CDATA[<p>接下来简单讲解一下 Log4j 的配置，因为最近的学习当中会使用到，所以在这里记录一下<span id="more"></span></p>
<h2 id="前置操作"><a href="#前置操作" class="headerlink" title="前置操作"></a>前置操作</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>通过 maven 进行拉取相关的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="创建-log4j-properties-文件"><a href="#创建-log4j-properties-文件" class="headerlink" title="创建 log4j.properties 文件"></a>创建 log4j.properties 文件</h3><p>到 <code>src/main/resources</code> 目录下创建 <code>log4j.properties</code> </p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/blog/202205052130067.png"></p>
<h2 id="配置文件解析"><a href="#配置文件解析" class="headerlink" title="配置文件解析"></a>配置文件解析</h2><h3 id="根配置-rootLogger"><a href="#根配置-rootLogger" class="headerlink" title="根配置 [rootLogger]"></a>根配置 [rootLogger]</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">log4j.rootLogger</span>=&lt;level&gt;,appenderName ...</span><br></pre></td></tr></table></figure>

<p><code>level</code> 表示日志等级</p>
<p><code>appenderName</code> 表示输出的位置，可以是一个或多个</p>
<p>比如以下配置就是将 <code>DEBUG</code> 日志等级的信息输出到控制台和文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">DEBUG,Console,File</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>补充：<code>Console</code> 和 <code>File</code> 可以任意取名，只需要跟后面的 <code>log4j.appender.xxx</code> 的 <code>xxx</code> 部分对应即可</p>
</blockquote>
<h3 id="日志等级"><a href="#日志等级" class="headerlink" title="日志等级"></a>日志等级</h3><p><strong>ALL &lt; TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL &lt; OFF</strong> </p>
<p>级别越低包含内容越多</p>
<table>
<thead>
<tr>
<th>级别</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>ALL</td>
<td>所有级别的信息</td>
</tr>
<tr>
<td>TRACE</td>
<td>比 DEBUG 更详细的信息</td>
</tr>
<tr>
<td>DEBUG</td>
<td>调试信息</td>
</tr>
<tr>
<td>INFO</td>
<td>普通信息</td>
</tr>
<tr>
<td>WARN</td>
<td>可能会出现潜在错误的警告信息</td>
</tr>
<tr>
<td>ERROR</td>
<td>不影响系统的继续运行的错误信息</td>
</tr>
<tr>
<td>FATAL</td>
<td>将会导致应用程序的退出的严重错误事件信息</td>
</tr>
<tr>
<td>OFF</td>
<td>用于关闭所有日志记录</td>
</tr>
</tbody></table>
<h3 id="输出类型-appender"><a href="#输出类型-appender" class="headerlink" title="输出类型 [appender]"></a>输出类型 [appender]</h3><table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>org.apache.log4j.ConsoleAppender</td>
<td>控制台</td>
</tr>
<tr>
<td>org.apache.log4j.FileAppender</td>
<td>文件</td>
</tr>
<tr>
<td>org.apache.log4j.DailyRollingFileAppender</td>
<td>每天产生一个日志文件</td>
</tr>
<tr>
<td>org.apache.log4j.RollingFileAppender</td>
<td>文件大小到达指定尺寸的时候产生一个新的文件</td>
</tr>
<tr>
<td>org.apache.log4j.WriterAppender</td>
<td>将日志信息以流格式发送到任意指定的地方</td>
</tr>
</tbody></table>
<p>使用方式大概如下</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">DEBUG,Console,File</span></span><br><span class="line"><span class="comment"># 控制台输出</span></span><br><span class="line"><span class="attr">log4j.appender.Console</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="comment"># 文件输出</span></span><br><span class="line"><span class="attr">log4j.appender.File</span>=<span class="string">org.apache.log4j.FileAppender</span></span><br></pre></td></tr></table></figure>

<h3 id="信息格式-layout"><a href="#信息格式-layout" class="headerlink" title="信息格式 [layout]"></a>信息格式 [layout]</h3><table>
<thead>
<tr>
<th>格式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>org.apache.log4j.HTMLLayout</td>
<td>输出 HTML 表格代码</td>
</tr>
<tr>
<td>org.apache.log4j.PatternLayout</td>
<td>自定义格式输出</td>
</tr>
<tr>
<td>org.apache.log4j.SimpleLayout</td>
<td>输出级别和信息</td>
</tr>
<tr>
<td>org.apache.log4j.TTCCLayout</td>
<td>输出线程、级别、类名、信息</td>
</tr>
</tbody></table>
<p>使用方法如下</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 控制台输出，信息格式是 org.apache.log4j.SimpleLayout</span></span><br><span class="line"><span class="attr">log4j.appender.Console</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.Console.layout</span>=<span class="string">org.apache.log4j.SimpleLayout</span></span><br></pre></td></tr></table></figure>

<p>输出信息大概如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INFO - xxxx</span><br><span class="line">DEBUG - xxxx</span><br></pre></td></tr></table></figure>

<h4 id="自定义格式的用法"><a href="#自定义格式的用法" class="headerlink" title="自定义格式的用法"></a>自定义格式的用法</h4><p> <code>org.apache.log4j.PatternLayout</code> 的格式</p>
<table>
<thead>
<tr>
<th>格式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>%m</td>
<td>消息</td>
</tr>
<tr>
<td>%n</td>
<td>换行</td>
</tr>
<tr>
<td>%d</td>
<td>时间，可以指定格式，如 <code>%d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125;</code></td>
</tr>
<tr>
<td>%t</td>
<td>线程名</td>
</tr>
<tr>
<td>%p</td>
<td>输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL</td>
</tr>
<tr>
<td>%c</td>
<td>类名</td>
</tr>
<tr>
<td>%M</td>
<td>方法名</td>
</tr>
<tr>
<td>%r</td>
<td>耗费时间，毫秒</td>
</tr>
<tr>
<td>%l</td>
<td>代码所在位置</td>
</tr>
</tbody></table>
<p>用法如下</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 控制台输出，信息格式是 org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.Console</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.Console.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="comment"># 通过 ConversionPattern 设置属性</span></span><br><span class="line"><span class="attr">log4j.appender.Console.layout.ConversionPattern</span>=<span class="string">%d&#123;HH:mm:ss&#125; [%p] %m%n</span></span><br></pre></td></tr></table></figure>

<p>输出信息大概如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HH:mm:ss [INFO] xxxx</span><br><span class="line">HH:mm:ss [DEBUG] xxxx</span><br></pre></td></tr></table></figure>

<h3 id="输出等级-Threshold"><a href="#输出等级-Threshold" class="headerlink" title="输出等级 [Threshold]"></a>输出等级 [Threshold]</h3><p>相当于过滤，只输出指定级别的内容到指定位置</p>
<p>比如说控制台中只输出 <code>DEBUG</code> 级别的信息</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件输出</span></span><br><span class="line"><span class="attr">log4j.appender.Console</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.Console.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.Console.layout.ConversionPattern</span>=<span class="string">%d&#123;HH:mm:ss&#125; [%p] %m%n</span></span><br><span class="line"><span class="comment"># 设置级别</span></span><br><span class="line"><span class="attr">log4j.appender.Console.Threshold</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>补充：<code>Threshold</code> 的等级不能比根配置 <code>log4j.rootLogger</code> 低级，所以尽量使用较低的等级，【<a href="#%E6%97%A5%E5%BF%97%E7%AD%89%E7%BA%A7">回顾日志等级</a> 】</p>
</blockquote>
<h3 id="追加内容-Append"><a href="#追加内容-Append" class="headerlink" title="追加内容-[Append]"></a>追加内容-[Append]</h3><p>往旧的日志文件中追加内容</p>
<p>如果为 <code>true</code> 表示开启，会将新的内容追加到旧的日志文件</p>
<p>如果为 <code>false</code> 表示关闭，会将新的内容覆盖到旧的日志文件</p>
<p>默认是 <code>true</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">log4j.appender.File</span>=<span class="string">org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.File.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.File.layout.ConversionPattern</span>=<span class="string">%d&#123;HH:mm:ss&#125; [%p] %m%n</span></span><br><span class="line"><span class="comment"># 开启追加内容</span></span><br><span class="line"><span class="attr">log4j.appender.File.Append</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<h3 id="内容补充"><a href="#内容补充" class="headerlink" title="内容补充"></a>内容补充</h3><p><code>MaxFileSize</code> 设置日志文件大小，仅 <code>RollingFileAppender</code> 可用</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">log4j.appender.File</span>=<span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.File.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.File.layout.ConversionPattern</span>=<span class="string">%d&#123;HH:mm:ss&#125; [%p] %m%n</span></span><br><span class="line"><span class="comment"># 输出大小为 4MB</span></span><br><span class="line"><span class="attr">log4j.appender.File.MaxFileSize</span>=<span class="string">4MB</span></span><br><span class="line"><span class="attr">log4j.appender.File.Append</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<p><code>File</code> 设置日志文件输出位置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">DEBUG,ErrorFile</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># error 日志</span></span><br><span class="line"><span class="attr">log4j.appender.ErrorFile</span>=<span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.ErrorFile.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.ErrorFile.layout.ConversionPattern</span>=<span class="string">%d&#123;HH:mm:ss&#125; [%p] %m%n</span></span><br><span class="line"><span class="attr">log4j.appender.ErrorFile.MaxFileSize</span>=<span class="string">4MB</span></span><br><span class="line"><span class="comment"># 输出位置</span></span><br><span class="line"><span class="attr">log4j.appender.ErrorFile.File</span>=<span class="string">/logs/ERROR.log</span></span><br><span class="line"><span class="comment"># 等级不能低于根配置</span></span><br><span class="line"><span class="attr">log4j.appender.ErrorFile.Threshold</span>=<span class="string">Error</span></span><br><span class="line"><span class="attr">log4j.appender.ErrorFile.Append</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>参考自以下内容</strong></p>
<p>哔哩哔哩：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWp0NDExVDd6dA==">https://www.bilibili.com/video/BV1jt411T7zt<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>maven</tag>
        <tag>log4j</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis 二级缓存</title>
    <url>/2022/06/10/115704/1c591d879103/</url>
    <content><![CDATA[<p> 今天在使用 mybatis 时想要开启二级缓存，结果报错了，所以来记录一下</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/blog/202206101141800.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">org.apache.ibatis.cache.CacheException: Error serializing object.  Cause: java.io.NotSerializableException: exam.pojo.xxx</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>可以看到报错信息是序列化的问题那么只需要在对应的实体类中实现序列化接口 <code>Serializable</code> 就行（我这里使用了 Lombok）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exam.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">xxx</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String attr0;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> attr1;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>如果还不行，那就改一下对应的 mapper 的 <code>&lt;cache /&gt;</code> 标签中的属性，跟着 <span class="exturl" data-url="aHR0cHM6Ly9teWJhdGlzLm9yZy9teWJhdGlzLTMvemgvc3FsbWFwLXhtbC5odG1sI2NhY2hl">官方文档<i class="fa fa-external-link-alt"></i></span> 走就好了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">  <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">size</span>=<span class="string">&quot;512&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>参考自以下内容</strong>：<br>mybatis 官方文档：<span class="exturl" data-url="aHR0cHM6Ly9teWJhdGlzLm9yZy9teWJhdGlzLTMvemgvc3FsbWFwLXhtbC5odG1sI2NhY2hl">https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#cache<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode 摸鱼插件</title>
    <url>/2022/01/07/002503/e9243eeadaf9/</url>
    <content><![CDATA[<p>今天就来做一波 VScode 的插件分享吧，因为写其他东西要花的时间太多了，草稿还存着没写完，不过又想要发点什么内容，所以就有了这一期的 VSCode 的插件分享，这次要分享的插件是一些好玩的摸鱼插件，做人这么能不摸鱼呢，一天不摸鱼就浑身难受，今天就先推荐 5 个吧</p>
<span id="more"></span>

<h2 id="韭菜盒子"><a href="#韭菜盒子" class="headerlink" title="韭菜盒子"></a>韭菜盒子</h2><p>插件地址：<span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWdpc2NhZmVyLmxlZWstZnVuZA==">韭菜盒子<i class="fa fa-external-link-alt"></i></span></p>
<p>顾名思义，就是一个能让在写代码的过程中都不忘当韭菜的插件，这是一款可以看基金看股票的插件，还可以在底部栏显示韭菜的 <del>被割</del> 发育状况😭</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main//img/image-20220106233239851.png"></p>
<p>还可以在控制面板里查看快讯</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main//img/image-20220106233828729.png"></p>
<p>或者是在页面当中查看行情，能够基本满足你在写代码时想当韭菜的愿望</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main//img/image-20220106234100341.png"></p>
<h2 id="蝌蚪池塘"><a href="#蝌蚪池塘" class="headerlink" title="蝌蚪池塘"></a>蝌蚪池塘</h2><p>插件地址：<span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWV6c2hpbmUudGFkcG9sZQ==">蝌蚪池塘<i class="fa fa-external-link-alt"></i></span></p>
<p>这是一款聊天室插件，可以让你在摸鱼的同时发现其他摸鱼的人</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main//img/image-20220106234456306.png"></p>
<p>直接打字就可以发送消息</p>
<p>输入指令 <code>name:</code> 就可以改名字</p>
<p>输入指令 <code>color:</code> 就可以改小蝌蚪的颜色</p>
<p>输入指令 <code>size:</code> 就可以让小蝌蚪变大变小</p>
<p>输入指令 <code>tp:</code> 就可以传送到一个指定的坐标</p>
<h2 id="vsinder"><a href="#vsinder" class="headerlink" title="vsinder"></a>vsinder</h2><p>插件地址：<span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWJlbmF3YWQudnNpbmRlcg==">vsinder<i class="fa fa-external-link-alt"></i></span></p>
<p>这个插件就厉害了，相当于程序员专用的“陌陌”，不过呢，这个插件看的不是人，而是代码（额。。。我的登陆失效了，只好拿人家官方的图来演示了）</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main//img/giphy.gif"></p>
<p>登陆以后你要写上你要分享的代码，和简单的自我介绍，这样别人看到你的代码就可以选择“喜欢”或者“不喜欢”了，当然你也可以去看别人的，在这上面会经常看到一些有趣的代码，或者一些代码的梗</p>
<h2 id="小霸王"><a href="#小霸王" class="headerlink" title="小霸王"></a>小霸王</h2><p>插件地址：<span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWdhbWVkaWxvbmcuYW5lcw==">小霸王<i class="fa fa-external-link-alt"></i></span></p>
<p>这个插件可以让你玩到一些经典的小游戏，安装完以后默认会提供一个超级马里奥的游戏</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main//img/image-20220107000219834.png"></p>
<p>当然你也可以去下载一些默认提供的小游戏</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main//img/image-20220107000110751.png"></p>
<p>如果你有其他小游戏的游戏文件也是可以导入到里面的进行玩耍的哦</p>
<h2 id="Zhihu-On-VSCode"><a href="#Zhihu-On-VSCode" class="headerlink" title="Zhihu On VSCode"></a>Zhihu On VSCode</h2><p>插件地址：<span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPW5pdWRhaS52c2NvZGUtemhpaHU=">Zhihu On VSCode<i class="fa fa-external-link-alt"></i></span></p>
<p>这个插件可以让你在 VSCode 当中刷知乎，可以进行登陆绑定账号，这样就可以查看关于你的推荐文章，也可以进行搜索文章或者发布文章</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main//img/image-20220107000719622.png"></p>
<hr>
<p>关于为什么最近发的这么频繁？其实就是闲的呗，过段时间可能就不会发的这么频繁了，当然我还是希望我可以发的频繁一些</p>
]]></content>
      <categories>
        <category>分享</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript 学习笔记</title>
    <url>/2022/01/25/224007/7bef4c9a98bb/</url>
    <content><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>在 JavaScript 当中是没有数据类型的，应该说是在声明变量的时候不需要声明数据类型，所以就会有问题，而且有很多问题是在编写代码的时候不能被发现，因为是动态类型，所以即使是代码编辑器也没办法对代码有正确的提示，只有在编译时才会报错，而 TypeScript 就是为了解决 JavaScript 的这些小问题而出现的，所以就先来讲一下 TypeScript 的写法</p>
<span id="more"></span>

<p>JavaScript</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num;</span><br><span class="line"><span class="keyword">var</span> str;</span><br></pre></td></tr></table></figure>

<p>TypeScript</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="attr">num</span>:<span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="attr">str</span>:<span class="built_in">string</span>;</span><br></pre></td></tr></table></figure>

<p>可以看见，TypeScript 和 JavaScript 的区别就是 <code>type</code> ，也就是说 TypeScript 是有类型的 JavaScript，在声明变量时就要规定它的类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="attr">num</span>:<span class="built_in">number</span>; 	<span class="comment">// number 类型</span></span><br><span class="line"><span class="keyword">var</span> <span class="attr">str</span>:<span class="built_in">string</span>;	    <span class="comment">// string 类型</span></span><br><span class="line"><span class="keyword">var</span> <span class="attr">arr1</span>:<span class="built_in">string</span>[];	<span class="comment">// string 数组</span></span><br><span class="line"><span class="keyword">var</span> <span class="attr">arr2</span>:<span class="built_in">number</span>[];	<span class="comment">// number 数组</span></span><br><span class="line"><span class="keyword">var</span> <span class="attr">obj</span>:&#123;&#125;;         <span class="comment">// object 类型</span></span><br><span class="line"><span class="keyword">var</span> <span class="attr">a</span>:<span class="built_in">any</span>;         	<span class="comment">// 任意类型</span></span><br><span class="line"><span class="keyword">var</span> <span class="attr">b</span>:<span class="built_in">void</span>;         <span class="comment">// 空类型</span></span><br></pre></td></tr></table></figure>

<p> 其中 <code>any</code> 和 <code>void</code> 通常用在函数的返回类型当中</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数跟 JavaScript 大体上也是一样的，不过要标明返回的数据类型，其实也可以不用，但这样的话不就又失去了 <code>type</code> 的作用了吗</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func1</span>(<span class="params"></span>):<span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func2 = <span class="keyword">function</span>(<span class="params"></span>):<span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func3 = ():<span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在入参的后面也需要跟上数据类型，这样在调用时就不会出现任何参数都能塞进去的情况了</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = (<span class="attr">x</span>:<span class="built_in">number</span>,<span class="attr">y</span>:<span class="built_in">number</span>):<span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>比如说像这样</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main//img/image-20220131204343484.png"></p>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>有时候需要用到入参是一个对象的时候可以这样写</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getInfo = (<span class="attr">obj</span>:&#123;<span class="attr">name</span>:<span class="built_in">string</span>,<span class="attr">age</span>:<span class="built_in">number</span>&#125;):<span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`name: <span class="subst">$&#123;obj.name&#125;</span>,age: <span class="subst">$&#123;obj.age&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但有些时候这样写就显得有些复杂了，这时候可以给入参加入一些约束，就需要用到接口</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接口 用来约束对象中的参数</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Info</span>&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用接口作为入参</span></span><br><span class="line"><span class="keyword">const</span> getInfo = (&#123;name,age&#125;:<span class="title class_">Info</span>):<span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`name: <span class="subst">$&#123;name&#125;</span>,age: <span class="subst">$&#123;age&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="attr">info</span>:<span class="built_in">string</span> = <span class="title function_">getInfo</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">	<span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h3><p>可是有些时候，有些参数并不是必须的，就可以设置成可选属性，只需要在类型前加上一个 <code>?</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Info</span>&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">    age?:<span class="built_in">number</span>;	<span class="comment">// 可选属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getInfo = (&#123;name,age&#125;:<span class="title class_">Info</span>):<span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`name: <span class="subst">$&#123;name&#125;</span> <span class="subst">$&#123;age?<span class="string">&#x27;,age:&#x27;</span> + age : <span class="string">&#x27;&#x27;</span>&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="attr">info1</span>:<span class="built_in">string</span> = <span class="title function_">getInfo</span>(&#123;</span><br><span class="line">	<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>		<span class="comment">// 可选属性可以不输入</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="attr">info2</span>:<span class="built_in">string</span> = <span class="title function_">getInfo</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3><p>有些时候我们还有可能会输入了一些多余的属性，比如不存在的属性，在传参的时候就会出现一些小问题</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="attr">info</span>:<span class="built_in">string</span> = <span class="title function_">getInfo</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">id</span>:<span class="string">&#x27;name&#x27;</span>	<span class="comment">// 多余的属性</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main//img/image-20220131220437633.png"></p>
<p>这时候就需要用到断言来让函数接受</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="attr">info</span>:<span class="built_in">string</span> = <span class="title function_">getInfo</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">id</span>:<span class="string">&#x27;name&#x27;</span></span><br><span class="line">&#125; <span class="keyword">as</span> <span class="title class_">Info</span>);</span><br></pre></td></tr></table></figure>



<h3 id="索引签名"><a href="#索引签名" class="headerlink" title="索引签名"></a>索引签名</h3><p>当然，还有更好的解决方法，把多余的参数也接收了</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Info</span>&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">    age?:<span class="built_in">number</span>;</span><br><span class="line">    [<span class="attr">prop</span>:<span class="built_in">string</span>]:<span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>先到这里，之后学到新的像声明枚举，泛型，命名空间啥的，到时候再补充</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Terminal 美化</title>
    <url>/2022/04/15/204456/7ce1539dd5ae/</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy90ZXJtaW5hbC8=">Windows Terminal<i class="fa fa-external-link-alt"></i></span> 我已经使用了很长一段时间了，美化也用了很长一段时间，但是有个问题，每次一设置完就可以很长一段时间不用管了，所以每次操作系统或者换电脑时很费功夫，所以先记录下来方便之后使用<span id="more"></span></p>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ul>
<li><p><strong>安装 Windows Terminal</strong></p>
<p><code>win 11</code> 自带可以忽略，<code>win 10</code> 可以到应用商店上搜索 <code>Windows Terminal</code> 安装即可</p>
</li>
<li><p><strong>安装 PowerShell 7</strong></p>
<p>自带的 <code>PowerShell</code> 好像是 5 ，不过不用管了，直接到应用商店搜索 <code>PowerShell</code> 安装即可</p>
</li>
<li><p><strong>设置权限</strong></p>
<p><code>PowerShell</code> 想要执行脚本需要先设置执行权限</p>
</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> RemoteSigned <span class="literal">-scope</span> CurrentUser</span><br></pre></td></tr></table></figure>

<h2 id="开始美化"><a href="#开始美化" class="headerlink" title="开始美化"></a>开始美化</h2><p>这里是直接使用 <code>PowerShell</code> 进行安装，如果需要用到 <code>scoop</code> 可以执行以下命令下载 <code>scoop</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Invoke-Expression</span> (<span class="built_in">New-Object</span> System.Net.WebClient).DownloadString(<span class="string">&#x27;https://get.scoop.sh&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>安装 posh-git</strong></li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Install-Module</span> posh<span class="literal">-git</span> <span class="literal">-Scope</span> CurrentUser</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>安装 oh-my-posh</strong></li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Install-Module</span> <span class="built_in">oh</span><span class="literal">-my-posh</span> <span class="literal">-Scope</span> CurrentUser</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>设置主题</strong></p>
<p>我这里使用的是 <code>M365Princess</code> 这款主题</p>
</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-PoshPrompt</span> M365Princess</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>其他主题</strong></p>
<p>如果需要使用其他主题，有两种方式获取，可以到 <code>oh-my-posh</code> 官网查看 <span class="exturl" data-url="aHR0cHM6Ly9vaG15cG9zaC5kZXYvZG9jcy90aGVtZXM=">https://ohmyposh.dev/docs/themes<i class="fa fa-external-link-alt"></i></span> ， 或者执行以下命令</p>
</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Get-PoshThemes</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>安装字体</strong></p>
<p>设置完主题以后可能会出现乱码的情况，只需要安装一款合适的字体即可，推荐到 <span class="exturl" data-url="aHR0cHM6Ly93d3cubmVyZGZvbnRzLmNvbS8=">https://www.nerdfonts.com/<i class="fa fa-external-link-alt"></i></span> 进行挑选安装</p>
</li>
<li><p><strong>更改字体</strong></p>
</li>
</ul>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204152020890.png"></p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204152020744.png"></p>
<ul>
<li><p><strong>自动设置主题</strong></p>
<p>当窗口关闭以后主题就消失了，所以需要写一个让 <code>PowerShell</code> 每次启动后都自动设置好主题的脚本</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">notepad <span class="variable">$PROFILE</span>	<span class="comment"># 用记事本打开</span></span><br></pre></td></tr></table></figure>

<p>然后写入以下内容</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-PoshPrompt</span> M365Princess</span><br></pre></td></tr></table></figure>

<p>之后每次启动都会自动设置号主体了</p>
</li>
</ul>
<blockquote>
<p><strong>参考自以下内容</strong><br><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNTI4ODI5OTA=">Windows Terminal 主题美化<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNzAzMzUwNDQvdHJpZWQtdG8taW5zdGFsbC1vaC1teS1wb3NoLWJ1dC1pdC10ZWxscy1tZS10aGF0LXRoZS10ZXJtLWlzLW5vdC1yZWNvZ25pemVkLWFz">Tried to install oh-my-posh but it tells me that “the term is not recognized as…”<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>分享</category>
      </categories>
      <tags>
        <tag>美化</tag>
        <tag>Windows Terminal</tag>
        <tag>oh-my-posh</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim 学习笔记</title>
    <url>/2022/01/03/161249/7ee67d7b2d4f/</url>
    <content><![CDATA[<p>现在的 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JTlCJUJFJUU1JUJEJUEyJUU3JTk0JUE4JUU2JTg4JUI3JUU3JTk1JThDJUU5JTlEJUEy">GUI<i class="fa fa-external-link-alt"></i></span> 已经做的非常好看和实用了，现在很多 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvTGludXg=">Linux<i class="fa fa-external-link-alt"></i></span> 都有桌面版了，像 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvVmlt">Vim<i class="fa fa-external-link-alt"></i></span> 这种老古董估计也就做服务器运维的用的比较多了，虽然但是我还是觉得有必要学习一下，因为从编辑的效率上来说确实要比现在的 GUI 应用要快不少</p>
<span id="more"></span>

<h3 id="安装-Vim"><a href="#安装-Vim" class="headerlink" title="安装 Vim"></a>安装 Vim</h3><p>其实有部分的 Linux 系统是自带的，有的是自带 Vim 的旧版本 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvVmk=">Vi<i class="fa fa-external-link-alt"></i></span> ，所以这里就来简单的讲解一下如何安装 Vim</p>
<h4 id="Ubuntu-安装"><a href="#Ubuntu-安装" class="headerlink" title="Ubuntu 安装"></a>Ubuntu 安装</h4><p>在 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvVWJ1bnR1">Ubuntu<i class="fa fa-external-link-alt"></i></span> 系统下可以直接通过 <code>apt</code> 工具进行安装，在 root 用户下执行下面的命令，非 root 用户只需要在前面加上 <code>sudo</code> 命令即可</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apt install -y vim</span><br></pre></td></tr></table></figure>



<h4 id="CentOS-安装"><a href="#CentOS-安装" class="headerlink" title="CentOS 安装"></a>CentOS 安装</h4><p>如果你是在 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvQ2VudE9T">CentOS<i class="fa fa-external-link-alt"></i></span> 系统下安装，也可以使用 <code>yum</code> 工具进行安装，在 root 用户下执行下面的命令，非 root 用户只需要在前面加上 <code>sudo</code> 命令即可</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y vim</span><br></pre></td></tr></table></figure>



<h4 id="macOS-安装"><a href="#macOS-安装" class="headerlink" title="macOS 安装"></a>macOS 安装</h4><p>如果你使用的是苹果电脑的 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvTWFjT1M=">macOS<i class="fa fa-external-link-alt"></i></span> ，那你可以通过 <span class="exturl" data-url="aHR0cHM6Ly9icmV3LnNoLw==">Homebrew<i class="fa fa-external-link-alt"></i></span> 进行安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">brew install macvim</span><br></pre></td></tr></table></figure>



<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>接下来将简单讲解如何使用，帮助帮助你快速上手使用 Vim 进行编辑文件</p>
<h4 id="新建-x2F-打开文件"><a href="#新建-x2F-打开文件" class="headerlink" title="新建&#x2F;打开文件"></a>新建&#x2F;打开文件</h4><p>如果你想要使用 Vim 进行新建或者打开一个文件，你可执行 <code>vim &lt;file-name&gt;</code> ，比如我想要新建一个文件名为 <em><code>index.html</code></em> 的文件，那么我就可以执行以下命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim index.html</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main//img/image-20220103134344774.png"></p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main//img/image-20220103134415684.png"></p>
<p>当然如果你还没想好起什么名字也可以直接执行 <code>vim</code> 来新建临时的文件</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main//img/image-20220103135917863.png"></p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main//img/image-20220103135940460.png"></p>
<h4 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h4><p>我们刚打开 Vim 的时候， Vim 是处于 <em>normal</em> 模式下的，如果想要进行编辑，那么就要切换到 <em>insert</em> 模式，<em>insert</em> 模式主要有三种进入方式，最常用的是使用快捷键 <kbd>i</kbd> 进入 <em>insert</em> 模式，进入以后一般会有一个这样的提示，还有另外两种方式，一种是快捷键 <kbd>a</kbd> 一种是快捷键 <kbd>o</kbd> ，这三种方式是有区别的，使用 <kbd>i</kbd> 进入的话是在光标选中的地方开始编辑，<kbd>a</kbd> 进入的话则是在光标选中的地方的前面进行编辑，而 <kbd>o</kbd> 是另起一行进行编辑</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main//img/image-20220103141727067.png"></p>
<h4 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h4><p>虽然 Vim 可以通过方向键进行移动光标，但是还是需要我们的手离开现在放的位置然后移动到方向键上，太麻烦了，其实 Vim 有一种不离开键盘的移动方式</p>
<h5 id="上下左右移动"><a href="#上下左右移动" class="headerlink" title="上下左右移动"></a>上下左右移动</h5><p>首先先使用快捷键 <kbd>Esc</kbd> 或者 <kbd>Ctrl</kbd> + <kbd>[</kbd> &#x2F; <kbd>cmd</kbd> + <kbd>[</kbd> 切换回 <em>normal</em> 模式，然后随意地按下 <kbd>h</kbd> <kbd>j</kbd> <kbd>k</kbd> <kbd>l</kbd> 四个键，<kbd>h</kbd> 表示左移， <kbd>j</kbd> 表示下移， <kbd>k</kbd> 表示上移，<kbd>l</kbd> 表示右移，切记，只能在 <em>normal</em> 模式下进行移动光标</p>
<h5 id="快速跳转"><a href="#快速跳转" class="headerlink" title="快速跳转"></a>快速跳转</h5><p>还有一些其他的移动方式，比如回到行首可以使用快捷键 <kbd>0</kbd> ，如果想要快速到行尾，则可以使用快捷键 <kbd>$</kbd> </p>
<p>在移动光标的时候觉得一个字符一个字符的移动太慢了可以选择使用 <kbd>w</kbd> 进行一个单词一个单词地移动，如果你在按单词移动时，会发现光标会在标点符号上也会停下，这时候你可以尝试使用 <kbd>W</kbd> 进行移动，这样就会略过紧跟单词的标点符号了，跳转到上一个单词时也是这样，但是快捷键就换成了 <kbd>b</kbd> 和 <kbd>B</kbd> ，当然你也可以选择跳到单词的尾部，这时候你就要用到快捷键 <kbd>e</kbd> 和 <kbd>E</kbd> 了</p>
<p>要是觉得这样还是太慢怎么办，那当然还是有办法的，那就是按段进行移动，<kbd>{</kbd> 代表上一段，<kbd>}</kbd> 代表下一段</p>
<p>要是觉得还是慢？真拿你没办法，按两次 <kbd>g</kbd> 可以跳转到页首，按 <kbd>G</kbd> 可以跳转到页尾，怎么样，够快了吧</p>
<h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><p>学会了怎么移动光标，那么就开始对文本进行选择了，对文本进行选择需要先进入到 <em>visual</em> 模式，首先要先退回到 <em>normal</em> 模式，然后使用快捷键 <kbd>v</kbd> 进入到选择模式，然后按照上面的移动光标的方法就可以进行选择啦，当然如果你是打算选中一整行的话，可以使用快捷键 <kbd>V</kbd> ，这个是行选择模式</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main//img/image-20220103153107052.png"></p>
<h4 id="拉-x2F-粘贴"><a href="#拉-x2F-粘贴" class="headerlink" title="拉 &#x2F; 粘贴"></a>拉 &#x2F; 粘贴</h4><p>看这个小标题是不是觉得很奇怪，不是复制粘贴吗？拉是个什么鬼，这个问题问得好，我刚开始学的时候也觉得怪怪的，因为 Vim 当中复制的快捷键是 <kbd>y</kbd> ，我觉得奇怪，这个 y 是什么意思，原来是截取了 “yank” 的首字母，在 Vim 当中的复制跟我们常规的复制是不一样的，它是会把你选中的内容保存到 Vim 的缓冲区里而不是剪贴板里，不过这个就先不管它了，接下来讲讲怎么粘贴，粘贴的快捷键是 <kbd>p</kbd> ，可也将你刚刚 yank 下来的内容粘贴出来</p>
<p>诶，又到了奇技淫巧时间，上面选择里提到了选择一整行，那么 Vim 可不可以复制粘贴一整行呢？当然也是可以的，只需要按顺序按下 <kbd>y</kbd> <kbd>y</kbd> <kbd>p</kbd> 就可以直接复制粘贴当前光标所在的行了</p>
<h4 id="删除-x2F-修改"><a href="#删除-x2F-修改" class="headerlink" title="删除&#x2F;修改"></a>删除&#x2F;修改</h4><p>学会了选择当然也要学会怎么删除啦，选择内容并不单只是用来复制粘贴的，主要还是用来修改内容的，删除常用到的有两种，可以按 <kbd>x</kbd> 进行删除单个字符或者选中的字符，也可以按两次 <kbd>d</kbd> 删除一整行</p>
<p>那么如果想要快速进行修改，也可以使用 <kbd>r</kbd> 替换当前选中的一个字符，而想要对一段内容进行修改，则可以在 <em>visual</em> 模式下选中，然后使用快捷键 <kbd>s</kbd> ，这是删除并进入 <em>insert</em> 模式</p>
<h4 id="保存-x2F-退出"><a href="#保存-x2F-退出" class="headerlink" title="保存&#x2F;退出"></a>保存&#x2F;退出</h4><p>当你编辑完文件，想要保存，可以使用快捷键 <kbd>:</kbd> <kbd>w</kbd> ，保存完以后要退出可以按 <kbd>:</kbd> <kbd>q</kbd> </p>
<hr>
<p>好了，今天的内容就暂时到这里，Vim 还有其他用法，下次再讲，主要是写太多了，太累了</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 部署应用</title>
    <url>/2022/05/05/211538/38f7bad9b217/</url>
    <content><![CDATA[<p>最近在耍 docker ，接下来就简单记录一下 docker 的从安装到部署一些容器 <span id="more"></span></p>
<h2 id="Linux-下安装"><a href="#Linux-下安装" class="headerlink" title="Linux 下安装"></a>Linux 下安装</h2><p>其实 docker 的 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwv">官方文档<i class="fa fa-external-link-alt"></i></span> 中就已经写明白了，接下来的安装步骤是照搬官网的，以 Ubuntu 为例</p>
<p><strong>更新 <code>apt</code> 包索引并安装包，以允许 <code>apt</code> 通过HTTPS使用存储库</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install ca-certificates curl gnupg lsb-release</span><br></pre></td></tr></table></figure>

<p><strong>添加Docker官方GPG密钥</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br></pre></td></tr></table></figure>

<p><strong>使用以下命令设置稳定存储库</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure>

<p><strong>更新 <code>apt</code> 包索引，安装最新版本的 Docker Engine、containerd 和 Docker Compose</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure>

<h2 id="Windows-下安装"><a href="#Windows-下安装" class="headerlink" title="Windows 下安装"></a>Windows 下安装</h2><p>windows 下安装其实挺简单的，直接到 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZG9ja2VyLmNvbS9nZXQtc3RhcnRlZC8=">docker 官网<i class="fa fa-external-link-alt"></i></span> 里下载就好了，这里顺便讲一下 wsl2 的安装， wsl2 有 Linux 的内核，所以其实可以按照上面 Linux 的步骤进行安装</p>
<p><strong>启用 Windows 子系统</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:Microsoft<span class="literal">-Windows-Subsystem-Linux</span> /all /norestart</span><br></pre></td></tr></table></figure>

<p><strong>启用虚拟机</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure>

<p><strong>下载内核更新包</strong></p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93c2xzdG9yZXN0b3JhZ2UuYmxvYi5jb3JlLndpbmRvd3MubmV0L3dzbGJsb2Ivd3NsX3VwZGF0ZV94NjQubXNp">适用于 x64 计算机的 WSL2 Linux 内核更新包<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p><strong>设置 wsl2</strong> </p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--set-default-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p><strong>安装一个子系统</strong></p>
<p>这里以 Ubuntu 为例</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--install</span> <span class="literal">-d</span> Ubuntu</span><br></pre></td></tr></table></figure>

<p><strong>打开 docker desktop 进行设置</strong></p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/blog/202205050121079.png"></p>
<p>这个时候你就会发现你的 windows 的 docker 和子系统的相通了</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/blog/202205050127031.png"></p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/blog/202205050128677.png"></p>
<h2 id="创建一个容器"><a href="#创建一个容器" class="headerlink" title="创建一个容器"></a>创建一个容器</h2><p>接下来尝试部署一些应用</p>
<h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p><code>-it</code> 远程连接</p>
<p><code>-p</code> 端口映射</p>
<p><code>–name</code> 容器名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it -p 80:80 -p 443:443 --name nginx nginx</span><br></pre></td></tr></table></figure>

<p>执行完以上命令后就会运行容器，如果发现本地没有对应的镜像就会到 docker hub 上下载，比如像下面这样</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/blog/202205052103422.png"></p>
<p>当它下载完成以后就会开始运行</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/blog/202205052106368.png" alt="image-20220505210627987"></p>
<p>这时候就可以到浏览器中输入 <code>http://localhost:80</code> 进行访问</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/blog/202205052109663.png"></p>
<p>运行成功，现在可以将容器停了，重新打开让它在后台运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start nginx</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>git 的使用</title>
    <url>/2022/03/24/002444/6919d9f4ccfe/</url>
    <content><![CDATA[<p><code>git</code> 在日常开发中会经常使用到，它用于对项目进行版本控制<span id="more"></span></p>
<h2 id="git-安装"><a href="#git-安装" class="headerlink" title="git 安装"></a>git 安装</h2><ul>
<li><p><span class="exturl" data-url="aHR0cDovL21zeXNnaXQuZ2l0aHViLmlvLw==">下载 git Windows 版<i class="fa fa-external-link-alt"></i></span> </p>
</li>
<li><p>Power Shell (Windows 10&#x2F;Windows 11)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">winget install git</span><br></pre></td></tr></table></figure>
</li>
<li><p>macOS (Homebrew)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure>
</li>
<li><p>Debian&#x2F;Ubuntu</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install git</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="git-命令"><a href="#git-命令" class="headerlink" title="git 命令"></a>git 命令</h2><h3 id="初始化-git-仓库"><a href="#初始化-git-仓库" class="headerlink" title="初始化 git 仓库"></a>初始化 git 仓库</h3><p>创建新文件夹并进入，然后执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>这样就可以得到一个初始化好的 git 仓库了</p>
<h3 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h3><p>初始化仓库完成以后就可以将文件添加到缓存区当中了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add &lt;file&gt;</span><br></pre></td></tr></table></figure>

<p><code>file</code> 代表文件，比如在项目当中，有一个已经编辑好的文件 <code>README.md</code> ，现在需要将它添加到缓存区中就需要这样</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目录结构</span></span><br><span class="line"><span class="comment"># .\</span></span><br><span class="line"><span class="comment"># \--- README.md</span></span><br><span class="line"></span><br><span class="line">git add README.md</span><br></pre></td></tr></table></figure>

<p>也可以使用下面的命令一次性添加所有文件到缓存区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add *</span><br></pre></td></tr></table></figure>

<h3 id="提交文件"><a href="#提交文件" class="headerlink" title="提交文件"></a>提交文件</h3><p>添加完需要的文件到缓存区以后，就可以将缓存区内的文件进行一次性提交到仓库了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m &lt;massage&gt;</span><br></pre></td></tr></table></figure>

<p>比如已经将一些修改过的代码或者新增的文件添加到了缓存区，那么就可以将它们提交到本地仓库了，不过你应该在提交时说明更改了什么内容，也就是 <code>massage</code> 参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;Update README.md&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="提交到远程仓库"><a href="#提交到远程仓库" class="headerlink" title="提交到远程仓库"></a>提交到远程仓库</h3><p>通常为了方便团队进行管理项目，或者是方便在不同的地方进行开发，可以将代码放到远程仓库中</p>
<h4 id="设置-commiter-信息"><a href="#设置-commiter-信息" class="headerlink" title="设置 commiter 信息"></a>设置 commiter 信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name &lt;username&gt;</span><br><span class="line">git config --global user.email &lt;email&gt;</span><br></pre></td></tr></table></figure>

<p><code>username</code> 是用户名，<code>email</code> 是邮箱，需要都设置成所注册的平台的信息，如 <code>GitHub</code> 或 <code>gitee</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;XXX&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;XXX@XX.com&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="连接远程仓库"><a href="#连接远程仓库" class="headerlink" title="连接远程仓库"></a>连接远程仓库</h4><p>设置好自己的 commiter 信息以后就可以开始创建远程仓库并提交了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add &lt;remote&gt; &lt;server&gt;</span><br></pre></td></tr></table></figure>
<p><code>remote</code> 是指远程仓库的别名，通常叫 <code>origin</code> ， <code>server</code> 代表远程仓库的地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin xxx.com/username/xxx.git </span><br></pre></td></tr></table></figure>

<h4 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h4><p>接下来就可以将代码推送了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push &lt;remote&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure>

<p><code>branch</code> 是指你的代码分支，是用来隔离开每个版本之间的差异的，第一次推送的分支需要标明，之后就可以省略了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin master	<span class="comment"># 第一次推送</span></span><br><span class="line">git push origin			<span class="comment"># 非第一次推送</span></span><br></pre></td></tr></table></figure>

<h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>接下来就讲讲关于分支的操作</p>
<h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><p>为了将每个版本或者特性的代码隔离开来，需要创建不同的分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch &lt;branch&gt;</span><br></pre></td></tr></table></figure>

<p><code>branch</code> 是分支名，需要为分支起一个名字</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch xxx</span><br></pre></td></tr></table></figure>

<h4 id="检查分支"><a href="#检查分支" class="headerlink" title="检查分支"></a>检查分支</h4><p>检查本地分支，通常在创建仓库时会默认生成一个 <code>master</code> 分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># * master</span></span><br><span class="line"><span class="comment">#   xxx</span></span><br></pre></td></tr></table></figure>

<p>前面有个 <code>*</code> 表示当前分支</p>
<p>检查所有分支，就是包括本地和远程的所有分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># * master</span></span><br><span class="line"><span class="comment">#   xxx</span></span><br><span class="line"><span class="comment">#   remotes/origin/HEAD -&gt; origin/master</span></span><br><span class="line"><span class="comment">#   remotes/origin/master</span></span><br></pre></td></tr></table></figure>

<p>带有 <code>remotes/origin</code> 前缀的是远程分支，其中 <code>HEAD</code> 表示默认分支</p>
<h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><p>切换到想要的分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout &lt;branch&gt;</span><br></pre></td></tr></table></figure>

<p>还记得前的创建分支吗，其实你可以在创建的同时切换分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b &lt;branch&gt;</span><br></pre></td></tr></table></figure>

<h3 id="更新与合并"><a href="#更新与合并" class="headerlink" title="更新与合并"></a>更新与合并</h3><p>在多人开发时，可能别人已经提交了新的代码，所以原则上应该在推送前，将远程的最新改动与本地同步一下，就像这样</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>

<p>在代码写完并经过 <code>review</code> 之后，就可以将两个分支的代码进行合并了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure>

<p>这样就可以将当前分支与目标分支进行合并了</p>
<p>通常情况下，代码会自动合并，但也可能合并失败，所以应该先检查一下代码的差异</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff &lt;source_branch&gt; &lt;target_branch&gt;</span><br></pre></td></tr></table></figure>

<p><code>source_branch</code> 是你需要合并的分支，<code>target_branch</code> 是目标分支</p>
<blockquote>
<p><strong>参考自以下内容</strong></p>
<p>git - 简明指南： <span class="exturl" data-url="aHR0cDovL3JvZ2VyZHVkbGVyLmdpdGh1Yi5pby9naXQtZ3VpZGUvaW5kZXguemguaHRtbA==">http://rogerdudler.github.io/git-guide/index.zh.html<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 22-03-19</title>
    <url>/2022/03/19/171023/b0b12d2fb859/</url>
    <content><![CDATA[<p>今天的 leetcode</p>
<ul>
<li><strong><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmVtb3ZlLWVsZW1lbnQv">27. 移除元素<i class="fa fa-external-link-alt"></i></span></strong> </li>
<li><strong><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYXZlcmFnZS1zYWxhcnktZXhjbHVkaW5nLXRoZS1taW5pbXVtLWFuZC1tYXhpbXVtLXNhbGFyeS8=">1491. 去掉最低工资和最高工资后的工资平均值<i class="fa fa-external-link-alt"></i></span></strong></li>
<li><strong><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY291bnQtb2RkLW51bWJlcnMtaW4tYW4taW50ZXJ2YWwtcmFuZ2Uv">1523. 在区间范围内统计奇数数目<i class="fa fa-external-link-alt"></i></span></strong></li>
</ul>
<span id="more"></span>

<img data-src="https://stats.justsong.cn/api/leetcode/?username=jesspig&cn=true">

<h2 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a>27. 移除元素</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>只需要将原有数组覆盖就行，只有不等于 val 值的才会去覆盖，等于 val 值的就跳过覆盖，只需要记录覆盖了多少次就行</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> val)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (val &gt; <span class="number">100</span> || val &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (numsSize &gt; <span class="number">100</span> || numsSize &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> newSize = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[i] != val) &#123;</span><br><span class="line">      nums[newSize++] = nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> val)</span>&#123;</span><br><span class="line">  <span class="type">int</span> newSize = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; numsSize) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[i] == val) &#123;</span><br><span class="line">      i++;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    nums[newSize++] = nums[i];</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1491-去掉最低工资和最高工资后的工资平均值"><a href="#1491-去掉最低工资和最高工资后的工资平均值" class="headerlink" title="1491. 去掉最低工资和最高工资后的工资平均值"></a>1491. 去掉最低工资和最高工资后的工资平均值</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>求出最大最小值和总值，然后  $ (sum - max - min) \div (salarySize - 2) $</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">average</span><span class="params">(<span class="type">int</span>* salary, <span class="type">int</span> salarySize)</span>&#123;</span><br><span class="line">  <span class="type">double</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="type">double</span> max = salary[<span class="number">0</span>];</span><br><span class="line">  <span class="type">double</span> min = salary[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; salarySize; i++)&#123;</span><br><span class="line">    sum += salary[i];</span><br><span class="line">    max = max &lt; salary[i] ? salary[i] : max;</span><br><span class="line">    min = min &gt; salary[i] ? salary[i] : min;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (sum - max - min) / (salarySize - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1523-在区间范围内统计奇数数目"><a href="#1523-在区间范围内统计奇数数目" class="headerlink" title="1523. 在区间范围内统计奇数数目"></a>1523. 在区间范围内统计奇数数目</h2><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>当总数为偶数个时，奇数个数必然为总数的一半<br>当总数为奇数个时，偶数到偶数间必然是总数整除一半<br>当总数为奇数个时，奇数到奇数间必然比偶数多一个</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">countOdds</span><span class="params">(<span class="type">int</span> low, <span class="type">int</span> high)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ((high - low) % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; low % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (high - low) / <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (high - low) / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 22-03-20</title>
    <url>/2022/03/20/212340/c02eaed37a41/</url>
    <content><![CDATA[<p>今日份 LeetCode</p>
<ul>
<li><strong><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbnVtYmVyLW9mLTEtYml0cy8=">191. 位1的个数<i class="fa fa-external-link-alt"></i></span></strong> </li>
<li><strong><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc3VidHJhY3QtdGhlLXByb2R1Y3QtYW5kLXN1bS1vZi1kaWdpdHMtb2YtYW4taW50ZWdlci8=">1281. 整数的各位积和之差<i class="fa fa-external-link-alt"></i></span></strong></li>
<li><strong><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmluYXJ5LXNlYXJjaC8=">704. 二分查找<i class="fa fa-external-link-alt"></i></span></strong></li>
</ul>
<span id="more"></span>

<p><img data-src="https://stats.justsong.cn/api/leetcode/?username=jesspig&cn=true"></p>
<h2 id="191-位1的个数"><a href="#191-位1的个数" class="headerlink" title="191. 位1的个数"></a>191. 位1的个数</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>跟 <code>1</code> 进行按位与运算，等于 <code>1</code> 时 <code>res</code> 加 1</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">hammingWeight</span><span class="params">(<span class="type">uint32_t</span> n)</span> &#123;</span><br><span class="line">  <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)&#123;</span><br><span class="line">    res = (n &gt;&gt; i) &amp; <span class="number">1u</span> ? res + <span class="number">1</span> : res;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1281-整数的各位积和之差"><a href="#1281-整数的各位积和之差" class="headerlink" title="1281. 整数的各位积和之差"></a>1281. 整数的各位积和之差</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>取出每一位数进行累加和累乘</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">subtractProductAndSum</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">  <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> product = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="type">int</span> m = n % <span class="number">10</span>;</span><br><span class="line">    sum += m;</span><br><span class="line">    product *= m;</span><br><span class="line">    n /= <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> product - sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a>704. 二分查找</h2><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>将数分成两堆，如果不在左边就在右边，一直这样分，直到找出或者没找出来为止</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target)</span>&#123;</span><br><span class="line">  <span class="type">int</span> l = <span class="number">0</span>, r = numsSize - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">    <span class="type">int</span> m = (r - l) / <span class="number">2</span> + l;</span><br><span class="line">    <span class="keyword">if</span>(nums[m] == target) <span class="keyword">return</span> m;</span><br><span class="line">    <span class="keyword">if</span>(nums[m] &gt; target) r = m - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(nums[m] &lt; target) l = m + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 22-03-21</title>
    <url>/2022/03/21/231736/27b76f5015b0/</url>
    <content><![CDATA[<p>今日份 leetcode，只做了两题</p>
<ul>
<li><strong><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbGFyZ2VzdC1wZXJpbWV0ZXItdHJpYW5nbGUv">976. 三角形的最大周长<i class="fa fa-external-link-alt"></i></span></strong></li>
<li><strong><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZmluZC1uZWFyZXN0LXBvaW50LXRoYXQtaGFzLXRoZS1zYW1lLXgtb3IteS1jb29yZGluYXRlLw==">1779. 找到最近的有相同 X 或 Y 坐标的点<i class="fa fa-external-link-alt"></i></span></strong></li>
</ul>
<span id="more"></span>

<p><img data-src="https://stats.justsong.cn/api/leetcode/?username=jesspig&cn=true"></p>
<hr>
<h2 id="976-三角形的最大周长"><a href="#976-三角形的最大周长" class="headerlink" title="976. 三角形的最大周长"></a>976. 三角形的最大周长</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>先排序，后比较，满足三角形条件后返回</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">void</span> *a, <span class="type">void</span> *b)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> *(<span class="type">int</span> *)b - *(<span class="type">int</span> *)a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">largestPerimeter</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span>&#123;</span><br><span class="line">    qsort(nums,numsSize,<span class="keyword">sizeof</span>(<span class="type">int</span>),cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize - <span class="number">2</span> ; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i + <span class="number">2</span>] + nums[i + <span class="number">1</span>] &gt; nums[i])&#123;</span><br><span class="line">            <span class="keyword">return</span> nums[i] + nums[i + <span class="number">1</span>] + nums[i + <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1779-找到最近的有相同-X-或-Y-坐标的点"><a href="#1779-找到最近的有相同-X-或-Y-坐标的点" class="headerlink" title="1779. 找到最近的有相同 X 或 Y 坐标的点"></a>1779. 找到最近的有相同 X 或 Y 坐标的点</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>计算每个符合条件的坐标距离，并记录下标，当遇到更小的距离时才替换记录的下标，否则不改变记录的下标</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">nearestValidPoint</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span>** points, <span class="type">int</span> pointsSize, <span class="type">int</span>* pointsColSize)</span>&#123;</span><br><span class="line">  <span class="type">int</span> dist = INT_MAX;</span><br><span class="line">  <span class="type">int</span> x1 = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; pointsSize; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (points[i][<span class="number">0</span>] == x || points[i][<span class="number">1</span>] == y)&#123;</span><br><span class="line">      <span class="type">int</span> x2 = <span class="built_in">abs</span>(points[i][<span class="number">0</span>] - x);</span><br><span class="line">      <span class="type">int</span> y2 = <span class="built_in">abs</span>(points[i][<span class="number">1</span>] - y);</span><br><span class="line">      <span class="keyword">if</span>((x2 + y2) &lt; dist)&#123;</span><br><span class="line">        dist = (x2 + y2) &lt; dist ? (x2 + y2) : dist;</span><br><span class="line">        x1 = i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 22-03-22</title>
    <url>/2022/03/22/015201/855f2896c820/</url>
    <content><![CDATA[<p>今日份 leetcode ，昨天两题，那今天就补上</p>
<ul>
<li><strong><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc2lnbi1vZi10aGUtcHJvZHVjdC1vZi1hbi1hcnJheS8=">1822. 数组元素积的符号<i class="fa fa-external-link-alt"></i></span></strong></li>
<li><strong><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY2FuLW1ha2UtYXJpdGhtZXRpYy1wcm9ncmVzc2lvbi1mcm9tLXNlcXVlbmNlLw==">1502. 判断能否形成等差数列<i class="fa fa-external-link-alt"></i></span></strong></li>
<li><strong><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaGFwcHktbnVtYmVyLw==">202. 快乐数<i class="fa fa-external-link-alt"></i></span></strong></li>
<li><strong><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY2hlY2staWYtb25lLXN0cmluZy1zd2FwLWNhbi1tYWtlLXN0cmluZ3MtZXF1YWwv">1790. 仅执行一次字符串交换能否使两个字符串相等<i class="fa fa-external-link-alt"></i></span></strong></li>
</ul>
<span id="more"></span>

<p><img data-src="https://stats.justsong.cn/api/leetcode/?username=jesspig&cn=true"></p>
<h2 id="1822-数组元素积的符号"><a href="#1822-数组元素积的符号" class="headerlink" title="1822. 数组元素积的符号"></a>1822. 数组元素积的符号</h2><p>这道题有点意思，本来想着有点过于简单</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">signFunc</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> x &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">arraySign</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span>&#123;</span><br><span class="line">  <span class="type">int</span> product = nums[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; numsSize; i++)&#123;</span><br><span class="line">    product *= nums[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> signFunc(product);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果发现溢出了，即使换成 <code>long long int</code> 也是会溢出，还在想着要不转成科学计数法试试，结果发现标题就是答案</p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>既然标题就是答案，要求记录最终乘积的符号，那就只记符号就好了</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">arraySign</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span>&#123;</span><br><span class="line">  <span class="type">int</span> product = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums[i] == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    product *= nums[i] &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> product;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1502-判断能否形成等差数列"><a href="#1502-判断能否形成等差数列" class="headerlink" title="1502. 判断能否形成等差数列"></a>1502. 判断能否形成等差数列</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>先排序，再比较每个值的差是否相等</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">void</span> *x, <span class="type">void</span> *y)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> *(<span class="type">int</span> *) x - *(<span class="type">int</span> *) y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">canMakeArithmeticProgression</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> arrSize)</span>&#123;</span><br><span class="line">  qsort(arr,arrSize,<span class="keyword">sizeof</span>(<span class="type">int</span>),cmp);</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; arrSize - <span class="number">1</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] - arr[i - <span class="number">1</span>] != arr[i + <span class="number">1</span>] - arr[i])&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="202-快乐数"><a href="#202-快乐数" class="headerlink" title="202. 快乐数"></a>202. 快乐数</h2><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>将出现过的数记录下来，只要重复出现那就代表循环了，至于数组大小为什么是 <code>810</code> 因为那是我用计算器算的，哈哈🤣，其实应该可以更小点<br><img data-src="https://pic.leetcode-cn.com/1647884527-NqGbHu-image.png"></p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">  <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(n != <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="type">int</span> t = n % <span class="number">10</span>;</span><br><span class="line">    n /= <span class="number">10</span>;</span><br><span class="line">    s += t * t;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">isHappy</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">  <span class="type">int</span> t[<span class="number">810</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">while</span>(n != <span class="number">1</span>)&#123;</span><br><span class="line">    n = sum(n);</span><br><span class="line">    <span class="keyword">if</span> (t[n] &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    t[n]++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而且第一次拿这么好的成绩，有点小激动</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/jesspig/PicBed@main/img/202203220146259.png"></p>
<h2 id="1790-仅执行一次字符串交换能否使两个字符串相等"><a href="#1790-仅执行一次字符串交换能否使两个字符串相等" class="headerlink" title="1790. 仅执行一次字符串交换能否使两个字符串相等"></a>1790. 仅执行一次字符串交换能否使两个字符串相等</h2><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><p>标记不相同的下标，然后查看两个下标的元素是否可以交换，相差超过3个必然不能进行交换</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">areAlmostEqual</span><span class="params">(<span class="type">char</span> * s1, <span class="type">char</span> * s2)</span>&#123;</span><br><span class="line">  <span class="type">int</span> len = <span class="built_in">strlen</span>(s1);</span><br><span class="line">  <span class="type">int</span> diff = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> flag[<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">if</span> (s1 == s2) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (s1[i] != s2[i]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (diff == <span class="number">0</span>) flag[<span class="number">0</span>] = i;</span><br><span class="line">      <span class="keyword">if</span> (diff == <span class="number">1</span>) flag[<span class="number">1</span>] = i;</span><br><span class="line">      diff++;</span><br><span class="line">      <span class="keyword">if</span> (diff &gt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (s1[flag[<span class="number">0</span>]] == s2[flag[<span class="number">1</span>]] &amp;&amp; s1[flag[<span class="number">1</span>]] == s2[flag[<span class="number">0</span>]]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 22-03-26</title>
    <url>/2022/03/26/234538/e196352b0882/</url>
    <content><![CDATA[<p>今日份 leetcode</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWVyZ2Utc3RyaW5ncy1hbHRlcm5hdGVseS8=">1768. 交替合并字符串<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZ29hbC1wYXJzZXItaW50ZXJwcmV0YXRpb24v">1678. 设计 Goal 解析器<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZmluZC10aGUtZGlmZmVyZW5jZS8=">389. 找不同<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<span id="more"></span>

<p><img data-src="https://stats.justsong.cn/api/leetcode/?username=jesspig&cn=true"></p>
<h2 id="1768-交替合并字符串"><a href="#1768-交替合并字符串" class="headerlink" title="1768. 交替合并字符串"></a>1768. 交替合并字符串</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>先轮流往新字符串里加字符，有多的再全部补上，结尾以 <code>\0</code> 结束字符串</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">char</span> * <span class="title function_">mergeAlternately</span><span class="params">(<span class="type">char</span> * word1, <span class="type">char</span> * word2)</span>&#123;</span><br><span class="line">    <span class="type">int</span> len1 = <span class="built_in">strlen</span>(word1);</span><br><span class="line">    <span class="type">int</span> len2 = <span class="built_in">strlen</span>(word2);</span><br><span class="line">    <span class="type">char</span> * res = (<span class="type">char</span> *) <span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(<span class="type">char</span>) * (len1 + len2 + <span class="number">1</span>));</span><br><span class="line">    <span class="type">int</span> residx = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> idx1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> idx2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(idx1 &lt; len1 &amp;&amp; idx2 &lt; len2)&#123;</span><br><span class="line">        res[residx++] = word1[idx1++];</span><br><span class="line">        res[residx++] = word2[idx2++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(idx1 &lt; len1) res[residx++] = word1[idx1++];</span><br><span class="line">    <span class="keyword">while</span>(idx2 &lt; len2) res[residx++] = word2[idx2++];</span><br><span class="line">    res[residx] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1678-设计-Goal-解析器"><a href="#1678-设计-Goal-解析器" class="headerlink" title="1678. 设计 Goal 解析器"></a>1678. 设计 Goal 解析器</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>已知输入的字符串只会包含 G、() 和 (al)，所以只需要知道是不是 G 还有知道 ( 后面跟的是什么就行了，然后往新字符串中加入对应值，遍历到其他字符的情况就跳过，最后补上 \0 结束字符串</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">char</span> * <span class="title function_">interpret</span><span class="params">(<span class="type">char</span> * command)</span>&#123;</span><br><span class="line">    <span class="type">int</span> reslen = <span class="built_in">strlen</span>(command);</span><br><span class="line">    <span class="type">char</span> * res = (<span class="type">char</span> *) <span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(<span class="type">char</span>) * reslen + <span class="number">1</span>); </span><br><span class="line">    <span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; reslen; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(command[i] == <span class="string">&#x27;G&#x27;</span>) res[idx++] = <span class="string">&#x27;G&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(command[i] == <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(command[i + <span class="number">1</span>] == <span class="string">&#x27;)&#x27;</span>) res[idx++] = <span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(command[i + <span class="number">1</span>] == <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">                res[idx++] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                res[idx++] = <span class="string">&#x27;l&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res[idx] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="389-找不同"><a href="#389-找不同" class="headerlink" title="389. 找不同"></a>389. 找不同</h2><p><img data-src="https://pic.leetcode-cn.com/1648314548-zRkkjZ-image.png" alt="image.png"></p>
<h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>统计每个字符出现的次数，然后找出次数不一样的将它返回就行</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">char</span> <span class="title function_">findTheDifference</span><span class="params">(<span class="type">char</span> * s, <span class="type">char</span> * t)</span>&#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> s_flags[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> t_flags[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        s_flags[s[i] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        t_flags[t[i] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    t_flags[t[len] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s_flags[i] != t_flags[i])&#123;</span><br><span class="line">            idx = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> idx + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 22-03-25</title>
    <url>/2022/03/25/155735/2967112ba5a3/</url>
    <content><![CDATA[<p>今日份 leetcode</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWF0cml4LWRpYWdvbmFsLXN1bS8=">1572. 矩阵对角线元素的和<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc3F1YXJlcy1vZi1hLXNvcnRlZC1hcnJheS8=">977. 有序数组的平方<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZmlyc3QtYmFkLXZlcnNpb24v">278. 第一个错误的版本<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<span id="more"></span>

<p><img data-src="https://stats.justsong.cn/api/leetcode/?username=jesspig&cn=true"></p>
<h2 id="1572-矩阵对角线元素的和"><a href="#1572-矩阵对角线元素的和" class="headerlink" title="1572. 矩阵对角线元素的和"></a>1572. 矩阵对角线元素的和</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>存在交点时交点只被计算一次</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">diagonalSum</span><span class="params">(<span class="type">int</span>** mat, <span class="type">int</span> matSize, <span class="type">int</span>* matColSize)</span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; matSize; i++)&#123;</span><br><span class="line">        sum += i == matSize - i - <span class="number">1</span> ? mat[i][i] : mat[i][i] + mat[i][matSize - i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977. 有序数组的平方"></a>977. 有序数组的平方</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>每个元素乘以自己然后再排序</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note: The returned array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp</span> <span class="params">(<span class="type">void</span> * a, <span class="type">void</span> * b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">int</span> *) a - *(<span class="type">int</span> *) b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span>* <span class="title function_">sortedSquares</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span>* returnSize)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize ; i++)&#123;</span><br><span class="line">        nums[i] *= nums[i]; </span><br><span class="line">    &#125;</span><br><span class="line">    qsort(nums,numsSize,<span class="keyword">sizeof</span>(<span class="type">int</span>),cmp);</span><br><span class="line">    *returnSize = numsSize;</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="278-第一个错误的版本"><a href="#278-第一个错误的版本" class="headerlink" title="278. 第一个错误的版本"></a>278. 第一个错误的版本</h2><p>本来打算直接找的，不过果不其然超时了，所以用二分</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="comment">// The API isBadVersion is defined for you.</span></span><br><span class="line"><span class="comment">// bool isBadVersion(int version);</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">firstBadVersion</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isBadVersion(i))&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>因为只要错了一个版本后面的都会错，所以只要两边缩直到剩下一个，要注意的是 <code>right</code> 不用 <code>-1</code> ，因为它本身可能就是第一个错误</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="comment">// The API isBadVersion is defined for you.</span></span><br><span class="line"><span class="comment">// bool isBadVersion(int version);</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">firstBadVersion</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> right = n;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="type">int</span> mid = (right - left) / <span class="number">2</span> + left;</span><br><span class="line">        <span class="keyword">if</span> (isBadVersion(mid)) right = mid;</span><br><span class="line">        <span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 22-03-24</title>
    <url>/2022/03/24/235102/56310aed3073/</url>
    <content><![CDATA[<p>今日份 leetcode ，昨天没更，因为发现关于树的都不会，我需要先去研究一下</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc3VtLW9mLWFsbC1vZGQtbGVuZ3RoLXN1YmFycmF5cy8=">1588. 所有奇数长度子数组的和<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbW92ZS16ZXJvZXMv">283. 移动零<i class="fa fa-external-link-alt"></i></span> </li>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmljaGVzdC1jdXN0b21lci13ZWFsdGgv">1672. 最富有客户的资产总量<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<span id="more"></span>

<p><img data-src="https://stats.justsong.cn/api/leetcode/?username=jesspig&cn=true"></p>
<h2 id="1588-所有奇数长度子数组的和"><a href="#1588-所有奇数长度子数组的和" class="headerlink" title="1588. 所有奇数长度子数组的和"></a>1588. 所有奇数长度子数组的和</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>从第一个元素开始往下，计算每奇数个连续的数能组合的情况的和再相加<br>大概就像这样</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&lt;&lt; [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> [<span class="number">1</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> [<span class="number">2</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> [<span class="number">3</span>]</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> [<span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sumOddLengthSubarrays</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> arrSize)</span> &#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> left = <span class="number">0</span>; left &lt; arrSize; left++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> len = <span class="number">1</span>; len + left &lt;= arrSize; len += <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="type">int</span> right = left + len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = left; i &lt;= right; i++)&#123;</span><br><span class="line">                sum += arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283. 移动零"></a>283. 移动零</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>只要不等于0的都往前覆盖，并记录下覆盖的次数，然后填0</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span>&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] != <span class="number">0</span>) &#123;</span><br><span class="line">            nums[count++] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = count; i &lt; numsSize; i++)&#123;</span><br><span class="line">        nums[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1672-最富有客户的资产总量"><a href="#1672-最富有客户的资产总量" class="headerlink" title="1672. 最富有客户的资产总量"></a>1672. 最富有客户的资产总量</h2><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>只需要使用一个临时变量来保存每组的总值，然后返回最大的</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">maximumWealth</span><span class="params">(<span class="type">int</span>** accounts, <span class="type">int</span> accountsSize, <span class="type">int</span>* accountsColSize)</span>&#123;</span><br><span class="line">    <span class="type">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; accountsSize; i++)&#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; *accountsColSize; j++)&#123;</span><br><span class="line">            t += accounts[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        max = max &lt; t ? t : max;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 22-03-27</title>
    <url>/2022/03/27/171557/7c83337496ca/</url>
    <content><![CDATA[<p>今日份 leetcode</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcm90YXRlLWFycmF5Lw==">189. 轮转数组<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdG8tbG93ZXItY2FzZS8=">709. 转换成小写字母<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZGVjcnlwdC1zdHJpbmctZnJvbS1hbHBoYWJldC10by1pbnRlZ2VyLW1hcHBpbmcv">1309. 解码字母到整数映射<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<span id="more"></span>

<p><img data-src="https://stats.justsong.cn/api/leetcode/?username=jesspig&cn=true"></p>
<h2 id="189-轮转数组"><a href="#189-轮转数组" class="headerlink" title="189. 轮转数组"></a>189. 轮转数组</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>将值放到新数组中对应的位置，然后用新数组覆盖原数组</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">rotate</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> k)</span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[numsSize];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++) &#123;</span><br><span class="line">        arr[(i + k) % numsSize] = nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++) &#123;</span><br><span class="line">        nums[i] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="709-转换成小写字母"><a href="#709-转换成小写字母" class="headerlink" title="709. 转换成小写字母"></a>709. 转换成小写字母</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>判断是否为大写，是大写就 ‘+32’，因为大小写相差 32</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C</span></span><br><span class="line"><span class="type">char</span> * <span class="title function_">toLowerCase</span><span class="params">(<span class="type">char</span> * s)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;Z&#x27;</span>) s[i] += <span class="number">32</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="1309-解码字母到整数映射"><a href="#1309-解码字母到整数映射" class="headerlink" title="1309. 解码字母到整数映射"></a>1309. 解码字母到整数映射</h2><p>又是个难得的好成绩🤣</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/jesspig/PicBed@main/img/202203271659043.png"></p>
<h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>字符 <code>0 - 9</code> 减去 字符 <code>0</code> 就是数字 <code>0 - 9</code>，这时只要加上字符 <code>a</code> 就会等于其对应的小写字母，知道这些，就只需要判断输入的字符满足 <code>0 - 9</code> 还是 <code>#</code> 的条件就好了</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">char</span> * <span class="title function_">freqAlphabets</span><span class="params">(<span class="type">char</span> * s)</span>&#123;</span><br><span class="line">    <span class="type">char</span> *res= <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * (<span class="built_in">strlen</span>(s) + <span class="number">1</span>) );</span><br><span class="line">    <span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s);)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i+<span class="number">2</span> &lt; <span class="built_in">strlen</span>(s) &amp;&amp; s[i+<span class="number">2</span>] == <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">            res[idx++] = ((s[i] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + s[i + <span class="number">1</span>] - <span class="string">&#x27;1&#x27;</span>) + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            i += <span class="number">3</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res[idx++] = (s[i] - <span class="string">&#x27;1&#x27;</span>) + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res[idx] =  <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 22-03-29</title>
    <url>/2022/03/29/012204/22c6f06ff444/</url>
    <content><![CDATA[<p>今日份 leetcode</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY29udGFpbnMtZHVwbGljYXRlLw==">217. 存在重复元素<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdHdvLXN1bS1paS1pbnB1dC1hcnJheS1pcy1zb3J0ZWQv">167. 两数之和 II - 输入有序数组<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<span id="more"></span>

<p><img data-src="https://stats.justsong.cn/api/leetcode/?username=jesspig&cn=true"></p>
<h2 id="217-存在重复元素"><a href="#217-存在重复元素" class="headerlink" title="217. 存在重复元素"></a>217. 存在重复元素</h2><p>提交时才发现这道题之前做过一次，但好像没发题解</p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>先将代码进行排序，然后逐一比较，若当前元素等于后一个，则表示存在重复元素</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">int</span> *x, <span class="type">int</span> *y)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> *x - *y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">containsDuplicate</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span> &#123;</span><br><span class="line">    qsort(nums, numsSize, <span class="keyword">sizeof</span>(<span class="type">int</span>), cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] == nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> containsDuplicate = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    nums.<span class="title function_">sort</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] == nums[i + <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="167-两数之和-II-输入有序数组"><a href="#167-两数之和-II-输入有序数组" class="headerlink" title="167. 两数之和 II - 输入有序数组"></a>167. 两数之和 II - 输入有序数组</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>因为给定的数组是有序的，所以可以得出以下结论<br>左边和右边相加，如果比目标值大，说明右边的数太大了，所以往前推<br>左边和右边相加，如果比目标值小，说明左边的数太小了，所以往后推<br>左边和右边相加，如果等于目标值，说明找到了，所以返回下标 <code>+1</code>，一开始没看清楚题目以为是返回下标</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note: The returned array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span>* <span class="title function_">twoSum</span><span class="params">(<span class="type">int</span>* numbers, <span class="type">int</span> numbersSize, <span class="type">int</span> target, <span class="type">int</span>* returnSize)</span>&#123;</span><br><span class="line">    <span class="type">int</span> * res = (<span class="type">int</span> *) <span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">2</span>);</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = numbersSize - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; numbersSize)&#123;</span><br><span class="line">        <span class="keyword">if</span>(numbers[left] + numbers[right] == target)&#123;</span><br><span class="line">            res[<span class="number">0</span>] = left + <span class="number">1</span>;</span><br><span class="line">            res[<span class="number">1</span>] = right + <span class="number">1</span>;</span><br><span class="line">            *returnSize = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(numbers[left] + numbers[right] &gt; target) right--;</span><br><span class="line">        <span class="keyword">if</span>(numbers[left] + numbers[right] &lt; target) left++;</span><br><span class="line">    &#125;</span><br><span class="line">    *returnSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后吐槽一下，为什么别人暴力能过，我暴力超时😭<br><img data-src="https://pic.leetcode-cn.com/1648487226-smZsZq-image.png" alt="image.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* <span class="title function_">twoSum</span><span class="params">(<span class="type">int</span>* numbers, <span class="type">int</span> numbersSize, <span class="type">int</span> target, <span class="type">int</span>* returnSize)</span>&#123;</span><br><span class="line">    <span class="type">int</span> * res = (<span class="type">int</span> *) <span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numbersSize - <span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; numbersSize; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(numbers[i] + numbers[j] == target)&#123;</span><br><span class="line">                res[<span class="number">0</span>] = i + <span class="number">1</span>;</span><br><span class="line">                res[<span class="number">1</span>] = j + <span class="number">1</span>;</span><br><span class="line">                *returnSize = <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *returnSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>leetcode</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 22-04-05</title>
    <url>/2022/04/05/222755/f25dbf83e235/</url>
    <content><![CDATA[<p>今日份 leetcode</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmluYXJ5LXByZWZpeC1kaXZpc2libGUtYnktNS8=">1018. 可被 5 整除的二进制前缀<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmVwbGFjZS1hbGwtZGlnaXRzLXdpdGgtY2hhcmFjdGVycy8=">1844. 将所有数字用字符替换<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYnVsbHMtYW5kLWNvd3Mv">299. 猜数字游戏<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZmluZC1ncmVhdGVzdC1jb21tb24tZGl2aXNvci1vZi1hcnJheS8=">1979. 找出数组的最大公约数<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<span id="more"></span>

<p><img data-src="https://stats.justsong.cn/api/leetcode/?username=jesspig&cn=true"></p>
<p>最近学校的作业有那么亿点点多，所以没太多时间刷题</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/jesspig/PicBed@main/img/202204051846179.png"></p>
<h2 id="1018-可被-5-整除的二进制前缀"><a href="#1018-可被-5-整除的二进制前缀" class="headerlink" title="1018. 可被 5 整除的二进制前缀"></a>1018. 可被 5 整除的二进制前缀</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>通过左移加上二进制数组的元素再模 <code>5</code>，然后再判断是否等于 <code>0</code> 即可<br>但会有一个问题，那就是这个数会变得很大，不过根据平时的计算可以发现 <code>5</code> 的倍数跟其他位无关，只跟个位上的数有关，所以其余的位数可以舍去，只需要知道<code>(个位数上的数 * 2 + 数组元素) % 5</code> 是否等于 <code>0</code> 即可</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note: The returned array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="type">bool</span>* <span class="title function_">prefixesDivBy5</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span>* returnSize)</span>&#123;</span><br><span class="line">    *returnSize = numsSize;</span><br><span class="line">    <span class="type">bool</span> * ans = (<span class="type">bool</span> *) <span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(<span class="type">bool</span>) * numsSize);</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++)&#123;</span><br><span class="line">        ans[i] = (n = ((n &lt;&lt; <span class="number">1</span>) + nums[i]) % <span class="number">5</span>) == <span class="number">0</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="1844-将所有数字用字符替换"><a href="#1844-将所有数字用字符替换" class="headerlink" title="1844. 将所有数字用字符替换"></a>1844. 将所有数字用字符替换</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>如果是字母直接保存，是 <code>&#39;0&#39; - &#39;9&#39;</code> 话就减去 <code>&#39;0&#39;</code>，因为减去 <code>&#39;0&#39;</code> 就可以得到本身的数字，然后让上一个字符加上这个数保存即可</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">char</span> * <span class="title function_">replaceDigits</span><span class="params">(<span class="type">char</span> * s)</span>&#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="type">char</span> * res =  (<span class="type">char</span> *) <span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(<span class="type">char</span>) * len + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        res[i] = (s[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;9&#x27;</span>) ? s[i - <span class="number">1</span>] + s[i] - <span class="string">&#x27;0&#x27;</span> : s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    res[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="299-猜数字游戏"><a href="#299-猜数字游戏" class="headerlink" title="299. 猜数字游戏"></a>299. 猜数字游戏</h2><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>统计对应的个数，不对应的则分别记录出现次数，然后判断出现过的数的交集，因为交集且不对应的数才是 <code>Cows</code>，然后求出交集中每个数最小出现次数的和，因为每个位置不对的数只匹配一次</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">char</span> * <span class="title function_">getHint</span><span class="params">(<span class="type">char</span> * secret, <span class="type">char</span> * guess)</span>&#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(secret);</span><br><span class="line">    <span class="type">int</span> As[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> Bs[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> A = <span class="number">0</span>,B = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> * res = (<span class="type">char</span> *) <span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(<span class="type">char</span>) * <span class="number">9</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(secret[i] == guess[i]) A++;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            As[secret[i] - <span class="string">&#x27;0&#x27;</span>]++;</span><br><span class="line">            Bs[guess[i] - <span class="string">&#x27;0&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(As[i] &gt; <span class="number">0</span> &amp;&amp; Bs[i] &gt; <span class="number">0</span>) B += As[i] &gt; Bs[i] ? Bs[i] : As[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sprintf</span>(res,<span class="string">&quot;%dA%dB&quot;</span>,A,B);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1979-找出数组的最大公约数"><a href="#1979-找出数组的最大公约数" class="headerlink" title="1979. 找出数组的最大公约数"></a>1979. 找出数组的最大公约数</h2><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><p>先使用 qsort 对数组进行排序，然后利用辗转相除法求出最大公约数</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">void</span> * a, <span class="type">void</span> * b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> * (<span class="type">int</span> *) a - * (<span class="type">int</span> *)b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">findGCD</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span>&#123;</span><br><span class="line">    qsort(nums, numsSize, <span class="keyword">sizeof</span>(<span class="type">int</span>), cmp);</span><br><span class="line">    <span class="type">int</span> max = nums[numsSize - <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> min = nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n= max % min;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        max = min;</span><br><span class="line">        min = n;</span><br><span class="line">        n= max % min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 22-04-14</title>
    <url>/2022/04/14/215203/68083bf21bb5/</url>
    <content><![CDATA[<p>今日份 leetcode</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY2FsY3VsYXRlLXNwZWNpYWwtYm9udXMv">1873. 计算特殊奖金<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc3dhcC1zYWxhcnkv">627. 变更性别<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<span id="more"></span>

<p><img data-src="https://stats.justsong.cn/api/leetcode/?username=jesspig&cn=true"></p>
<h2 id="1873-计算特殊奖金"><a href="#1873-计算特殊奖金" class="headerlink" title="1873. 计算特殊奖金"></a>1873. 计算特殊奖金</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>只要是偶数或 <code>M</code> 开头的返回 <code>0</code> 否则返回 <code>salary</code></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- mysql</span></span><br><span class="line"># Write your MySQL query statement below</span><br><span class="line"><span class="keyword">select</span> employee_id, if (employee_id <span class="operator">%</span> <span class="number">2</span> <span class="operator">=</span> <span class="number">0</span> <span class="keyword">or</span> name <span class="keyword">like</span> <span class="string">&#x27;M%&#x27;</span>, <span class="number">0</span>, salary) <span class="keyword">as</span> bonus <span class="keyword">from</span> Employees;</span><br></pre></td></tr></table></figure>

<h2 id="627-变更性别"><a href="#627-变更性别" class="headerlink" title="627. 变更性别"></a>627. 变更性别</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p><code>sex</code> 是 <code>f</code> 时返回 <code>m</code> 否则返回 <code>f</code></p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- mysql</span></span><br><span class="line"># Write your MySQL query statement below</span><br><span class="line"><span class="keyword">update</span> Salary <span class="keyword">set</span> sex <span class="operator">=</span> if(sex <span class="operator">=</span> &quot;f&quot;, &quot;m&quot;, &quot;f&quot;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 22-04-13</title>
    <url>/2022/04/13/120313/eae37935120e/</url>
    <content><![CDATA[<p>今日份 leetcode，整点数据库</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmlnLWNvdW50cmllcy8=">595. 大的国家<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmVjeWNsYWJsZS1hbmQtbG93LWZhdC1wcm9kdWN0cy8=">1757. 可回收且低脂的产品<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZmluZC1jdXN0b21lci1yZWZlcmVlLw==">584. 寻找用户推荐人<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<span id="more"></span>

<p><img data-src="https://stats.justsong.cn/api/leetcode/?username=jesspig&cn=true"></p>
<h2 id="595-大的国家"><a href="#595-大的国家" class="headerlink" title="595. 大的国家"></a>595. 大的国家</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>直接根据条件查就好了</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- mysql</span></span><br><span class="line"># Write your MySQL query statement below</span><br><span class="line"><span class="keyword">select</span> name, population, area <span class="keyword">from</span> world <span class="keyword">where</span> population <span class="operator">&gt;=</span> <span class="number">25000000</span> <span class="keyword">or</span> area <span class="operator">&gt;=</span> <span class="number">3000000</span>;</span><br></pre></td></tr></table></figure>

<h2 id="1757-可回收且低脂的产品"><a href="#1757-可回收且低脂的产品" class="headerlink" title="1757. 可回收且低脂的产品"></a>1757. 可回收且低脂的产品</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>直接根据条件查就好了</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- mysql</span></span><br><span class="line"># Write your MySQL query statement below</span><br><span class="line"><span class="keyword">select</span> product_id <span class="keyword">from</span> Products <span class="keyword">where</span> low_fats <span class="operator">=</span> &quot;Y&quot; <span class="keyword">and</span> recyclable <span class="operator">=</span> &quot;Y&quot;;</span><br></pre></td></tr></table></figure>

<h2 id="584-寻找用户推荐人"><a href="#584-寻找用户推荐人" class="headerlink" title="584. 寻找用户推荐人"></a>584. 寻找用户推荐人</h2><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>这道题感觉有点反直觉，直觉上来说直接下面这样就好了，但结果并不仅排除了 <code>2</code> 还排除了 <code>null</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> customer <span class="keyword">where</span> referee_id <span class="operator">!=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p>所以再加一个条件就好了</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- mysql</span></span><br><span class="line"># Write your MySQL query statement below</span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> customer <span class="keyword">where</span> referee_id <span class="operator">!=</span> <span class="number">2</span> <span class="keyword">or</span> referee_id <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 22-04-15</title>
    <url>/2022/04/15/234111/3fb05e670303/</url>
    <content><![CDATA[<p>今日份 leetcode</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcGF0aWVudHMtd2l0aC1hLWNvbmRpdGlvbi8=">1527. 患某种疾病的患者<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmVtb3ZlLWR1cGxpY2F0ZXMtZnJvbS1zb3J0ZWQtbGlzdC8=">83. 删除排序链表中的重复元素<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<span id="more"></span>

<p><img data-src="https://stats.justsong.cn/api/leetcode/?username=jesspig&cn=true"></p>
<h2 id="1527-患某种疾病的患者"><a href="#1527-患某种疾病的患者" class="headerlink" title="1527. 患某种疾病的患者"></a>1527. 患某种疾病的患者</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><code>^DIAB1|\\sDIAB1</code> 表示以 <code>DIAB1</code> 开头或空格后的 <code>DIAB1</code></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- mysql</span></span><br><span class="line"># Write your MySQL query statement below</span><br><span class="line"><span class="keyword">select</span> patient_id, patient_name, conditions <span class="keyword">from</span> Patients <span class="keyword">where</span> conditions regexp <span class="string">&#x27;^DIAB1|\\sDIAB1&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="83-删除排序链表中的重复元素"><a href="#83-删除排序链表中的重复元素" class="headerlink" title="83. 删除排序链表中的重复元素"></a>83. 删除排序链表中的重复元素</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>如果当前节点的值与后继节点的值相等，那么将后继的后继覆盖到当前节点的后继，否则返回当前节点</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">deleteDuplicates</span><span class="params">(<span class="keyword">struct</span> ListNode* head)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!head || !head-&gt;next) <span class="keyword">return</span> head;</span><br><span class="line">    head-&gt;next = deleteDuplicates(head-&gt;next);</span><br><span class="line">    <span class="keyword">return</span> head-&gt;val == head-&gt;next-&gt;val ? head-&gt;next : head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>C</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 22-04-16</title>
    <url>/2022/04/16/232822/4df1e42b6d1f/</url>
    <content><![CDATA[<p>今日份 leetcode</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWF4aW11bS1wb2ludHMteW91LWNhbi1vYnRhaW4tZnJvbS1jYXJkcy8=">1423. 可获得的最大点数<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<span id="more"></span>

<p><img data-src="https://stats.justsong.cn/api/leetcode/?username=jesspig&cn=true"></p>
<h2 id="1423-可获得的最大点数"><a href="#1423-可获得的最大点数" class="headerlink" title="1423. 可获得的最大点数"></a>1423. 可获得的最大点数</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>先计算出前 <code>k</code> 个数的和，然后再一个个减掉并从后面开始一个个地加，即计算前 <code>k - i</code> 个数加后 <code>i</code> 个数的和，在此过程中比较出最大的和并返回</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">maxScore</span><span class="params">(<span class="type">int</span>* cardPoints, <span class="type">int</span> cardPointsSize, <span class="type">int</span> k)</span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">        sum += cardPoints[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = sum;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">        sum -= cardPoints[i];</span><br><span class="line">        sum += cardPoints[cardPointsSize - k + i];</span><br><span class="line">        res = res &gt; sum ? res : sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 中的 &#39;*args&#39; 和 &#39;**kwargs&#39;</title>
    <url>/2022/03/23/131930/314aa0d5ce97/</url>
    <content><![CDATA[<p>在看别人的 <code>python</code> 代码时，会发现一些函数的入参是 <code>*args</code> 和 <code>**kwargs</code> ，那么这两个是用来干嘛的呢，接下来进行测试和研究一下它们的用法<span id="more"></span></p>
<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>首先看一下它们是什么类型，这样好方便之后研究怎么用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;args:&#x27;</span>,<span class="built_in">type</span>(args))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;kwargs:&#x27;</span>,<span class="built_in">type</span>(kwargs))</span><br><span class="line">    </span><br><span class="line">func()</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">args: &lt;class <span class="string">&#x27;tuple&#x27;</span>&gt;</span><br><span class="line">kwargs: &lt;class <span class="string">&#x27;dict&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>可以发现 <code>*args</code> 是元组 （ <code>tuple</code> ）类型，而 <code>**kwargs</code> 是字典 ( <code>dict</code> ) 类型</p>
<h2 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h2><p>那么怎么进行传参呢，可以再进行测试一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;args:&#x27;</span>,<span class="built_in">type</span>(args))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;--&gt;&#x27;</span>,args)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;kwargs:&#x27;</span>,<span class="built_in">type</span>(kwargs))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;--&gt;&#x27;</span>,kwargs)</span><br><span class="line">    </span><br><span class="line">func(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">args: &lt;class <span class="string">&#x27;tuple&#x27;</span>&gt;</span><br><span class="line">--&gt; (1, 2)</span><br><span class="line">kwargs: &lt;class <span class="string">&#x27;dict&#x27;</span>&gt;</span><br><span class="line">--&gt; &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>可以发现，明明函数是要求两个入参，但是输入了两个入参后都被传去 <code>*args</code> 里了，那么怎么把值传到 <code>**kwargs</code> 里呢，可以再来测试一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;args:&#x27;</span>,<span class="built_in">type</span>(args))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;--&gt;&#x27;</span>,args)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;kwargs:&#x27;</span>,<span class="built_in">type</span>(kwargs))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;--&gt;&#x27;</span>,kwargs)</span><br><span class="line">    </span><br><span class="line">func(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span> : <span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">args: &lt;class <span class="string">&#x27;tuple&#x27;</span>&gt;</span><br><span class="line">--&gt; (&#123;<span class="string">&#x27;a&#x27;</span>: 1, <span class="string">&#x27;b&#x27;</span>: 2&#125;,)</span><br><span class="line">kwargs: &lt;class <span class="string">&#x27;dict&#x27;</span>&gt;</span><br><span class="line">--&gt; &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>可以发现即便是直接放一个字典类型进去，他还是会放到 <code>*args</code> 中，所以现在可以简单的先下个结论， <code>*args</code> 是用来接收入参并放到元组中，但是问题是还是不知道 <code>**kwargs</code> 是干什么用的，所以再改下代码来测试一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;kwargs:&#x27;</span>,kwargs)</span><br><span class="line">    </span><br><span class="line">func(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span> : <span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">~\AppData\Local\Temp/ipykernel_14972/513502206.py <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      2     <span class="built_in">print</span>(<span class="string">&#x27;kwargs:&#x27;</span>,kwargs)</span><br><span class="line">      3 </span><br><span class="line">----&gt; 4 func(&#123;<span class="string">&#x27;a&#x27;</span>: 1, <span class="string">&#x27;b&#x27;</span> : 2&#125;)</span><br><span class="line"></span><br><span class="line">TypeError: func() takes 0 positional arguments but 1 was given</span><br></pre></td></tr></table></figure>

<p>可以发现报错了，而且报错信息的大意是需要 <code>0</code> 个参数，但现在有 <code>1</code> 个（我英语不太好，翻译可能不准确），可是入参明明是规定了个 <code>**kwargs</code> 并且这个 <code>**kwargs</code> 是个字典，而我传参也是个字典啊，换种方式再试试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;kwargs:&#x27;</span>,kwargs)</span><br><span class="line">    </span><br><span class="line">func(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">~\AppData\Local\Temp/ipykernel_14972/3682828006.py <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      2     <span class="built_in">print</span>(<span class="string">&#x27;kwargs:&#x27;</span>,kwargs)</span><br><span class="line">      3 </span><br><span class="line">----&gt; 4 func(1,2)</span><br><span class="line"></span><br><span class="line">TypeError: func() takes 0 positional arguments but 2 were given</span><br></pre></td></tr></table></figure>

<p>同样的错误，我们想想还有没有其他传参方式，好像是有的，那么再来试试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;kwargs:&#x27;</span>,kwargs)</span><br><span class="line">    </span><br><span class="line">func(a = <span class="number">1</span>,b = <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kwargs: &#123;<span class="string">&#x27;a&#x27;</span>: 1, <span class="string">&#x27;b&#x27;</span>: 2&#125;</span><br></pre></td></tr></table></figure>

<p>可以发现，这次成功了，也就是说它会把入参当变成字典</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>知道了这些，那么就来使用一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a,b,*args</span>):</span><br><span class="line">    total = a + b</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">        total += i</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line">val = func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(val)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure>

<p>这样就可以做到参数可变了，或者是这样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="built_in">print</span>(a + b)</span><br><span class="line">        </span><br><span class="line">kwargs = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">func(**kwargs)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>maven 配置 mybatis</title>
    <url>/2022/03/27/145724/14018c0d6b6c/</url>
    <content><![CDATA[<p>使用 <code>idea</code> 通过 <code>maven</code> 进行配置 <code>mybatis</code>  <span id="more"></span></p>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>首先打开 idea，然后创建空的 maven 项目</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202203270314433.png"></p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202203270315455.png"></p>
<h2 id="配置依赖"><a href="#配置依赖" class="headerlink" title="配置依赖"></a>配置依赖</h2><p>首先到 <span class="exturl" data-url="aHR0cHM6Ly9tdm5yZXBvc2l0b3J5LmNvbS8=">mvnrepository<i class="fa fa-external-link-alt"></i></span> 中搜索 <code>mysql</code> ，<code>mybatis</code> 和 <code>junit</code>，并将它们的相关配置代码复制到 pom.xml 中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>完成以后可以看见右上角出现了个小图标，点击一下，就会自动下载相关的依赖了</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202203271221574.png"></p>
<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>在配置 <code>mybatis</code> 前，应该先把数据库建好</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> SCHEMA `mybatis` <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin ;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `mybatis`.`test` (</span><br><span class="line">  `id` <span class="type">VARCHAR</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">INT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">18</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> INDEX `id_UNIQUE` (`id` <span class="keyword">ASC</span>) VISIBLE)</span><br><span class="line">ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line"><span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8</span><br><span class="line"><span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_bin;</span><br></pre></td></tr></table></figure>

<h2 id="配置-mybatis"><a href="#配置-mybatis" class="headerlink" title="配置 mybatis"></a>配置 mybatis</h2><p>在 <code>src/main/resources</code> 目录下新建一个 <code>.xml</code> 文件，名字任意，一般使用 <code>mybatis-config.xml</code> ，但我这里就使用 <code>db-config.xml</code> 作为名字了</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202203271234071.png"></p>
<p>首先写入 mybatis 的约束信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后写入数据库连接参数的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- mysql5 要改成 com.mysql.jdbc.Driver --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 只需要写这个，其余的是怕出现其他奇奇怪怪的错误 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- mysql 用户名 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- mysql 密码 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以将连接信息单独提取出来，新建 <code>db.properties</code> ，这个名字也是任意的，将链接信息填入，这里的变量名也是任意的，但最好要知道是干什么的</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysql</span></span><br><span class="line"><span class="attr">mysql.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">mysql.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8&amp;useSSL=false&amp;useUnicode=true&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">mysql.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">mysql.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<p>然后修改刚刚的 <code>db-config.xml</code> 文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入连接信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 将 value 改成对应的变量 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mysql.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mysql.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mysql.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mysql.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="mybatis-程序"><a href="#mybatis-程序" class="headerlink" title="mybatis 程序"></a>mybatis 程序</h2><p>写完配置就可以进行编写 mybatis 程序了</p>
<h3 id="创建-pojo-实体类"><a href="#创建-pojo-实体类" class="headerlink" title="创建 pojo 实体类"></a>创建 pojo 实体类</h3><p>在 <code>src/main/java</code> 下建 <code>pojo</code> 包，我这里叫 <code>exam.pojo</code> ，并创建实体类，实体类的内容要与数据库对应</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202203271310932.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exam.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPojo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestPojo</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestPojo</span><span class="params">(String id, String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;TestPojo&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&#x27;&quot;</span> + id + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建-mapper"><a href="#创建-mapper" class="headerlink" title="创建 mapper"></a>创建 mapper</h3><p>在 <code>src/main/java</code>下建 <code>mapper</code>包，并创建 <code>mapper</code> 接口</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202203271342859.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exam.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> exam.pojo.TestPojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TestMapper</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TestPojo <span class="title function_">selectOne</span><span class="params">(String id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>src/main/java</code> 或者 <code>src/main/resources</code> 下建 <code>mapper</code> 包，并创建 <code>mapper</code> 文件，我这里叫 <code>TestMapper.xml</code></p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202203271321290.png"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>导入约束</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;exam.mapper.TestMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectOne&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;exam.pojo.TestPojo&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from test</span><br><span class="line">        where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h3><p>在 <code>src/test/java</code> 下创建对应的测试类</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202203271453777.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exam.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> exam.pojo.TestPojo;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Reader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectOne</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 引入配置文件</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;db-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            reader = Resources.getResourceAsReader(resource);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建 SqlSessionFactoryBuilder</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">build</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(reader);</span><br><span class="line">        <span class="comment">// 创建 SqlSession</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> build.openSession();</span><br><span class="line">        <span class="type">TestMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(TestMapper.class);</span><br><span class="line">        <span class="type">TestPojo</span> <span class="variable">testPojo</span> <span class="operator">=</span> mapper.selectOne(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        System.out.println(testPojo);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不过在测试前先往数据库里加点数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `mybatis`.`test` (`id`, `name`, `age`) <span class="keyword">VALUES</span> (<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;22&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>然后到 <code>db-config.xml</code> 中注册 <code>TestMapper</code> </p>
<p>在 <code>&lt;environments&gt;&lt;/environments&gt;</code> 下方加入以下内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;exam/mapper/TestMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果运行时报错找不到配置文件，需要到 <code>pom.xml</code> 中加入以下内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="运行测试类"><a href="#运行测试类" class="headerlink" title="运行测试类"></a>运行测试类</h3><p>点击这个绿色小按钮即可运行</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202203271453027.png"></p>
<p>输出结果表示成功，如果不成功就要留意一下是不是配置文件写错了</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202203271454747.png"></p>
]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>maven</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建个人图床</title>
    <url>/2022/03/19/210217/ae3618c68f4d/</url>
    <content><![CDATA[<p>在写博客或写笔记时会需要用到很多图片，但是为了节省本地资源，可以使用网络图片，那么就需要用到图床了，可以使用 <code>PicGo</code> 来搭建属于自己的图床<span id="more"></span></p>
<h2 id="安装-PicGo"><a href="#安装-PicGo" class="headerlink" title="安装 PicGo"></a>安装 PicGo</h2><p>首先到 <span class="exturl" data-url="aHR0cHM6Ly9tb2x1bmVyZmlubi5jb20vUGljR28v">PicGo 官网<i class="fa fa-external-link-alt"></i></span> 进行下载，点击 <code>免费下载</code> 以后会跳转到 <code>GitHub</code> ，这时候点开 <code>Assets</code> 选择自己需要的版本进行下载安装即可</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202203192006170.png"></p>
<h2 id="配置-PicGo"><a href="#配置-PicGo" class="headerlink" title="配置 PicGo"></a>配置 PicGo</h2><p>安装完成以后就可以开始进行配置了</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202203192010149.png"></p>
<h3 id="仓库名"><a href="#仓库名" class="headerlink" title="仓库名"></a>仓库名</h3><p>首先可以看到必填项是 <code>仓库名</code> 、<code>分支名</code> 以及 <code>Token</code> ，当然我这里的前提是使用 <code>GitHub</code> 作为图床，其他的有其他配置方式，所以我就以 <code>GitHub 图床</code> 进行举例，首先我们要到 <code>GitHub</code> 上新建一个仓库，新建完就行不需要进行其他操作，然后在 <code>仓库名</code> 那一栏填上你的 <code>用户名/仓库名</code> </p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202203192018373.png"></p>
<h3 id="分支名"><a href="#分支名" class="headerlink" title="分支名"></a>分支名</h3><p>然后在第二栏填入你的分支名一般现在新建的 GitHub 仓库主分支都是 <code>main</code> ，所以可以直接填 <code>main</code> 或者根据需要，填你的分支名</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202203192021841.png"></p>
<h3 id="token"><a href="#token" class="headerlink" title="token"></a>token</h3><p>接下来就是最后一步了，填写 <code>token</code> ，这一步有点麻烦，但也不算很复杂，首先到浏览器登录你的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLw==">GitHub<i class="fa fa-external-link-alt"></i></span> 👉 点击你的头像 👉 点击 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NldHRpbmdzL3Byb2ZpbGU=">Settings<i class="fa fa-external-link-alt"></i></span> ，然后到最下面点击 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NldHRpbmdzL2FwcHM=">Developer settings<i class="fa fa-external-link-alt"></i></span> </p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202203192047099.png"></p>
<p>👉 点击 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NldHRpbmdzL3Rva2Vucw==">Personal access tokens<i class="fa fa-external-link-alt"></i></span> 👉 点击 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NldHRpbmdzL3Rva2Vucy9uZXc=">Generate new token<i class="fa fa-external-link-alt"></i></span> </p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202203192046987.png"></p>
<p>然后输入你这个填好信息勾选上对应的选项，然后到最下面点击 Generate token 即可生成</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202203192050312.png"></p>
<p>然后点击复制并粘贴到对应的位置上即可</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202203192053087.png"></p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202203192054984.png"></p>
<h2 id="加速"><a href="#加速" class="headerlink" title="加速"></a>加速</h2><p>上传之后的图片访问起来可能会有点慢，但是可以通过 <code>CDN</code> 进行加速，这里选择的 CDN 是 <span class="exturl" data-url="aHR0cHM6Ly93d3cuanNkZWxpdnIuY29tLw==">jsDeliver<i class="fa fa-external-link-alt"></i></span> ，只需要在设定自定义域名里填上 CDN 地址即可</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//g</span>core.jsdelivr.net<span class="regexp">/gh/</span>用户名/仓库名@分支名</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202203192058698.png"></p>
]]></content>
      <categories>
        <category>分享</category>
      </categories>
      <tags>
        <tag>PicGo</tag>
      </tags>
  </entry>
  <entry>
    <title>【Harmonyos】22-04-14 在 Java 中使用布局的属性</title>
    <url>/2022/04/14/211120/aff37c54d9fe/</url>
    <content><![CDATA[<p>今天在写鸿蒙应用时遇到的一个问题，经过我的长时间认真思考，最终在华为的开发者论坛上找到了解决方案🤣🤣<span id="more"></span></p>
<h2 id="事情的经过"><a href="#事情的经过" class="headerlink" title="事情的经过"></a>事情的经过</h2><p>在写鸿蒙应用时，因为要用到很多重重复复的布局，所以为了方便打算使用 <code>Java</code> 来代替 <code>XML</code> ，但是发现一个问题，居然有一些属性在 <code>Java</code> 中没有找到</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204142059120.png"></p>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>于是我就在华为开发者论坛里找到了一篇名为 <a href="https://developer.huawei.com/consumer/cn/forum/topic/0201624372344830169?fid=0101587866109860105&pid=0303853338792740130"><strong>如何在代码中给DirectionalLayout配置权重weight</strong></a> 的帖子，然后我尝试了一下，发现代码不报错，但是运行会报错</p>
<ul>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DirectionalLayout.<span class="type">LayoutConfig</span> <span class="variable">config</span> <span class="operator">=</span> (DirectionalLayout.LayoutConfig) text.getLayoutConfig();</span><br><span class="line">config.weight = <span class="number">1</span>;</span><br><span class="line">text.setLayoutConfig(config);</span><br></pre></td></tr></table></figure>

<ul>
<li>错误信息</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[phone][Engine Log] SEVERE java.lang.ClassCastException: class ohos.agp.components.ComponentContainer$LayoutConfig cannot be cast to class ohos.agp.components.DirectionalLayout$LayoutConfig (ohos.agp.components.ComponentContainer$LayoutConfig and ohos.agp.components.DirectionalLayout$LayoutConfig are in unnamed module of loader &#x27;app&#x27;)</span><br></pre></td></tr></table></figure>

<p>于是我发布了一篇求助帖 <a href="https://developer.huawei.com/consumer/cn/forum/topic/0203853228224320031?fid=0101587866109860105"><strong>求助：怎么通过 Java 代码给组件设置 weight</strong></a> </p>
<p>发现原来是我代码的顺序错了</p>
<blockquote>
<p><strong>参考自以下内容</strong></p>
<p>华为开发者论坛 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuaHVhd2VpLmNvbS9jb25zdW1lci9jbi9mb3J1bS90b3BpYy8wMjAxNjI0MzcyMzQ0ODMwMTY5P2ZpZD0wMTAxNTg3ODY2MTA5ODYwMTA1JnBpZD0wMzAzODUzMzM4NzkyNzQwMTMw">https://developer.huawei.com/consumer/cn/forum/topic/0201624372344830169?fid=0101587866109860105&amp;pid=0303853338792740130<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>harmonyos</tag>
      </tags>
  </entry>
  <entry>
    <title>画画练习 22-03-29</title>
    <url>/2022/03/29/214823/02b33d73a2c8/</url>
    <content><![CDATA[<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204052015422.png"></p>
]]></content>
      <categories>
        <category>绘画</category>
      </categories>
      <tags>
        <tag>线稿</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法-单链表</title>
    <url>/2022/04/17/184139/9b23354010ea/</url>
    <content><![CDATA[<p>链表是线性结构中的一种，采用的数据存储方式是链式存储，链式存储是一种逻辑结构，不像数组一样使用连续的存储空间，而是通过结构体和指针将每个元素连接在一起，所以是自适应内存大小的，理论上来说无论多大的数据都能保存下来，前提是不超过机器的上限<span id="more"></span></p>
<h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p>单链表的结构就像下图（本文图片均由本灵魂画手使用 OneNote 作画）一样，利用结构体，存储数据的同时额外开辟一份空间用来保存指针，而这个指针则是用于指向下一个节点</p>
<p>存储方式大概就像下图一样，通过指针将数据像烤串一样串起来</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204171526278.png"></p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>结构体代码如下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 节点</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  ElemType val;  <span class="comment">// 节点值</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">Node</span>* next;  <span class="comment">// 下一个节点</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>像任何数据类型一样，链表也可以初始化，但首先要创建一个初始化方法，首先要为链表开辟内存，并判断是否创建失败，如果失败就返回 <code>NULL</code> </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化链表</span></span><br><span class="line"><span class="function">Node* <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Node* head = (Node*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node));  <span class="comment">// 创建头节点</span></span><br><span class="line">  <span class="comment">// 判断头节点是否创建成功</span></span><br><span class="line">  <span class="keyword">if</span>(head == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;malloc failure\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Init success\n&quot;</span>);</span><br><span class="line">  <span class="comment">// 头节点的下一个节点为NULL</span></span><br><span class="line">  head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h3><p>初始化完成以后就可以得到一个空的链表了大概长这样</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204171524843.png"></p>
<h4 id="头部插入"><a href="#头部插入" class="headerlink" title="头部插入"></a>头部插入</h4><p>头部插入法，顾名思义，就是从头部插入元素</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204171509447.png"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 头部插入节点</span></span><br><span class="line"><span class="function">Node* <span class="title">InsertHead</span><span class="params">(Node* head, ElemType val)</span></span>&#123;</span><br><span class="line">  <span class="comment">// 创建新节点</span></span><br><span class="line">  Node* p = (Node*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node));</span><br><span class="line">  <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;malloc failure\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 设置新节点的值</span></span><br><span class="line">  p-&gt;val = val;</span><br><span class="line">  <span class="comment">// 新节点的下一个指向头节点的下一个节点</span></span><br><span class="line">  p-&gt;next = head-&gt;next;</span><br><span class="line">  <span class="comment">// 新节点成为头节点的下一个节点</span></span><br><span class="line">  head-&gt;next = p;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;InsertHead success\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="尾部插入"><a href="#尾部插入" class="headerlink" title="尾部插入"></a>尾部插入</h4><p>尾部插入跟头部插入一样，只不过是将新元素放到表尾</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204171528528.png"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 尾部插入节点</span></span><br><span class="line"><span class="function">Node* <span class="title">InsertTail</span><span class="params">(Node* head, ElemType val)</span></span>&#123;</span><br><span class="line">  <span class="comment">// 创建新节点</span></span><br><span class="line">  Node* p = (Node*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node));</span><br><span class="line">  <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;malloc failure\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">  &#125;</span><br><span class="line">  p-&gt;val = val;</span><br><span class="line">  <span class="comment">// 新节点的下一个指向NULL</span></span><br><span class="line">  p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="comment">// 判断头节点是否为空</span></span><br><span class="line">  <span class="keyword">if</span>(head-&gt;next == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="comment">// 头节点的下一个节点为新节点</span></span><br><span class="line">    head-&gt;next = p;</span><br><span class="line">  &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 循环遍历链表</span></span><br><span class="line">    Node* q = head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(q-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">      <span class="comment">// 下一个节点不为空，则继续循环</span></span><br><span class="line">      q = q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 尾节点的下一个节点为新节点</span></span><br><span class="line">    q-&gt;next = p;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;InsertTail success\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="中间插入"><a href="#中间插入" class="headerlink" title="中间插入"></a>中间插入</h4><p>找出要插入的位置，然后将指针指向新元素，并把新元素的指针指向旧元素</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204171737391.png"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 中间插入节点 </span></span><br><span class="line"><span class="function">Node * <span class="title">InsertMiddle</span> <span class="params">(Node * head, ElemType val, <span class="type">int</span> position)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 查找插入位置</span></span><br><span class="line">  Node * temp = head;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; position; i++) &#123;</span><br><span class="line">    temp = temp-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (temp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="comment">// 插入位置不存在</span></span><br><span class="line">      <span class="built_in">printf</span> (<span class="string">&quot;insert position error\n&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 创建新节点</span></span><br><span class="line">  Node * p = (Node *) <span class="built_in">malloc</span> (<span class="built_in">sizeof</span> (Node));</span><br><span class="line">  <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;malloc failure\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">  &#125;</span><br><span class="line">  p-&gt;val = val;</span><br><span class="line">  <span class="comment">// 新节点的下一个指向temp的下一个节点</span></span><br><span class="line">  p-&gt;next = temp-&gt;next;</span><br><span class="line">  <span class="comment">// temp的下一个节点指向新节点</span></span><br><span class="line">  temp-&gt;next = p;</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;InsertMiddle success\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p>跟<a href="#%E6%8F%92%E5%85%A5%E5%85%83%E7%B4%A0">插入元素</a>一样，进行反向操作即可</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204171748268.png"></p>
<h4 id="头部删除"><a href="#头部删除" class="headerlink" title="头部删除"></a>头部删除</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 头部删除节点</span></span><br><span class="line"><span class="function">Node * <span class="title">DeleteHead</span> <span class="params">(Node * head)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 判断头节点是否为空</span></span><br><span class="line">  <span class="keyword">if</span> (head-&gt;next == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;head is empty\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 删除头节点</span></span><br><span class="line">  Node * p = head-&gt;next;</span><br><span class="line">  head-&gt;next = p-&gt;next;</span><br><span class="line">  <span class="built_in">free</span> (p); <span class="comment">// 释放内存</span></span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;DeleteHead success\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="尾部删除"><a href="#尾部删除" class="headerlink" title="尾部删除"></a>尾部删除</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 尾部删除节点</span></span><br><span class="line"><span class="function">Node * <span class="title">DeleteTail</span> <span class="params">(Node * head)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 判断头节点是否为空</span></span><br><span class="line">  <span class="keyword">if</span> (head-&gt;next == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;head is empty\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 循环遍历链表</span></span><br><span class="line">  Node * p = head-&gt;next, * q; <span class="comment">// p代表当前节点，q代表前驱节点</span></span><br><span class="line">  <span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    q = p; <span class="comment">// p成为后继节点的前驱节点</span></span><br><span class="line">    p = p-&gt;next; <span class="comment">// p指向后继节点</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将q的后继指向NULL</span></span><br><span class="line">  q-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="built_in">free</span> (p); <span class="comment">// 释放内存</span></span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;DeleteTail success\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="中间删除"><a href="#中间删除" class="headerlink" title="中间删除"></a>中间删除</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 中间删除节点</span></span><br><span class="line"><span class="function">Node * <span class="title">DeleteMiddle</span> <span class="params">(Node * head, <span class="type">int</span> position)</span> </span>&#123;</span><br><span class="line">  Node * p = head, * q; <span class="comment">// p代表当前节点，q代表前驱节点</span></span><br><span class="line">  <span class="comment">// 查找删除位置</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; position; i++) &#123;</span><br><span class="line">    q = p; <span class="comment">// p成为后继节点的前驱节点</span></span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="comment">// 删除位置不存在</span></span><br><span class="line">      <span class="built_in">printf</span> (<span class="string">&quot;delete position error\n&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  q-&gt;next = p-&gt;next; <span class="comment">// 前驱节点的后继指向p的后继</span></span><br><span class="line">  <span class="built_in">free</span> (p); <span class="comment">// 释放内存</span></span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;DeleteMiddle success\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h3><p>修改元素跟<a href="#%E4%B8%AD%E9%97%B4%E6%8F%92%E5%85%A5">中间插入</a>差不多，只是不用新增节点</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改节点的值</span></span><br><span class="line"><span class="function">Node* <span class="title">Modify</span> <span class="params">(Node * head, ElemType val, <span class="type">int</span> position)</span> </span>&#123;</span><br><span class="line">  Node * p = head;</span><br><span class="line">  <span class="comment">// 查找修改位置</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; position; i++) &#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="comment">// 修改位置不存在</span></span><br><span class="line">      <span class="built_in">printf</span> (<span class="string">&quot;modify position error\n&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  p-&gt;val = val;</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;Modify success\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="遍历链表"><a href="#遍历链表" class="headerlink" title="遍历链表"></a>遍历链表</h3><p>为了方便修改，我并没有明确元素值的数据类型，所以输出语句就使用 <code>C++</code> ，这样就可以输出任意类型了，<code>C</code> 我不知道怎么做到</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Display</span> <span class="params">(Node * h)</span> </span>&#123;</span><br><span class="line">  Node * p;</span><br><span class="line">  p = h-&gt;next;</span><br><span class="line">  <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    std::cout &lt;&lt; p-&gt;val;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="销毁链表"><a href="#销毁链表" class="headerlink" title="销毁链表"></a>销毁链表</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 销毁链表</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Destroy</span> <span class="params">(Node * head)</span> </span>&#123;</span><br><span class="line">  Node * p;</span><br><span class="line">  <span class="comment">// 释放链表中的节点</span></span><br><span class="line">  <span class="keyword">while</span> (head-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    p = head-&gt;next;</span><br><span class="line">    head-&gt;next = p-&gt;next;</span><br><span class="line">    <span class="built_in">free</span> (p);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;Destroy success\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><p>写完以上代码后，就可以编写 <code>main()</code> 方法对他们进行测试了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">(<span class="type">int</span> argc, <span class="type">char</span> * argv [])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化链表</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">Node</span> * head = <span class="built_in">Init</span> ();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 头部插入节点</span></span><br><span class="line">  <span class="built_in">InsertHead</span> (head, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">  <span class="built_in">InsertHead</span> (head, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">  <span class="built_in">Display</span> (head);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 尾部插入节点</span></span><br><span class="line">  <span class="built_in">InsertTail</span> (head, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">  <span class="built_in">InsertTail</span> (head, <span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">  <span class="built_in">Display</span> (head);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 中间插入节点</span></span><br><span class="line">  <span class="built_in">InsertMiddle</span> (head, <span class="string">&#x27;e&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="built_in">Display</span> (head);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 头部删除节点</span></span><br><span class="line">  <span class="built_in">DeleteHead</span> (head);</span><br><span class="line">  <span class="built_in">Display</span> (head);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 尾部删除节点</span></span><br><span class="line">  <span class="built_in">DeleteTail</span> (head);</span><br><span class="line">  <span class="built_in">Display</span> (head);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 中间删除节点</span></span><br><span class="line">  <span class="built_in">DeleteMiddle</span> (head, <span class="number">2</span>);</span><br><span class="line">  <span class="built_in">Display</span> (head);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 修改节点</span></span><br><span class="line">  <span class="built_in">Modify</span> (head, <span class="string">&#x27;f&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="built_in">Display</span> (head);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 销毁链表</span></span><br><span class="line">  <span class="built_in">Destroy</span> (head);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204171929861.png"></p>
<blockquote>
<p>仓库地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2plc3NwaWcvZGF0YS1zdHJ1Y3R1cmVzLWFuZC1hbGdvcml0aG1zL3RyZWUvbWFpbi9saW5rZWQtbGlzdA==">https://github.com/jesspig/data-structures-and-algorithms/tree/main/linked-list<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>数据结构</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法-基础</title>
    <url>/2022/04/15/212403/93223b13e229/</url>
    <content><![CDATA[<p>所以作为一个程序员，数据结构和算法都是必备的知识</p>
<span id="more"></span>

<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><blockquote>
<p>程序 &#x3D; 数据结构 + 算法</p>
</blockquote>
<h3 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a><strong>线性结构</strong></h3><p>数据之间存在一对一的关系，像排队一样，同时只有零个或一个前驱和后继</p>
<blockquote>
<ol>
<li>集合中必存在唯一的一个”第一个元素”</li>
<li>集合中必存在唯一的一个”最后的元素”</li>
<li>除最后元素之外，其它数据元素均有唯一的”后继”</li>
<li>除第一元素之外，其它数据元素均有唯一的”前驱”</li>
</ol>
</blockquote>
<p>常用的线性结构有：线性表，栈，队列，双队列，串(一维数组)</p>
<h3 id="非线性结构"><a href="#非线性结构" class="headerlink" title="非线性结构"></a>非线性结构</h3><p>常见的非线性结构有：二维数组，多维数组，广义表，树(二叉树等)，图</p>
<h4 id="树形结构"><a href="#树形结构" class="headerlink" title="树形结构"></a><strong>树形结构</strong></h4><p>数据之间存在一对多的关系，就像一棵树一样，一个树干上上会有零条或多条树枝，树枝上又有很多的树叶</p>
<blockquote>
<ol>
<li>结点：表示树中的元素</li>
<li>结点的度：结点的边数</li>
<li>树的度：树中各结点度的最大值</li>
<li>叶子结点：度为0的结点</li>
<li>分支结点：度不为0的结点</li>
<li>孩子：结点子树的根</li>
<li>双亲：结点的上层结点叫该结点的双亲</li>
<li>祖先：从根到该结点所经过的分支上的所有结点</li>
<li>子孙：以某个结点为根的子树中的任一结点</li>
<li>兄弟：同一双亲的孩子</li>
<li>结点的层次：从根结点到树中某个结点所经过的路径上的分支数称为该结点的层次</li>
<li>堂兄弟：同一层不同双亲的结点</li>
<li>树的深度：树中结点的最大层次数 </li>
<li>无序树：树中任意一个结点的各孩子结点之间的次序构成无关紧要的树 </li>
<li>有序树：树中任意一个结点的各孩子结点有严格排列次序的树</li>
<li>森林：树的集合，一棵由根结点和 n 个子树构成的树，把树的根结点删除后，树就变成了包含 n 棵树的森林</li>
</ol>
</blockquote>
<h4 id="图形结构"><a href="#图形结构" class="headerlink" title="图形结构"></a><strong>图形结构</strong></h4><p>数据之间存在多对多的关系，就像地图一样，每个地点之间都由一条或多条路相连</p>
<blockquote>
<ol>
<li>边：两个节点的连接称之为边</li>
<li>顶点：节点在图形结构中也被称为顶点</li>
<li>路径：一个顶点到另一个顶点的经过的的线路称为路径</li>
</ol>
</blockquote>
<p><strong>图的类型</strong></p>
<blockquote>
<p><strong>无向图</strong>：顶点A与顶点B之间的边是无方向的，可以从A到B，也可以从B到A<br><strong>有向图</strong>：顶点A与顶点B之间的边是有方向的，可以从A到B，但不可以从B到A<br><strong>带权图</strong>：顶点A与顶点B之间的边是带有属性的，如A到B的 距离。</p>
</blockquote>
<h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a><strong>时间复杂度</strong></h3><p>时间复杂度是指程序运行的时间记作 $T(n)$，通常根据不同问题的规模 <code>n</code> ，以及执行次数 $f(n)$会得到一个复杂度 $O(f(n))$ ，记作 $T(n) &#x3D; O(f(n))$</p>
<blockquote>
<ol>
<li>常数时间：记作 $O(1)$ ，执行次数为常数次</li>
<li>线性时间：记作 $O(n)$ ，执行次数与数据量成线性关系</li>
<li>对数时间：记作 $O(log n)$ ，执行次数随着数据增大而减小</li>
<li>线性对数时间：记作 $O(n log n)$ ， 具有线性时间和对数时间的性质</li>
<li>指数时间：记作 $O(n^n)$</li>
</ol>
</blockquote>
<h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a><strong>空间复杂度</strong></h3><p>空间复杂度是指程序执行时消耗的空间记作 $ S(n) $ ，通常根据输入本身占用的空间 <code>n</code> ，以及执行时临时占用的空间 $f(n)$会得到一个复杂度 $O(f(n))$ ，记作 $S(n) &#x3D; O(f(n))$</p>
<h3 id="度量方法"><a href="#度量方法" class="headerlink" title="度量方法"></a><strong>度量方法</strong></h3><blockquote>
<p><strong>常用基本公式</strong></p>
<p>$O(a) &#x3D; O(1)$ 其中 <code>a</code> 为常数<br>$O(an) &#x3D; O(n)$ 其中 <code>a</code> 为常数<br>$O(an^2 + bn + c) &#x3D; O(n^2)$ 其中 <code>a, b, c</code> 均为常数，结果只保留最高次项</p>
</blockquote>
<p>以下是我用根据这些复杂度画的图</p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204151818728.png"></p>
<blockquote>
<p>仓库地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2plc3NwaWcvZGF0YS1zdHJ1Y3R1cmVzLWFuZC1hbGdvcml0aG1zL3RyZWUvbWFpbi9iYXNpYw==">https://github.com/jesspig/data-structures-and-algorithms/tree/main/basic<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>画画练习 22-04-25</title>
    <url>/2022/04/25/125909/80e46dbcc039/</url>
    <content><![CDATA[<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204251302793.png"></p>
<span id="more"></span>

<h2 id="线稿提取练习"><a href="#线稿提取练习" class="headerlink" title="线稿提取练习"></a>线稿提取练习</h2><p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204251303010.png"></p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204251303396.png"></p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204251304095.png"></p>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204251304984.png"></p>
]]></content>
      <categories>
        <category>绘画</category>
      </categories>
      <tags>
        <tag>线稿</tag>
      </tags>
  </entry>
  <entry>
    <title>画画练习 22-04-26</title>
    <url>/2022/04/26/010654/b18be603451b/</url>
    <content><![CDATA[<p><img data-src="https://fastly.jsdelivr.net/gh/jesspig/PicBed@main/img/202204260111712.png"></p>
]]></content>
      <categories>
        <category>绘画</category>
      </categories>
      <tags>
        <tag>植物</tag>
        <tag>速写</tag>
      </tags>
  </entry>
  <entry>
    <title>高数-函数</title>
    <url>/2022/05/04/220836/dc96c6435ae1/</url>
    <content><![CDATA[<p>函数关系，是指  $ \forall x \in \mathbb{D} $  ，存在对应法则 $f$ ，使得存在唯一的 $y$ 值与之对应，就是函数关系</p>
<blockquote>
<p>注意：</p>
<ol>
<li>一个 $x$ 只能对应一个 $y$ </li>
<li>函数关系可以多对一，即多个 $x$ 对应一个 $y$ ；但不可以一对多，即一个 $x$ 对应多个 $y$ </li>
<li>图像法判断函数：垂直于 $x$ 轴画直线，只有一个交点，那么它就是一个函数图像</li>
</ol>
</blockquote>
<span id="more"></span>
<ul>
<li><strong>象限</strong></li>
</ul>
<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/blog/202205031729091.png"></p>
<h2 id="正比例函数"><a href="#正比例函数" class="headerlink" title="正比例函数"></a>正比例函数</h2><p>$$<br>y&#x3D;kx,(k \neq 0)<br>$$</p>
<blockquote>
<ol>
<li>恒过原点 $(0,0)$ </li>
<li>$\left | k \right | $ 越大，倾斜度越陡</li>
</ol>
</blockquote>
<h2 id="一次函数"><a href="#一次函数" class="headerlink" title="一次函数"></a>一次函数</h2><p>$$<br>y&#x3D;kx+b, (k \neq 0)<br>$$</p>
<blockquote>
<p>$b$ ： 代表与 $y$ 轴的交点，控制函数图像的位置：上加下减，左加右减</p>
<p>$k$ ：代表函数的斜率，控制函数的倾斜程度</p>
</blockquote>
<h3 id="求表达式"><a href="#求表达式" class="headerlink" title="求表达式"></a>求表达式</h3><blockquote>
<p><strong>点斜式</strong> ：过交点 $\left(x_{0}, y_{0}\right)$ ，求 $k$ </p>
</blockquote>
<p>$$<br> \begin{array}{c}<br> k&#x3D;\frac{y-y_{0}}{x-x_{0}} \\<br> y-y_{0}&#x3D;k\left(x-x_{0}\right)<br> \end{array}<br>$$</p>
<blockquote>
<p><strong>两点式</strong> ：过 $A\left(x_{1}, y_{1}\right)$ 和  $ B\left(x_{2}, y_{2}\right) $ 两点的直线</p>
</blockquote>
<p>$$<br>\frac{y-y_{1}}{x-x_{1}}&#x3D;\frac{y_{2}-y_{1}}{x_{2}-x_{1}}<br>$$</p>
<blockquote>
<p><strong>斜截式</strong> ：已知交点和斜率，求直线</p>
</blockquote>
<p>$$<br>y&#x3D;kx+b<br>$$</p>
<h2 id="二次函数"><a href="#二次函数" class="headerlink" title="二次函数"></a>二次函数</h2><p>$$<br>y&#x3D;a x^{2} + b x + c, (a \neq 0)<br>$$</p>
<blockquote>
<ol>
<li>二次是指最高次数为 $2$ </li>
<li>$a$ : 代表函数的开口，$\left | a \right | $ 越大开口越小， $\left | a \right | $ 越小开口越大，当 $a$ 为负数时，开口向下</li>
</ol>
</blockquote>
<h3 id="求表达式-1"><a href="#求表达式-1" class="headerlink" title="求表达式"></a>求表达式</h3><blockquote>
<p><strong>一般式</strong> ：</p>
</blockquote>
<p>$$<br>y&#x3D;a x^{2} + b x + c<br>$$</p>
<blockquote>
<p><strong>顶点式</strong> ：顶点等于 $(-h,n)$</p>
</blockquote>
<p>$$<br>y&#x3D;a(x+h)^{2}+n<br>$$</p>
<blockquote>
<p><strong>一般式化顶点式</strong> ： $y&#x3D;a x^{2} + b x + c$ 化顶点式</p>
<blockquote>
<p><strong>回顾</strong> ：<em>完全平方式</em> ：$(a + b)^{2} &#x3D; a^{2} + 2 a b + b^{2}$ </p>
</blockquote>
</blockquote>
<p>$$<br>\begin{aligned}<br>y &amp;&#x3D;a\left(x^{2}+2 \frac{b}{2 a} x+\frac{b^{2}}{4 a^{2}}-\frac{b^{2}}{4 a^{2}}\right)+c \\<br>&amp;&#x3D;\left(x+\frac{b}{2 a}\right)^{2}-\frac{b^{2}}{4 a}+c \\<br>&amp;&#x3D;a\left(x+\frac{b}{2 a}\right)^{2}+\frac{4 a c-b^{2}}{4 a}<br>\end{aligned}<br>$$</p>
<ul>
<li><strong>顶点坐标</strong> ：</li>
</ul>
<p>$$<br>\left(-\frac{b}{2 a}, \frac{4 a c-b^{2}}{4 a}\right)<br>$$</p>
<ul>
<li><strong>对称轴</strong> ：左同右异，即 $a$ 和 $b$ 的符号相同，则对称轴在 $y$ 轴左边，反之亦然</li>
</ul>
<p>$$<br>x &#x3D; - \frac{b}{2 a}<br>$$</p>
<ul>
<li><strong>与 $x$ 轴交点</strong> ：$(0,c)$</li>
</ul>
<blockquote>
<p><strong>交点式</strong> ： </p>
</blockquote>
<p>$$<br>y &#x3D; a \left(x - x_{1}\right)\left(x - x_{2}\right)<br>$$</p>
<blockquote>
<p><em><strong>Tips</strong></em>：<strong>直接代入</strong></p>
</blockquote>
<p>将三点代入 $a x^{2} + b x + c &#x3D; 0$ ，交点代入到 $a$ 和 $b$ ，第三点代入到 $c$ </p>
<p>如：交点为 $1$ 和 $3$ ，过点 $(0,-3)$ ，代入到  $a x^{2} + b x + c &#x3D; 0$  </p>
<p>$$<br>\begin{aligned}<br>&amp; 1 x^{2} + 3 x^{2} + c &#x3D; 0 \\<br>&amp; \because c &#x3D; y , y &#x3D; -3\\<br>&amp; \therefore c &#x3D; -3 \\<br>&amp; \therefore y &#x3D; x^{2} + 3 x^{2} - 3<br>\end{aligned}<br>$$</p>
<h3 id="单调性"><a href="#单调性" class="headerlink" title="单调性"></a>单调性</h3><blockquote>
<ol>
<li>单调减：随着 $x$ 增大而减小</li>
<li>单调增：随着 $x$ 减小而增大</li>
</ol>
</blockquote>
<h3 id="与-x-轴的交点个数"><a href="#与-x-轴的交点个数" class="headerlink" title="与 $x$ 轴的交点个数"></a>与 $x$ 轴的交点个数</h3><blockquote>
<p>$y&#x3D;a x^{2} + b x + c$ 有几个根？</p>
</blockquote>
<p>如果 $\Delta &#x3D;b^{2}-4 a c &gt; 0$ ，则有 $2$ 个交点</p>
<p>如果 $\Delta &#x3D;b^{2}-4 a c &#x3D; 0$ ，则有 $1$ 个交点</p>
<p>如果 $\Delta &#x3D;b^{2}-4 a c &lt; 0$ ，则有 $0$ 个交点</p>
]]></content>
      <categories>
        <category>高数</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>高数-集合</title>
    <url>/2022/03/27/225942/6a4bab6fcd04/</url>
    <content><![CDATA[<p>集合是指一组确定的对象或事物，如   $ \lbrace1,2,3 \rbrace $ ，班上的学生等都属于集合<span id="more"></span></p>
<h2 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h2><p>集合里的内容都叫元素，如 $1$ 是 $\lbrace 1,2,3 \rbrace$ 中的元素</p>
<p>如果某个元素 <strong>在</strong> 一个集合里，那么表示这个元素 <strong>属于</strong> 这个集合，用 $\in$ 来表示<br>$$<br>1 \in \lbrace{1,2,3}\rbrace<br>$$<br>如果某个元素 <strong>不在</strong> 一个集合里，那么表示这个元素 <strong>不属于</strong> 这个集合，用 $\notin$ 来表示<br>$$<br>4 \notin \lbrace { 1,2,3 }\rbrace<br>$$</p>
<h2 id="数集"><a href="#数集" class="headerlink" title="数集"></a>数集</h2><p>有限个元素叫 <strong>有限集</strong> ，无限个元素叫 <strong>无限集</strong> </p>
<ul>
<li>$\mathbb{R} $ ：全体实数<ul>
<li>$\mathbb{R} ^{+}$ ：全体正实数</li>
<li>\mathbb{R} ^{-}$ ：全体负实数</li>
<li>$\mathbb{R} ^{*}$ ：$0$ 以外的全体实数</li>
</ul>
</li>
<li>$\mathbb{Q} $ ：全体有理数</li>
<li>$\mathbb{N} $ ：全体自然数</li>
<li>$\mathbb{Z} $ ： 全体整数</li>
</ul>
<h2 id="表示方法"><a href="#表示方法" class="headerlink" title="表示方法"></a>表示方法</h2><p>一些常见的集合表示形式</p>
<h3 id="列举法"><a href="#列举法" class="headerlink" title="列举法"></a>列举法</h3><p>将所有元素一个个的列出来，就是列举法<br>$$<br>\lbrace {1, 2, 3, 4, 5, 6, 7, 8, 9} \rbrace<br>$$</p>
<h3 id="描述法"><a href="#描述法" class="headerlink" title="描述法"></a>描述法</h3><p>描述集合的特征<br>$$<br>\lbrace{x \mid x \leqslant 10,x \in \mathbb{N}  }\rbrace<br>$$</p>
<h2 id="子集"><a href="#子集" class="headerlink" title="子集"></a>子集</h2><p>元素和集合是属于 $ \in $ 或者不属于 $ \notin $ 的关系，比如 $a \in{ A }$ </p>
<p>而集合跟集合间的关系是包含，比如 $A \subset B $ 或 $A \supset B$ </p>
<p>*<strong>注意</strong>：当集合作为元素时用的是 $ \in $ 而不是 $\subset$ </p>
<p>$$<br>\begin{array}{}<br>\lbrace{1}\rbrace \subset \lbrace{\lbrace{1}\rbrace, \lbrace{2}\rbrace,\lbrace{3}\rbrace}\rbrace  (✖️) \\<br>\lbrace{1}\rbrace \in \lbrace{\lbrace{1}\rbrace,\lbrace{2}\rbrace,\lbrace{3}\rbrace}\rbrace   (✔️)<br>\end{array} \<br>$$<br>没有任何元素的集合叫空集 $\emptyset$ ，空集是任何集合的子集 $ \emptyset \subset A$  </p>
<h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><p>$A \cup B$ 并集运算，将两个集合合并<br>$$<br>\lbrace{1,2,3}\rbrace \cup \lbrace{4,5}\rbrace &#x3D; \lbrace{1,2,3,4,5}\rbrace<br>$$</p>
<p>$A \cap B$ 交集运算，将两个集合的公共部分<br>$$<br>\lbrace{1,2,3}\rbrace \cup \lbrace{2,3,4}\rbrace &#x3D; \lbrace{2,3}\rbrace<br>$$</p>
<p>$A - B$ 差集运算，$A$ 减去与 $B$ 两个集合的公共部分<br>$$<br>\lbrace{1,2,3}\rbrace - \lbrace{2,3,4}\rbrace &#x3D; \lbrace{1}\rbrace<br>$$<br>$\mathbb{U} $ 全集，全部</p>
<p>$\complement_{\mathbb{U}} A$ ，补集，$\mathbb{U}$ 挖去 $A$ 的剩余部分叫补给</p>
<h2 id="运算律"><a href="#运算律" class="headerlink" title="运算律"></a>运算律</h2><h3 id="交换律"><a href="#交换律" class="headerlink" title="交换律"></a>交换律</h3><p>$$<br>\begin{array}{}<br>A \cup B &#x3D; B \cup A \\<br>A \cap B &#x3D; B \cap A<br>\end{array} \<br>$$</p>
<h3 id="结合律"><a href="#结合律" class="headerlink" title="结合律"></a>结合律</h3><p>$$<br>\begin{array}{l}<br>(A \cup B) \cup C&#x3D;A \cup(B \cup C) \\<br>(A \cap B) \cap C&#x3D;A \cap(B \cap C)<br>\end{array}<br>$$</p>
<h3 id="分配律"><a href="#分配律" class="headerlink" title="分配律"></a>分配律</h3><p>$$<br>\begin{array}{l}<br>A \cap(B \cup C)&#x3D;(A \cap B) \cup(A \cap C) \\<br>A \cup(B \cap C)&#x3D;(A \cup B) \cap(A \cup C)<br>\end{array}<br>$$</p>
<h3 id="对偶律"><a href="#对偶律" class="headerlink" title="对偶律"></a>对偶律</h3><p>$$<br>\begin{aligned}<br>\complement_{\mathrm{U}}(A \cup B) &amp;&#x3D;\complement_{\mathrm{U}} A \cap \complement_{\mathrm{U}} B \\<br>\complement_{\mathrm{U}}(A \cap B) &amp;&#x3D;\complement_{\mathrm{U}} A \cup \complement_{\mathrm{U}} B<br>\end{aligned}<br>$$</p>
<h3 id="直积"><a href="#直积" class="headerlink" title="直积"></a>直积</h3><p>$$<br>A \times B&#x3D;\lbrace(a, b) \mid a \in A, b \in B \rbrace<br>$$</p>
<h2 id="区间"><a href="#区间" class="headerlink" title="区间"></a>区间</h2><table>
<thead>
<tr>
<th>区间</th>
<th>取值</th>
</tr>
</thead>
<tbody><tr>
<td>开区间</td>
<td>$(a, b)$</td>
</tr>
<tr>
<td>闭区间</td>
<td>$[a, b]$</td>
</tr>
<tr>
<td>半开半闭区间</td>
<td>$ (a, b] \quad [a, b) $</td>
</tr>
<tr>
<td>有限区间</td>
<td>有限长</td>
</tr>
<tr>
<td>无限区间</td>
<td>无限长</td>
</tr>
</tbody></table>
<h2 id="邻域"><a href="#邻域" class="headerlink" title="邻域"></a>邻域</h2><p>$a$ 表示中心 $\delta$ 表示半径</p>
<p><strong>邻域</strong><br>$$<br>U(a, \delta)&#x3D;{x \mid a-\delta&lt;x&lt;a+\delta}<br>$$<br><strong>去心邻域</strong><br>$$<br>\stackrel{\circ}{U}(a, \delta) &#x3D; {x \mid 0&lt;  \lvert{x-a}\rvert &lt;\delta}<br>$$</p>
]]></content>
      <categories>
        <category>高数</category>
      </categories>
      <tags>
        <tag>集合</tag>
      </tags>
  </entry>
</search>
