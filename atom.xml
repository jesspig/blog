<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JessPig</title>
  
  <subtitle>为了更优秀的自己而努力&lt;br&gt;少说废话装高手</subtitle>
  <link href="http://blog-gh-pages.jesspig.site/atom.xml" rel="self"/>
  
  <link href="http://blog-gh-pages.jesspig.site/"/>
  <updated>2022-09-21T04:58:19.687Z</updated>
  <id>http://blog-gh-pages.jesspig.site/</id>
  
  <author>
    <name>JessPig</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mybatis 二级缓存</title>
    <link href="http://blog-gh-pages.jesspig.site/2022/06/10/115704/1c591d879103/"/>
    <id>http://blog-gh-pages.jesspig.site/2022/06/10/115704/1c591d879103/</id>
    <published>2022-06-10T03:57:04.000Z</published>
    <updated>2022-09-21T04:58:19.687Z</updated>
    
    <content type="html"><![CDATA[<p> 今天在使用 mybatis 时想要开启二级缓存，结果报错了，所以来记录一下</p><p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/blog/202206101141800.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.ibatis.cache.CacheException: Error serializing object.  Cause: java.io.NotSerializableException: exam.pojo.xxx</span><br></pre></td></tr></table></figure><span id="more"></span><p>可以看到报错信息是序列化的问题那么只需要在对应的实体类中实现序列化接口 <code>Serializable</code> 就行（我这里使用了 Lombok）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exam.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">xxx</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String attr0;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> attr1;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>如果还不行，那就改一下对应的 mapper 的 <code>&lt;cache /&gt;</code> 标签中的属性，跟着 <span class="exturl" data-url="aHR0cHM6Ly9teWJhdGlzLm9yZy9teWJhdGlzLTMvemgvc3FsbWFwLXhtbC5odG1sI2NhY2hl">官方文档<i class="fa fa-external-link-alt"></i></span> 走就好了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">  <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">size</span>=<span class="string">&quot;512&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>参考自以下内容</strong>：<br>mybatis 官方文档：<span class="exturl" data-url="aHR0cHM6Ly9teWJhdGlzLm9yZy9teWJhdGlzLTMvemgvc3FsbWFwLXhtbC5odG1sI2NhY2hl">https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#cache<i class="fa fa-external-link-alt"></i></span></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt; 今天在使用 mybatis 时想要开启二级缓存，结果报错了，所以来记录一下&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/blog/202206101141800.png&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;org.apache.ibatis.cache.CacheException: Error serializing object.  Cause: java.io.NotSerializableException: exam.pojo.xxx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="小技巧" scheme="http://blog-gh-pages.jesspig.site/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Java" scheme="http://blog-gh-pages.jesspig.site/tags/Java/"/>
    
    <category term="mybatis" scheme="http://blog-gh-pages.jesspig.site/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Java 生成随机姓名</title>
    <link href="http://blog-gh-pages.jesspig.site/2022/05/15/185106/2f0066a457fb/"/>
    <id>http://blog-gh-pages.jesspig.site/2022/05/15/185106/2f0066a457fb/</id>
    <published>2022-05-15T10:51:06.000Z</published>
    <updated>2022-09-21T04:58:19.681Z</updated>
    
    <content type="html"><![CDATA[<p>做数据库的时候写人名实在是太麻烦，用姓氏 + 数字的形式好像又感觉不太好（主要是闲的），所以我就制作了一个用 Java 写的工具类👉 <a href="https://github.com/jesspig/MyUtils/blob/main/Java/RandomName.java"><strong>RandomName.java</strong></a> <span id="more"></span></p><h2 id="生成姓氏"><a href="#生成姓氏" class="headerlink" title="生成姓氏"></a>生成姓氏</h2><p>首先就是要找到姓氏，其实这比较简单，直接上网搜 <span class="exturl" data-url="aHR0cHM6Ly9jbi5iaW5nLmNvbS9zZWFyY2g/cT0lRTclOTklQkUlRTUlQUUlQjYlRTUlQTclOTM=">百家姓<i class="fa fa-external-link-alt"></i></span> ，随随便便就有一大把，然后将它们全部复制下来，进行一些处理，比如说去掉空格和做成数组啥的，只需要随便找一个 ide 或代码编辑器就能做到，这里拿 idea 举例，使用正则表达式将他们替换就好了</p><p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/blog/202205151819363.png"></p><p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/blog/202205151820447.png"></p><p>最后前后都加上花括号包住即可</p><blockquote><p>注意：复姓也会被切成单个字，要自行修改</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getFamilyName</span><span class="params">()</span> &#123;</span><br><span class="line">    String[] familyName = &#123;...&#125;;</span><br><span class="line">    <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> random.nextInt(familyName.length);</span><br><span class="line">    <span class="keyword">return</span> familyName[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>&#123;...&#125;</code> 代表已经切割好的数组</p><h2 id="生成名字"><a href="#生成名字" class="headerlink" title="生成名字"></a>生成名字</h2><p>一样的，直接上网搜一些随机的汉字即可，我这里直接就是搜 <span class="exturl" data-url="aHR0cHM6Ly9jbi5iaW5nLmNvbS9zZWFyY2g/cT0lRTYlQjElODklRTUlQUQlOTclRTUlQTQlQTclRTUlODUlQTg=">汉字大全<i class="fa fa-external-link-alt"></i></span> 了，又是同样的切割替换，然后写上代码，我这里做了一些处理，让生成的名字可以是一个字或两个字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getGivenName</span><span class="params">()</span> &#123;</span><br><span class="line">    String[] givenName = &#123;...&#125;;</span><br><span class="line"><span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> random.nextInt(givenName.length);</span><br><span class="line"><span class="type">String</span> <span class="variable">newGivenName</span> <span class="operator">=</span> givenName[i];</span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> (<span class="type">int</span>) (System.currentTimeMillis() % <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (size == <span class="number">2</span>) &#123;</span><br><span class="line">    newGivenName = givenName[i] + givenName[(<span class="type">int</span>) (System.currentTimeMillis() % givenName.length)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> newGivenName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生成姓名"><a href="#生成姓名" class="headerlink" title="生成姓名"></a>生成姓名</h2><p>做完以上两步就可以进行优化了，再加一个函数即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> getFamilyName() + getGivenName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exam.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomName</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] familyName = &#123;...&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] givenName = &#123;...&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFamilyName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> random.nextInt(familyName.length);</span><br><span class="line">        <span class="keyword">return</span> familyName[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGivenName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> random.nextInt(givenName.length);</span><br><span class="line">        <span class="type">String</span> <span class="variable">newGivenName</span> <span class="operator">=</span> givenName[i];</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> (<span class="type">int</span>) (System.currentTimeMillis() % <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">2</span>) &#123;</span><br><span class="line">            newGivenName = givenName[i] + givenName[(<span class="type">int</span>) (System.currentTimeMillis() % givenName.length)];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newGivenName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getFamilyName() + getGivenName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看看效果</p><p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/blog/202205151856948.png"></p><blockquote><p> 需要源代码的话可以到 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2plc3NwaWcvTXlVdGlscy90cmVlL21haW4vSmF2YQ==">https://github.com/jesspig/MyUtils/tree/main/Java<i class="fa fa-external-link-alt"></i></span> 中获取</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;做数据库的时候写人名实在是太麻烦，用姓氏 + 数字的形式好像又感觉不太好（主要是闲的），所以我就制作了一个用 Java 写的工具类👉 &lt;a href=&quot;https://github.com/jesspig/MyUtils/blob/main/Java/RandomName.java&quot;&gt;&lt;strong&gt;RandomName.java&lt;/strong&gt;&lt;/a&gt;</summary>
    
    
    
    <category term="小技巧" scheme="http://blog-gh-pages.jesspig.site/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Java" scheme="http://blog-gh-pages.jesspig.site/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Log4j 配置</title>
    <link href="http://blog-gh-pages.jesspig.site/2022/05/07/014411/070fc9e13887/"/>
    <id>http://blog-gh-pages.jesspig.site/2022/05/07/014411/070fc9e13887/</id>
    <published>2022-05-06T17:44:11.000Z</published>
    <updated>2022-09-21T04:58:19.683Z</updated>
    
    <content type="html"><![CDATA[<p>接下来简单讲解一下 Log4j 的配置，因为最近的学习当中会使用到，所以在这里记录一下<span id="more"></span></p><h2 id="前置操作"><a href="#前置操作" class="headerlink" title="前置操作"></a>前置操作</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>通过 maven 进行拉取相关的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建-log4j-properties-文件"><a href="#创建-log4j-properties-文件" class="headerlink" title="创建 log4j.properties 文件"></a>创建 log4j.properties 文件</h3><p>到 <code>src/main/resources</code> 目录下创建 <code>log4j.properties</code> </p><p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/blog/202205052130067.png"></p><h2 id="配置文件解析"><a href="#配置文件解析" class="headerlink" title="配置文件解析"></a>配置文件解析</h2><h3 id="根配置-rootLogger"><a href="#根配置-rootLogger" class="headerlink" title="根配置 [rootLogger]"></a>根配置 [rootLogger]</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">log4j.rootLogger</span>=&lt;level&gt;,appenderName ...</span><br></pre></td></tr></table></figure><p><code>level</code> 表示日志等级</p><p><code>appenderName</code> 表示输出的位置，可以是一个或多个</p><p>比如以下配置就是将 <code>DEBUG</code> 日志等级的信息输出到控制台和文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">DEBUG,Console,File</span></span><br></pre></td></tr></table></figure><blockquote><p>补充：<code>Console</code> 和 <code>File</code> 可以任意取名，只需要跟后面的 <code>log4j.appender.xxx</code> 的 <code>xxx</code> 部分对应即可</p></blockquote><h3 id="日志等级"><a href="#日志等级" class="headerlink" title="日志等级"></a>日志等级</h3><p><strong>ALL &lt; TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL &lt; OFF</strong> </p><p>级别越低包含内容越多</p><table><thead><tr><th>级别</th><th>描述</th></tr></thead><tbody><tr><td>ALL</td><td>所有级别的信息</td></tr><tr><td>TRACE</td><td>比 DEBUG 更详细的信息</td></tr><tr><td>DEBUG</td><td>调试信息</td></tr><tr><td>INFO</td><td>普通信息</td></tr><tr><td>WARN</td><td>可能会出现潜在错误的警告信息</td></tr><tr><td>ERROR</td><td>不影响系统的继续运行的错误信息</td></tr><tr><td>FATAL</td><td>将会导致应用程序的退出的严重错误事件信息</td></tr><tr><td>OFF</td><td>用于关闭所有日志记录</td></tr></tbody></table><h3 id="输出类型-appender"><a href="#输出类型-appender" class="headerlink" title="输出类型 [appender]"></a>输出类型 [appender]</h3><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>org.apache.log4j.ConsoleAppender</td><td>控制台</td></tr><tr><td>org.apache.log4j.FileAppender</td><td>文件</td></tr><tr><td>org.apache.log4j.DailyRollingFileAppender</td><td>每天产生一个日志文件</td></tr><tr><td>org.apache.log4j.RollingFileAppender</td><td>文件大小到达指定尺寸的时候产生一个新的文件</td></tr><tr><td>org.apache.log4j.WriterAppender</td><td>将日志信息以流格式发送到任意指定的地方</td></tr></tbody></table><p>使用方式大概如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">DEBUG,Console,File</span></span><br><span class="line"><span class="comment"># 控制台输出</span></span><br><span class="line"><span class="attr">log4j.appender.Console</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="comment"># 文件输出</span></span><br><span class="line"><span class="attr">log4j.appender.File</span>=<span class="string">org.apache.log4j.FileAppender</span></span><br></pre></td></tr></table></figure><h3 id="信息格式-layout"><a href="#信息格式-layout" class="headerlink" title="信息格式 [layout]"></a>信息格式 [layout]</h3><table><thead><tr><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>org.apache.log4j.HTMLLayout</td><td>输出 HTML 表格代码</td></tr><tr><td>org.apache.log4j.PatternLayout</td><td>自定义格式输出</td></tr><tr><td>org.apache.log4j.SimpleLayout</td><td>输出级别和信息</td></tr><tr><td>org.apache.log4j.TTCCLayout</td><td>输出线程、级别、类名、信息</td></tr></tbody></table><p>使用方法如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 控制台输出，信息格式是 org.apache.log4j.SimpleLayout</span></span><br><span class="line"><span class="attr">log4j.appender.Console</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.Console.layout</span>=<span class="string">org.apache.log4j.SimpleLayout</span></span><br></pre></td></tr></table></figure><p>输出信息大概如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INFO - xxxx</span><br><span class="line">DEBUG - xxxx</span><br></pre></td></tr></table></figure><h4 id="自定义格式的用法"><a href="#自定义格式的用法" class="headerlink" title="自定义格式的用法"></a>自定义格式的用法</h4><p> <code>org.apache.log4j.PatternLayout</code> 的格式</p><table><thead><tr><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>%m</td><td>消息</td></tr><tr><td>%n</td><td>换行</td></tr><tr><td>%d</td><td>时间，可以指定格式，如 <code>%d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125;</code></td></tr><tr><td>%t</td><td>线程名</td></tr><tr><td>%p</td><td>输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL</td></tr><tr><td>%c</td><td>类名</td></tr><tr><td>%M</td><td>方法名</td></tr><tr><td>%r</td><td>耗费时间，毫秒</td></tr><tr><td>%l</td><td>代码所在位置</td></tr></tbody></table><p>用法如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 控制台输出，信息格式是 org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.Console</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.Console.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="comment"># 通过 ConversionPattern 设置属性</span></span><br><span class="line"><span class="attr">log4j.appender.Console.layout.ConversionPattern</span>=<span class="string">%d&#123;HH:mm:ss&#125; [%p] %m%n</span></span><br></pre></td></tr></table></figure><p>输出信息大概如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HH:mm:ss [INFO] xxxx</span><br><span class="line">HH:mm:ss [DEBUG] xxxx</span><br></pre></td></tr></table></figure><h3 id="输出等级-Threshold"><a href="#输出等级-Threshold" class="headerlink" title="输出等级 [Threshold]"></a>输出等级 [Threshold]</h3><p>相当于过滤，只输出指定级别的内容到指定位置</p><p>比如说控制台中只输出 <code>DEBUG</code> 级别的信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件输出</span></span><br><span class="line"><span class="attr">log4j.appender.Console</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.Console.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.Console.layout.ConversionPattern</span>=<span class="string">%d&#123;HH:mm:ss&#125; [%p] %m%n</span></span><br><span class="line"><span class="comment"># 设置级别</span></span><br><span class="line"><span class="attr">log4j.appender.Console.Threshold</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure><blockquote><p>补充：<code>Threshold</code> 的等级不能比根配置 <code>log4j.rootLogger</code> 低级，所以尽量使用较低的等级，【<a href="#%E6%97%A5%E5%BF%97%E7%AD%89%E7%BA%A7">回顾日志等级</a> 】</p></blockquote><h3 id="追加内容-Append"><a href="#追加内容-Append" class="headerlink" title="追加内容-[Append]"></a>追加内容-[Append]</h3><p>往旧的日志文件中追加内容</p><p>如果为 <code>true</code> 表示开启，会将新的内容追加到旧的日志文件</p><p>如果为 <code>false</code> 表示关闭，会将新的内容覆盖到旧的日志文件</p><p>默认是 <code>true</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">log4j.appender.File</span>=<span class="string">org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.File.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.File.layout.ConversionPattern</span>=<span class="string">%d&#123;HH:mm:ss&#125; [%p] %m%n</span></span><br><span class="line"><span class="comment"># 开启追加内容</span></span><br><span class="line"><span class="attr">log4j.appender.File.Append</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h3 id="内容补充"><a href="#内容补充" class="headerlink" title="内容补充"></a>内容补充</h3><p><code>MaxFileSize</code> 设置日志文件大小，仅 <code>RollingFileAppender</code> 可用</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">log4j.appender.File</span>=<span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.File.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.File.layout.ConversionPattern</span>=<span class="string">%d&#123;HH:mm:ss&#125; [%p] %m%n</span></span><br><span class="line"><span class="comment"># 输出大小为 4MB</span></span><br><span class="line"><span class="attr">log4j.appender.File.MaxFileSize</span>=<span class="string">4MB</span></span><br><span class="line"><span class="attr">log4j.appender.File.Append</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p><code>File</code> 设置日志文件输出位置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">DEBUG,ErrorFile</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># error 日志</span></span><br><span class="line"><span class="attr">log4j.appender.ErrorFile</span>=<span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.ErrorFile.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.ErrorFile.layout.ConversionPattern</span>=<span class="string">%d&#123;HH:mm:ss&#125; [%p] %m%n</span></span><br><span class="line"><span class="attr">log4j.appender.ErrorFile.MaxFileSize</span>=<span class="string">4MB</span></span><br><span class="line"><span class="comment"># 输出位置</span></span><br><span class="line"><span class="attr">log4j.appender.ErrorFile.File</span>=<span class="string">/logs/ERROR.log</span></span><br><span class="line"><span class="comment"># 等级不能低于根配置</span></span><br><span class="line"><span class="attr">log4j.appender.ErrorFile.Threshold</span>=<span class="string">Error</span></span><br><span class="line"><span class="attr">log4j.appender.ErrorFile.Append</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>参考自以下内容</strong></p><p>哔哩哔哩：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWp0NDExVDd6dA==">https://www.bilibili.com/video/BV1jt411T7zt<i class="fa fa-external-link-alt"></i></span></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;接下来简单讲解一下 Log4j 的配置，因为最近的学习当中会使用到，所以在这里记录一下</summary>
    
    
    
    <category term="小技巧" scheme="http://blog-gh-pages.jesspig.site/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Java" scheme="http://blog-gh-pages.jesspig.site/tags/Java/"/>
    
    <category term="maven" scheme="http://blog-gh-pages.jesspig.site/tags/maven/"/>
    
    <category term="log4j" scheme="http://blog-gh-pages.jesspig.site/tags/log4j/"/>
    
  </entry>
  
  <entry>
    <title>docker 部署应用</title>
    <link href="http://blog-gh-pages.jesspig.site/2022/05/05/211538/38f7bad9b217/"/>
    <id>http://blog-gh-pages.jesspig.site/2022/05/05/211538/38f7bad9b217/</id>
    <published>2022-05-05T13:15:38.000Z</published>
    <updated>2022-09-21T04:58:19.696Z</updated>
    
    <content type="html"><![CDATA[<p>最近在耍 docker ，接下来就简单记录一下 docker 的从安装到部署一些容器 <span id="more"></span></p><h2 id="Linux-下安装"><a href="#Linux-下安装" class="headerlink" title="Linux 下安装"></a>Linux 下安装</h2><p>其实 docker 的 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwv">官方文档<i class="fa fa-external-link-alt"></i></span> 中就已经写明白了，接下来的安装步骤是照搬官网的，以 Ubuntu 为例</p><p><strong>更新 <code>apt</code> 包索引并安装包，以允许 <code>apt</code> 通过HTTPS使用存储库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install ca-certificates curl gnupg lsb-release</span><br></pre></td></tr></table></figure><p><strong>添加Docker官方GPG密钥</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br></pre></td></tr></table></figure><p><strong>使用以下命令设置稳定存储库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure><p><strong>更新 <code>apt</code> 包索引，安装最新版本的 Docker Engine、containerd 和 Docker Compose</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure><h2 id="Windows-下安装"><a href="#Windows-下安装" class="headerlink" title="Windows 下安装"></a>Windows 下安装</h2><p>windows 下安装其实挺简单的，直接到 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZG9ja2VyLmNvbS9nZXQtc3RhcnRlZC8=">docker 官网<i class="fa fa-external-link-alt"></i></span> 里下载就好了，这里顺便讲一下 wsl2 的安装， wsl2 有 Linux 的内核，所以其实可以按照上面 Linux 的步骤进行安装</p><p><strong>启用 Windows 子系统</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:Microsoft<span class="literal">-Windows-Subsystem-Linux</span> /all /norestart</span><br></pre></td></tr></table></figure><p><strong>启用虚拟机</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure><p><strong>下载内核更新包</strong></p><ul><li><span class="exturl" data-url="aHR0cHM6Ly93c2xzdG9yZXN0b3JhZ2UuYmxvYi5jb3JlLndpbmRvd3MubmV0L3dzbGJsb2Ivd3NsX3VwZGF0ZV94NjQubXNp">适用于 x64 计算机的 WSL2 Linux 内核更新包<i class="fa fa-external-link-alt"></i></span></li></ul><p><strong>设置 wsl2</strong> </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--set-default-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>安装一个子系统</strong></p><p>这里以 Ubuntu 为例</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--install</span> <span class="literal">-d</span> Ubuntu</span><br></pre></td></tr></table></figure><p><strong>打开 docker desktop 进行设置</strong></p><p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/blog/202205050121079.png"></p><p>这个时候你就会发现你的 windows 的 docker 和子系统的相通了</p><p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/blog/202205050127031.png"></p><p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/blog/202205050128677.png"></p><h2 id="创建一个容器"><a href="#创建一个容器" class="headerlink" title="创建一个容器"></a>创建一个容器</h2><p>接下来尝试部署一些应用</p><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p><code>-it</code> 远程连接</p><p><code>-p</code> 端口映射</p><p><code>–name</code> 容器名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 80:80 -p 443:443 --name nginx nginx</span><br></pre></td></tr></table></figure><p>执行完以上命令后就会运行容器，如果发现本地没有对应的镜像就会到 docker hub 上下载，比如像下面这样</p><p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/blog/202205052103422.png"></p><p>当它下载完成以后就会开始运行</p><p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/blog/202205052106368.png" alt="image-20220505210627987"></p><p>这时候就可以到浏览器中输入 <code>http://localhost:80</code> 进行访问</p><p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/blog/202205052109663.png"></p><p>运行成功，现在可以将容器停了，重新打开让它在后台运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start nginx</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在耍 docker ，接下来就简单记录一下 docker 的从安装到部署一些容器</summary>
    
    
    
    <category term="小技巧" scheme="http://blog-gh-pages.jesspig.site/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="docker" scheme="http://blog-gh-pages.jesspig.site/tags/docker/"/>
    
    <category term="nginx" scheme="http://blog-gh-pages.jesspig.site/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>高数-函数</title>
    <link href="http://blog-gh-pages.jesspig.site/2022/05/04/220836/dc96c6435ae1/"/>
    <id>http://blog-gh-pages.jesspig.site/2022/05/04/220836/dc96c6435ae1/</id>
    <published>2022-05-04T14:08:36.000Z</published>
    <updated>2022-09-21T04:58:19.709Z</updated>
    
    <content type="html"><![CDATA[<p>函数关系，是指  $ \forall x \in \mathbb{D} $  ，存在对应法则 $f$ ，使得存在唯一的 $y$ 值与之对应，就是函数关系</p><blockquote><p>注意：</p><ol><li>一个 $x$ 只能对应一个 $y$ </li><li>函数关系可以多对一，即多个 $x$ 对应一个 $y$ ；但不可以一对多，即一个 $x$ 对应多个 $y$ </li><li>图像法判断函数：垂直于 $x$ 轴画直线，只有一个交点，那么它就是一个函数图像</li></ol></blockquote><span id="more"></span><ul><li><strong>象限</strong></li></ul><p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/blog/202205031729091.png"></p><h2 id="正比例函数"><a href="#正比例函数" class="headerlink" title="正比例函数"></a>正比例函数</h2><p>$$<br>y&#x3D;kx,(k \neq 0)<br>$$</p><blockquote><ol><li>恒过原点 $(0,0)$ </li><li>$\left | k \right | $ 越大，倾斜度越陡</li></ol></blockquote><h2 id="一次函数"><a href="#一次函数" class="headerlink" title="一次函数"></a>一次函数</h2><p>$$<br>y&#x3D;kx+b, (k \neq 0)<br>$$</p><blockquote><p>$b$ ： 代表与 $y$ 轴的交点，控制函数图像的位置：上加下减，左加右减</p><p>$k$ ：代表函数的斜率，控制函数的倾斜程度</p></blockquote><h3 id="求表达式"><a href="#求表达式" class="headerlink" title="求表达式"></a>求表达式</h3><blockquote><p><strong>点斜式</strong> ：过交点 $\left(x_{0}, y_{0}\right)$ ，求 $k$ </p></blockquote><p>$$<br> \begin{array}{c}<br> k&#x3D;\frac{y-y_{0}}{x-x_{0}} \\<br> y-y_{0}&#x3D;k\left(x-x_{0}\right)<br> \end{array}<br>$$</p><blockquote><p><strong>两点式</strong> ：过 $A\left(x_{1}, y_{1}\right)$ 和  $ B\left(x_{2}, y_{2}\right) $ 两点的直线</p></blockquote><p>$$<br>\frac{y-y_{1}}{x-x_{1}}&#x3D;\frac{y_{2}-y_{1}}{x_{2}-x_{1}}<br>$$</p><blockquote><p><strong>斜截式</strong> ：已知交点和斜率，求直线</p></blockquote><p>$$<br>y&#x3D;kx+b<br>$$</p><h2 id="二次函数"><a href="#二次函数" class="headerlink" title="二次函数"></a>二次函数</h2><p>$$<br>y&#x3D;a x^{2} + b x + c, (a \neq 0)<br>$$</p><blockquote><ol><li>二次是指最高次数为 $2$ </li><li>$a$ : 代表函数的开口，$\left | a \right | $ 越大开口越小， $\left | a \right | $ 越小开口越大，当 $a$ 为负数时，开口向下</li></ol></blockquote><h3 id="求表达式-1"><a href="#求表达式-1" class="headerlink" title="求表达式"></a>求表达式</h3><blockquote><p><strong>一般式</strong> ：</p></blockquote><p>$$<br>y&#x3D;a x^{2} + b x + c<br>$$</p><blockquote><p><strong>顶点式</strong> ：顶点等于 $(-h,n)$</p></blockquote><p>$$<br>y&#x3D;a(x+h)^{2}+n<br>$$</p><blockquote><p><strong>一般式化顶点式</strong> ： $y&#x3D;a x^{2} + b x + c$ 化顶点式</p><blockquote><p><strong>回顾</strong> ：<em>完全平方式</em> ：$(a + b)^{2} &#x3D; a^{2} + 2 a b + b^{2}$ </p></blockquote></blockquote><p>$$<br>\begin{aligned}<br>y &amp;&#x3D;a\left(x^{2}+2 \frac{b}{2 a} x+\frac{b^{2}}{4 a^{2}}-\frac{b^{2}}{4 a^{2}}\right)+c \\<br>&amp;&#x3D;\left(x+\frac{b}{2 a}\right)^{2}-\frac{b^{2}}{4 a}+c \\<br>&amp;&#x3D;a\left(x+\frac{b}{2 a}\right)^{2}+\frac{4 a c-b^{2}}{4 a}<br>\end{aligned}<br>$$</p><ul><li><strong>顶点坐标</strong> ：</li></ul><p>$$<br>\left(-\frac{b}{2 a}, \frac{4 a c-b^{2}}{4 a}\right)<br>$$</p><ul><li><strong>对称轴</strong> ：左同右异，即 $a$ 和 $b$ 的符号相同，则对称轴在 $y$ 轴左边，反之亦然</li></ul><p>$$<br>x &#x3D; - \frac{b}{2 a}<br>$$</p><ul><li><strong>与 $x$ 轴交点</strong> ：$(0,c)$</li></ul><blockquote><p><strong>交点式</strong> ： </p></blockquote><p>$$<br>y &#x3D; a \left(x - x_{1}\right)\left(x - x_{2}\right)<br>$$</p><blockquote><p><em><strong>Tips</strong></em>：<strong>直接代入</strong></p></blockquote><p>将三点代入 $a x^{2} + b x + c &#x3D; 0$ ，交点代入到 $a$ 和 $b$ ，第三点代入到 $c$ </p><p>如：交点为 $1$ 和 $3$ ，过点 $(0,-3)$ ，代入到  $a x^{2} + b x + c &#x3D; 0$  </p><p>$$<br>\begin{aligned}<br>&amp; 1 x^{2} + 3 x^{2} + c &#x3D; 0 \\<br>&amp; \because c &#x3D; y , y &#x3D; -3\\<br>&amp; \therefore c &#x3D; -3 \\<br>&amp; \therefore y &#x3D; x^{2} + 3 x^{2} - 3<br>\end{aligned}<br>$$</p><h3 id="单调性"><a href="#单调性" class="headerlink" title="单调性"></a>单调性</h3><blockquote><ol><li>单调减：随着 $x$ 增大而减小</li><li>单调增：随着 $x$ 减小而增大</li></ol></blockquote><h3 id="与-x-轴的交点个数"><a href="#与-x-轴的交点个数" class="headerlink" title="与 $x$ 轴的交点个数"></a>与 $x$ 轴的交点个数</h3><blockquote><p>$y&#x3D;a x^{2} + b x + c$ 有几个根？</p></blockquote><p>如果 $\Delta &#x3D;b^{2}-4 a c &gt; 0$ ，则有 $2$ 个交点</p><p>如果 $\Delta &#x3D;b^{2}-4 a c &#x3D; 0$ ，则有 $1$ 个交点</p><p>如果 $\Delta &#x3D;b^{2}-4 a c &lt; 0$ ，则有 $0$ 个交点</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;函数关系，是指  $ \forall x \in \mathbb{D} $  ，存在对应法则 $f$ ，使得存在唯一的 $y$ 值与之对应，就是函数关系&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个 $x$ 只能对应一个 $y$ &lt;/li&gt;
&lt;li&gt;函数关系可以多对一，即多个 $x$ 对应一个 $y$ ；但不可以一对多，即一个 $x$ 对应多个 $y$ &lt;/li&gt;
&lt;li&gt;图像法判断函数：垂直于 $x$ 轴画直线，只有一个交点，那么它就是一个函数图像&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="高数" scheme="http://blog-gh-pages.jesspig.site/categories/%E9%AB%98%E6%95%B0/"/>
    
    
    <category term="函数" scheme="http://blog-gh-pages.jesspig.site/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>画画练习 22-04-26</title>
    <link href="http://blog-gh-pages.jesspig.site/2022/04/26/010654/b18be603451b/"/>
    <id>http://blog-gh-pages.jesspig.site/2022/04/26/010654/b18be603451b/</id>
    <published>2022-04-25T17:06:54.000Z</published>
    <updated>2022-09-20T13:31:47.930Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://fastly.jsdelivr.net/gh/jesspig/PicBed@main/img/202204260111712.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img data-src=&quot;https://fastly.jsdelivr.net/gh/jesspig/PicBed@main/img/202204260111712.png&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="绘画" scheme="http://blog-gh-pages.jesspig.site/categories/%E7%BB%98%E7%94%BB/"/>
    
    
    <category term="植物" scheme="http://blog-gh-pages.jesspig.site/tags/%E6%A4%8D%E7%89%A9/"/>
    
    <category term="速写" scheme="http://blog-gh-pages.jesspig.site/tags/%E9%80%9F%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>画画练习 22-04-25</title>
    <link href="http://blog-gh-pages.jesspig.site/2022/04/25/125909/80e46dbcc039/"/>
    <id>http://blog-gh-pages.jesspig.site/2022/04/25/125909/80e46dbcc039/</id>
    <published>2022-04-25T04:59:09.000Z</published>
    <updated>2022-09-21T04:58:19.708Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204251302793.png"></p><span id="more"></span><h2 id="线稿提取练习"><a href="#线稿提取练习" class="headerlink" title="线稿提取练习"></a>线稿提取练习</h2><p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204251303010.png"></p><p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204251303396.png"></p><p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204251304095.png"></p><p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204251304984.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img data-src=&quot;https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204251302793.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="绘画" scheme="http://blog-gh-pages.jesspig.site/categories/%E7%BB%98%E7%94%BB/"/>
    
    
    <category term="线稿" scheme="http://blog-gh-pages.jesspig.site/tags/%E7%BA%BF%E7%A8%BF/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法-单链表</title>
    <link href="http://blog-gh-pages.jesspig.site/2022/04/17/184139/9b23354010ea/"/>
    <id>http://blog-gh-pages.jesspig.site/2022/04/17/184139/9b23354010ea/</id>
    <published>2022-04-17T10:41:39.000Z</published>
    <updated>2022-09-21T04:58:19.703Z</updated>
    
    <content type="html"><![CDATA[<p>链表是线性结构中的一种，采用的数据存储方式是链式存储，链式存储是一种逻辑结构，不像数组一样使用连续的存储空间，而是通过结构体和指针将每个元素连接在一起，所以是自适应内存大小的，理论上来说无论多大的数据都能保存下来，前提是不超过机器的上限<span id="more"></span></p><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p>单链表的结构就像下图（本文图片均由本灵魂画手使用 OneNote 作画）一样，利用结构体，存储数据的同时额外开辟一份空间用来保存指针，而这个指针则是用于指向下一个节点</p><p>存储方式大概就像下图一样，通过指针将数据像烤串一样串起来</p><p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204171526278.png"></p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>结构体代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 节点</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  ElemType val;  <span class="comment">// 节点值</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">Node</span>* next;  <span class="comment">// 下一个节点</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>像任何数据类型一样，链表也可以初始化，但首先要创建一个初始化方法，首先要为链表开辟内存，并判断是否创建失败，如果失败就返回 <code>NULL</code> </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化链表</span></span><br><span class="line"><span class="function">Node* <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Node* head = (Node*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node));  <span class="comment">// 创建头节点</span></span><br><span class="line">  <span class="comment">// 判断头节点是否创建成功</span></span><br><span class="line">  <span class="keyword">if</span>(head == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;malloc failure\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Init success\n&quot;</span>);</span><br><span class="line">  <span class="comment">// 头节点的下一个节点为NULL</span></span><br><span class="line">  head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h3><p>初始化完成以后就可以得到一个空的链表了大概长这样</p><p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204171524843.png"></p><h4 id="头部插入"><a href="#头部插入" class="headerlink" title="头部插入"></a>头部插入</h4><p>头部插入法，顾名思义，就是从头部插入元素</p><p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204171509447.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 头部插入节点</span></span><br><span class="line"><span class="function">Node* <span class="title">InsertHead</span><span class="params">(Node* head, ElemType val)</span></span>&#123;</span><br><span class="line">  <span class="comment">// 创建新节点</span></span><br><span class="line">  Node* p = (Node*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node));</span><br><span class="line">  <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;malloc failure\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 设置新节点的值</span></span><br><span class="line">  p-&gt;val = val;</span><br><span class="line">  <span class="comment">// 新节点的下一个指向头节点的下一个节点</span></span><br><span class="line">  p-&gt;next = head-&gt;next;</span><br><span class="line">  <span class="comment">// 新节点成为头节点的下一个节点</span></span><br><span class="line">  head-&gt;next = p;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;InsertHead success\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="尾部插入"><a href="#尾部插入" class="headerlink" title="尾部插入"></a>尾部插入</h4><p>尾部插入跟头部插入一样，只不过是将新元素放到表尾</p><p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204171528528.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 尾部插入节点</span></span><br><span class="line"><span class="function">Node* <span class="title">InsertTail</span><span class="params">(Node* head, ElemType val)</span></span>&#123;</span><br><span class="line">  <span class="comment">// 创建新节点</span></span><br><span class="line">  Node* p = (Node*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node));</span><br><span class="line">  <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;malloc failure\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">  &#125;</span><br><span class="line">  p-&gt;val = val;</span><br><span class="line">  <span class="comment">// 新节点的下一个指向NULL</span></span><br><span class="line">  p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="comment">// 判断头节点是否为空</span></span><br><span class="line">  <span class="keyword">if</span>(head-&gt;next == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="comment">// 头节点的下一个节点为新节点</span></span><br><span class="line">    head-&gt;next = p;</span><br><span class="line">  &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 循环遍历链表</span></span><br><span class="line">    Node* q = head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(q-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">      <span class="comment">// 下一个节点不为空，则继续循环</span></span><br><span class="line">      q = q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 尾节点的下一个节点为新节点</span></span><br><span class="line">    q-&gt;next = p;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;InsertTail success\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="中间插入"><a href="#中间插入" class="headerlink" title="中间插入"></a>中间插入</h4><p>找出要插入的位置，然后将指针指向新元素，并把新元素的指针指向旧元素</p><p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204171737391.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中间插入节点 </span></span><br><span class="line"><span class="function">Node * <span class="title">InsertMiddle</span> <span class="params">(Node * head, ElemType val, <span class="type">int</span> position)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 查找插入位置</span></span><br><span class="line">  Node * temp = head;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; position; i++) &#123;</span><br><span class="line">    temp = temp-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (temp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="comment">// 插入位置不存在</span></span><br><span class="line">      <span class="built_in">printf</span> (<span class="string">&quot;insert position error\n&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 创建新节点</span></span><br><span class="line">  Node * p = (Node *) <span class="built_in">malloc</span> (<span class="built_in">sizeof</span> (Node));</span><br><span class="line">  <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;malloc failure\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">  &#125;</span><br><span class="line">  p-&gt;val = val;</span><br><span class="line">  <span class="comment">// 新节点的下一个指向temp的下一个节点</span></span><br><span class="line">  p-&gt;next = temp-&gt;next;</span><br><span class="line">  <span class="comment">// temp的下一个节点指向新节点</span></span><br><span class="line">  temp-&gt;next = p;</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;InsertMiddle success\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p>跟<a href="#%E6%8F%92%E5%85%A5%E5%85%83%E7%B4%A0">插入元素</a>一样，进行反向操作即可</p><p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204171748268.png"></p><h4 id="头部删除"><a href="#头部删除" class="headerlink" title="头部删除"></a>头部删除</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 头部删除节点</span></span><br><span class="line"><span class="function">Node * <span class="title">DeleteHead</span> <span class="params">(Node * head)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 判断头节点是否为空</span></span><br><span class="line">  <span class="keyword">if</span> (head-&gt;next == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;head is empty\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 删除头节点</span></span><br><span class="line">  Node * p = head-&gt;next;</span><br><span class="line">  head-&gt;next = p-&gt;next;</span><br><span class="line">  <span class="built_in">free</span> (p); <span class="comment">// 释放内存</span></span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;DeleteHead success\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="尾部删除"><a href="#尾部删除" class="headerlink" title="尾部删除"></a>尾部删除</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 尾部删除节点</span></span><br><span class="line"><span class="function">Node * <span class="title">DeleteTail</span> <span class="params">(Node * head)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 判断头节点是否为空</span></span><br><span class="line">  <span class="keyword">if</span> (head-&gt;next == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;head is empty\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 循环遍历链表</span></span><br><span class="line">  Node * p = head-&gt;next, * q; <span class="comment">// p代表当前节点，q代表前驱节点</span></span><br><span class="line">  <span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    q = p; <span class="comment">// p成为后继节点的前驱节点</span></span><br><span class="line">    p = p-&gt;next; <span class="comment">// p指向后继节点</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将q的后继指向NULL</span></span><br><span class="line">  q-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="built_in">free</span> (p); <span class="comment">// 释放内存</span></span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;DeleteTail success\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="中间删除"><a href="#中间删除" class="headerlink" title="中间删除"></a>中间删除</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中间删除节点</span></span><br><span class="line"><span class="function">Node * <span class="title">DeleteMiddle</span> <span class="params">(Node * head, <span class="type">int</span> position)</span> </span>&#123;</span><br><span class="line">  Node * p = head, * q; <span class="comment">// p代表当前节点，q代表前驱节点</span></span><br><span class="line">  <span class="comment">// 查找删除位置</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; position; i++) &#123;</span><br><span class="line">    q = p; <span class="comment">// p成为后继节点的前驱节点</span></span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="comment">// 删除位置不存在</span></span><br><span class="line">      <span class="built_in">printf</span> (<span class="string">&quot;delete position error\n&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  q-&gt;next = p-&gt;next; <span class="comment">// 前驱节点的后继指向p的后继</span></span><br><span class="line">  <span class="built_in">free</span> (p); <span class="comment">// 释放内存</span></span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;DeleteMiddle success\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h3><p>修改元素跟<a href="#%E4%B8%AD%E9%97%B4%E6%8F%92%E5%85%A5">中间插入</a>差不多，只是不用新增节点</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改节点的值</span></span><br><span class="line"><span class="function">Node* <span class="title">Modify</span> <span class="params">(Node * head, ElemType val, <span class="type">int</span> position)</span> </span>&#123;</span><br><span class="line">  Node * p = head;</span><br><span class="line">  <span class="comment">// 查找修改位置</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; position; i++) &#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="comment">// 修改位置不存在</span></span><br><span class="line">      <span class="built_in">printf</span> (<span class="string">&quot;modify position error\n&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  p-&gt;val = val;</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;Modify success\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历链表"><a href="#遍历链表" class="headerlink" title="遍历链表"></a>遍历链表</h3><p>为了方便修改，我并没有明确元素值的数据类型，所以输出语句就使用 <code>C++</code> ，这样就可以输出任意类型了，<code>C</code> 我不知道怎么做到</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Display</span> <span class="params">(Node * h)</span> </span>&#123;</span><br><span class="line">  Node * p;</span><br><span class="line">  p = h-&gt;next;</span><br><span class="line">  <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    std::cout &lt;&lt; p-&gt;val;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="销毁链表"><a href="#销毁链表" class="headerlink" title="销毁链表"></a>销毁链表</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 销毁链表</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Destroy</span> <span class="params">(Node * head)</span> </span>&#123;</span><br><span class="line">  Node * p;</span><br><span class="line">  <span class="comment">// 释放链表中的节点</span></span><br><span class="line">  <span class="keyword">while</span> (head-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    p = head-&gt;next;</span><br><span class="line">    head-&gt;next = p-&gt;next;</span><br><span class="line">    <span class="built_in">free</span> (p);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;Destroy success\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><p>写完以上代码后，就可以编写 <code>main()</code> 方法对他们进行测试了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">(<span class="type">int</span> argc, <span class="type">char</span> * argv [])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化链表</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">Node</span> * head = <span class="built_in">Init</span> ();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 头部插入节点</span></span><br><span class="line">  <span class="built_in">InsertHead</span> (head, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">  <span class="built_in">InsertHead</span> (head, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">  <span class="built_in">Display</span> (head);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 尾部插入节点</span></span><br><span class="line">  <span class="built_in">InsertTail</span> (head, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">  <span class="built_in">InsertTail</span> (head, <span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">  <span class="built_in">Display</span> (head);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 中间插入节点</span></span><br><span class="line">  <span class="built_in">InsertMiddle</span> (head, <span class="string">&#x27;e&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="built_in">Display</span> (head);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 头部删除节点</span></span><br><span class="line">  <span class="built_in">DeleteHead</span> (head);</span><br><span class="line">  <span class="built_in">Display</span> (head);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 尾部删除节点</span></span><br><span class="line">  <span class="built_in">DeleteTail</span> (head);</span><br><span class="line">  <span class="built_in">Display</span> (head);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 中间删除节点</span></span><br><span class="line">  <span class="built_in">DeleteMiddle</span> (head, <span class="number">2</span>);</span><br><span class="line">  <span class="built_in">Display</span> (head);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 修改节点</span></span><br><span class="line">  <span class="built_in">Modify</span> (head, <span class="string">&#x27;f&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="built_in">Display</span> (head);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 销毁链表</span></span><br><span class="line">  <span class="built_in">Destroy</span> (head);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204171929861.png"></p><blockquote><p>仓库地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2plc3NwaWcvZGF0YS1zdHJ1Y3R1cmVzLWFuZC1hbGdvcml0aG1zL3RyZWUvbWFpbi9saW5rZWQtbGlzdA==">https://github.com/jesspig/data-structures-and-algorithms/tree/main/linked-list<i class="fa fa-external-link-alt"></i></span></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;链表是线性结构中的一种，采用的数据存储方式是链式存储，链式存储是一种逻辑结构，不像数组一样使用连续的存储空间，而是通过结构体和指针将每个元素连接在一起，所以是自适应内存大小的，理论上来说无论多大的数据都能保存下来，前提是不超过机器的上限</summary>
    
    
    
    <category term="数据结构与算法" scheme="http://blog-gh-pages.jesspig.site/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="C" scheme="http://blog-gh-pages.jesspig.site/tags/C/"/>
    
    <category term="数据结构" scheme="http://blog-gh-pages.jesspig.site/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="链表" scheme="http://blog-gh-pages.jesspig.site/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 22-04-16</title>
    <link href="http://blog-gh-pages.jesspig.site/2022/04/16/232822/4df1e42b6d1f/"/>
    <id>http://blog-gh-pages.jesspig.site/2022/04/16/232822/4df1e42b6d1f/</id>
    <published>2022-04-16T15:28:22.000Z</published>
    <updated>2022-09-20T13:31:47.878Z</updated>
    
    <content type="html"><![CDATA[<p>今日份 leetcode</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWF4aW11bS1wb2ludHMteW91LWNhbi1vYnRhaW4tZnJvbS1jYXJkcy8=">1423. 可获得的最大点数<i class="fa fa-external-link-alt"></i></span></li></ul><span id="more"></span><p><img data-src="https://stats.justsong.cn/api/leetcode/?username=jesspig&cn=true"></p><h2 id="1423-可获得的最大点数"><a href="#1423-可获得的最大点数" class="headerlink" title="1423. 可获得的最大点数"></a>1423. 可获得的最大点数</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>先计算出前 <code>k</code> 个数的和，然后再一个个减掉并从后面开始一个个地加，即计算前 <code>k - i</code> 个数加后 <code>i</code> 个数的和，在此过程中比较出最大的和并返回</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">maxScore</span><span class="params">(<span class="type">int</span>* cardPoints, <span class="type">int</span> cardPointsSize, <span class="type">int</span> k)</span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">        sum += cardPoints[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = sum;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">        sum -= cardPoints[i];</span><br><span class="line">        sum += cardPoints[cardPointsSize - k + i];</span><br><span class="line">        res = res &gt; sum ? res : sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;今日份 leetcode&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWF4aW11bS1wb2ludHMteW91LWNhbi1vYnRhaW4tZnJvbS1jYXJkcy8=&quot;&gt;1423. 可获得的最大点数&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://blog-gh-pages.jesspig.site/categories/LeetCode/"/>
    
    
    <category term="leetcode" scheme="http://blog-gh-pages.jesspig.site/tags/leetcode/"/>
    
    <category term="C" scheme="http://blog-gh-pages.jesspig.site/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 22-04-15</title>
    <link href="http://blog-gh-pages.jesspig.site/2022/04/15/234111/3fb05e670303/"/>
    <id>http://blog-gh-pages.jesspig.site/2022/04/15/234111/3fb05e670303/</id>
    <published>2022-04-15T15:41:11.000Z</published>
    <updated>2022-09-20T13:31:47.877Z</updated>
    
    <content type="html"><![CDATA[<p>今日份 leetcode</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcGF0aWVudHMtd2l0aC1hLWNvbmRpdGlvbi8=">1527. 患某种疾病的患者<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmVtb3ZlLWR1cGxpY2F0ZXMtZnJvbS1zb3J0ZWQtbGlzdC8=">83. 删除排序链表中的重复元素<i class="fa fa-external-link-alt"></i></span></li></ul><span id="more"></span><p><img data-src="https://stats.justsong.cn/api/leetcode/?username=jesspig&cn=true"></p><h2 id="1527-患某种疾病的患者"><a href="#1527-患某种疾病的患者" class="headerlink" title="1527. 患某种疾病的患者"></a>1527. 患某种疾病的患者</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><code>^DIAB1|\\sDIAB1</code> 表示以 <code>DIAB1</code> 开头或空格后的 <code>DIAB1</code></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- mysql</span></span><br><span class="line"># Write your MySQL query statement below</span><br><span class="line"><span class="keyword">select</span> patient_id, patient_name, conditions <span class="keyword">from</span> Patients <span class="keyword">where</span> conditions regexp <span class="string">&#x27;^DIAB1|\\sDIAB1&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="83-删除排序链表中的重复元素"><a href="#83-删除排序链表中的重复元素" class="headerlink" title="83. 删除排序链表中的重复元素"></a>83. 删除排序链表中的重复元素</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>如果当前节点的值与后继节点的值相等，那么将后继的后继覆盖到当前节点的后继，否则返回当前节点</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">deleteDuplicates</span><span class="params">(<span class="keyword">struct</span> ListNode* head)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!head || !head-&gt;next) <span class="keyword">return</span> head;</span><br><span class="line">    head-&gt;next = deleteDuplicates(head-&gt;next);</span><br><span class="line">    <span class="keyword">return</span> head-&gt;val == head-&gt;next-&gt;val ? head-&gt;next : head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;今日份 leetcode&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcGF0aWVudHMtd2l0aC1hLWNvbmRpdGlvbi8=&quot;&gt;1527. 患某种疾病的患者&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmVtb3ZlLWR1cGxpY2F0ZXMtZnJvbS1zb3J0ZWQtbGlzdC8=&quot;&gt;83. 删除排序链表中的重复元素&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://blog-gh-pages.jesspig.site/categories/LeetCode/"/>
    
    
    <category term="leetcode" scheme="http://blog-gh-pages.jesspig.site/tags/leetcode/"/>
    
    <category term="C" scheme="http://blog-gh-pages.jesspig.site/tags/C/"/>
    
    <category term="mysql" scheme="http://blog-gh-pages.jesspig.site/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法-基础</title>
    <link href="http://blog-gh-pages.jesspig.site/2022/04/15/212403/93223b13e229/"/>
    <id>http://blog-gh-pages.jesspig.site/2022/04/15/212403/93223b13e229/</id>
    <published>2022-04-15T13:24:03.000Z</published>
    <updated>2022-09-21T04:58:19.705Z</updated>
    
    <content type="html"><![CDATA[<p>所以作为一个程序员，数据结构和算法都是必备的知识</p><span id="more"></span><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><blockquote><p>程序 &#x3D; 数据结构 + 算法</p></blockquote><h3 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a><strong>线性结构</strong></h3><p>数据之间存在一对一的关系，像排队一样，同时只有零个或一个前驱和后继</p><blockquote><ol><li>集合中必存在唯一的一个”第一个元素”</li><li>集合中必存在唯一的一个”最后的元素”</li><li>除最后元素之外，其它数据元素均有唯一的”后继”</li><li>除第一元素之外，其它数据元素均有唯一的”前驱”</li></ol></blockquote><p>常用的线性结构有：线性表，栈，队列，双队列，串(一维数组)</p><h3 id="非线性结构"><a href="#非线性结构" class="headerlink" title="非线性结构"></a>非线性结构</h3><p>常见的非线性结构有：二维数组，多维数组，广义表，树(二叉树等)，图</p><h4 id="树形结构"><a href="#树形结构" class="headerlink" title="树形结构"></a><strong>树形结构</strong></h4><p>数据之间存在一对多的关系，就像一棵树一样，一个树干上上会有零条或多条树枝，树枝上又有很多的树叶</p><blockquote><ol><li>结点：表示树中的元素</li><li>结点的度：结点的边数</li><li>树的度：树中各结点度的最大值</li><li>叶子结点：度为0的结点</li><li>分支结点：度不为0的结点</li><li>孩子：结点子树的根</li><li>双亲：结点的上层结点叫该结点的双亲</li><li>祖先：从根到该结点所经过的分支上的所有结点</li><li>子孙：以某个结点为根的子树中的任一结点</li><li>兄弟：同一双亲的孩子</li><li>结点的层次：从根结点到树中某个结点所经过的路径上的分支数称为该结点的层次</li><li>堂兄弟：同一层不同双亲的结点</li><li>树的深度：树中结点的最大层次数 </li><li>无序树：树中任意一个结点的各孩子结点之间的次序构成无关紧要的树 </li><li>有序树：树中任意一个结点的各孩子结点有严格排列次序的树</li><li>森林：树的集合，一棵由根结点和 n 个子树构成的树，把树的根结点删除后，树就变成了包含 n 棵树的森林</li></ol></blockquote><h4 id="图形结构"><a href="#图形结构" class="headerlink" title="图形结构"></a><strong>图形结构</strong></h4><p>数据之间存在多对多的关系，就像地图一样，每个地点之间都由一条或多条路相连</p><blockquote><ol><li>边：两个节点的连接称之为边</li><li>顶点：节点在图形结构中也被称为顶点</li><li>路径：一个顶点到另一个顶点的经过的的线路称为路径</li></ol></blockquote><p><strong>图的类型</strong></p><blockquote><p><strong>无向图</strong>：顶点A与顶点B之间的边是无方向的，可以从A到B，也可以从B到A<br><strong>有向图</strong>：顶点A与顶点B之间的边是有方向的，可以从A到B，但不可以从B到A<br><strong>带权图</strong>：顶点A与顶点B之间的边是带有属性的，如A到B的 距离。</p></blockquote><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a><strong>时间复杂度</strong></h3><p>时间复杂度是指程序运行的时间记作 $T(n)$，通常根据不同问题的规模 <code>n</code> ，以及执行次数 $f(n)$会得到一个复杂度 $O(f(n))$ ，记作 $T(n) &#x3D; O(f(n))$</p><blockquote><ol><li>常数时间：记作 $O(1)$ ，执行次数为常数次</li><li>线性时间：记作 $O(n)$ ，执行次数与数据量成线性关系</li><li>对数时间：记作 $O(log n)$ ，执行次数随着数据增大而减小</li><li>线性对数时间：记作 $O(n log n)$ ， 具有线性时间和对数时间的性质</li><li>指数时间：记作 $O(n^n)$</li></ol></blockquote><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a><strong>空间复杂度</strong></h3><p>空间复杂度是指程序执行时消耗的空间记作 $ S(n) $ ，通常根据输入本身占用的空间 <code>n</code> ，以及执行时临时占用的空间 $f(n)$会得到一个复杂度 $O(f(n))$ ，记作 $S(n) &#x3D; O(f(n))$</p><h3 id="度量方法"><a href="#度量方法" class="headerlink" title="度量方法"></a><strong>度量方法</strong></h3><blockquote><p><strong>常用基本公式</strong></p><p>$O(a) &#x3D; O(1)$ 其中 <code>a</code> 为常数<br>$O(an) &#x3D; O(n)$ 其中 <code>a</code> 为常数<br>$O(an^2 + bn + c) &#x3D; O(n^2)$ 其中 <code>a, b, c</code> 均为常数，结果只保留最高次项</p></blockquote><p>以下是我用根据这些复杂度画的图</p><p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204151818728.png"></p><blockquote><p>仓库地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2plc3NwaWcvZGF0YS1zdHJ1Y3R1cmVzLWFuZC1hbGdvcml0aG1zL3RyZWUvbWFpbi9iYXNpYw==">https://github.com/jesspig/data-structures-and-algorithms/tree/main/basic<i class="fa fa-external-link-alt"></i></span></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;所以作为一个程序员，数据结构和算法都是必备的知识&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构与算法" scheme="http://blog-gh-pages.jesspig.site/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构" scheme="http://blog-gh-pages.jesspig.site/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="http://blog-gh-pages.jesspig.site/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Windows Terminal 美化</title>
    <link href="http://blog-gh-pages.jesspig.site/2022/04/15/204456/7ce1539dd5ae/"/>
    <id>http://blog-gh-pages.jesspig.site/2022/04/15/204456/7ce1539dd5ae/</id>
    <published>2022-04-15T12:44:56.000Z</published>
    <updated>2022-09-21T04:58:19.693Z</updated>
    
    <content type="html"><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy90ZXJtaW5hbC8=">Windows Terminal<i class="fa fa-external-link-alt"></i></span> 我已经使用了很长一段时间了，美化也用了很长一段时间，但是有个问题，每次一设置完就可以很长一段时间不用管了，所以每次操作系统或者换电脑时很费功夫，所以先记录下来方便之后使用<span id="more"></span></p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ul><li><p><strong>安装 Windows Terminal</strong></p><p><code>win 11</code> 自带可以忽略，<code>win 10</code> 可以到应用商店上搜索 <code>Windows Terminal</code> 安装即可</p></li><li><p><strong>安装 PowerShell 7</strong></p><p>自带的 <code>PowerShell</code> 好像是 5 ，不过不用管了，直接到应用商店搜索 <code>PowerShell</code> 安装即可</p></li><li><p><strong>设置权限</strong></p><p><code>PowerShell</code> 想要执行脚本需要先设置执行权限</p></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> RemoteSigned <span class="literal">-scope</span> CurrentUser</span><br></pre></td></tr></table></figure><h2 id="开始美化"><a href="#开始美化" class="headerlink" title="开始美化"></a>开始美化</h2><p>这里是直接使用 <code>PowerShell</code> 进行安装，如果需要用到 <code>scoop</code> 可以执行以下命令下载 <code>scoop</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Invoke-Expression</span> (<span class="built_in">New-Object</span> System.Net.WebClient).DownloadString(<span class="string">&#x27;https://get.scoop.sh&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>安装 posh-git</strong></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Install-Module</span> posh<span class="literal">-git</span> <span class="literal">-Scope</span> CurrentUser</span><br></pre></td></tr></table></figure><ul><li><strong>安装 oh-my-posh</strong></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Install-Module</span> <span class="built_in">oh</span><span class="literal">-my-posh</span> <span class="literal">-Scope</span> CurrentUser</span><br></pre></td></tr></table></figure><ul><li><p><strong>设置主题</strong></p><p>我这里使用的是 <code>M365Princess</code> 这款主题</p></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-PoshPrompt</span> M365Princess</span><br></pre></td></tr></table></figure><ul><li><p><strong>其他主题</strong></p><p>如果需要使用其他主题，有两种方式获取，可以到 <code>oh-my-posh</code> 官网查看 <span class="exturl" data-url="aHR0cHM6Ly9vaG15cG9zaC5kZXYvZG9jcy90aGVtZXM=">https://ohmyposh.dev/docs/themes<i class="fa fa-external-link-alt"></i></span> ， 或者执行以下命令</p></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-PoshThemes</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>安装字体</strong></p><p>设置完主题以后可能会出现乱码的情况，只需要安装一款合适的字体即可，推荐到 <span class="exturl" data-url="aHR0cHM6Ly93d3cubmVyZGZvbnRzLmNvbS8=">https://www.nerdfonts.com/<i class="fa fa-external-link-alt"></i></span> 进行挑选安装</p></li><li><p><strong>更改字体</strong></p></li></ul><p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204152020890.png"></p><p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204152020744.png"></p><ul><li><p><strong>自动设置主题</strong></p><p>当窗口关闭以后主题就消失了，所以需要写一个让 <code>PowerShell</code> 每次启动后都自动设置好主题的脚本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notepad <span class="variable">$PROFILE</span><span class="comment"># 用记事本打开</span></span><br></pre></td></tr></table></figure><p>然后写入以下内容</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-PoshPrompt</span> M365Princess</span><br></pre></td></tr></table></figure><p>之后每次启动都会自动设置号主体了</p></li></ul><blockquote><p><strong>参考自以下内容</strong><br><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNTI4ODI5OTA=">Windows Terminal 主题美化<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNzAzMzUwNDQvdHJpZWQtdG8taW5zdGFsbC1vaC1teS1wb3NoLWJ1dC1pdC10ZWxscy1tZS10aGF0LXRoZS10ZXJtLWlzLW5vdC1yZWNvZ25pemVkLWFz">Tried to install oh-my-posh but it tells me that “the term is not recognized as…”<i class="fa fa-external-link-alt"></i></span></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy90ZXJtaW5hbC8=&quot;&gt;Windows Terminal&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt; 我已经使用了很长一段时间了，美化也用了很长一段时间，但是有个问题，每次一设置完就可以很长一段时间不用管了，所以每次操作系统或者换电脑时很费功夫，所以先记录下来方便之后使用</summary>
    
    
    
    <category term="分享" scheme="http://blog-gh-pages.jesspig.site/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="美化" scheme="http://blog-gh-pages.jesspig.site/tags/%E7%BE%8E%E5%8C%96/"/>
    
    <category term="Windows Terminal" scheme="http://blog-gh-pages.jesspig.site/tags/Windows-Terminal/"/>
    
    <category term="oh-my-posh" scheme="http://blog-gh-pages.jesspig.site/tags/oh-my-posh/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 22-04-14</title>
    <link href="http://blog-gh-pages.jesspig.site/2022/04/14/215203/68083bf21bb5/"/>
    <id>http://blog-gh-pages.jesspig.site/2022/04/14/215203/68083bf21bb5/</id>
    <published>2022-04-14T13:52:03.000Z</published>
    <updated>2022-09-20T13:31:47.877Z</updated>
    
    <content type="html"><![CDATA[<p>今日份 leetcode</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY2FsY3VsYXRlLXNwZWNpYWwtYm9udXMv">1873. 计算特殊奖金<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc3dhcC1zYWxhcnkv">627. 变更性别<i class="fa fa-external-link-alt"></i></span></li></ul><span id="more"></span><p><img data-src="https://stats.justsong.cn/api/leetcode/?username=jesspig&cn=true"></p><h2 id="1873-计算特殊奖金"><a href="#1873-计算特殊奖金" class="headerlink" title="1873. 计算特殊奖金"></a>1873. 计算特殊奖金</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>只要是偶数或 <code>M</code> 开头的返回 <code>0</code> 否则返回 <code>salary</code></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- mysql</span></span><br><span class="line"># Write your MySQL query statement below</span><br><span class="line"><span class="keyword">select</span> employee_id, if (employee_id <span class="operator">%</span> <span class="number">2</span> <span class="operator">=</span> <span class="number">0</span> <span class="keyword">or</span> name <span class="keyword">like</span> <span class="string">&#x27;M%&#x27;</span>, <span class="number">0</span>, salary) <span class="keyword">as</span> bonus <span class="keyword">from</span> Employees;</span><br></pre></td></tr></table></figure><h2 id="627-变更性别"><a href="#627-变更性别" class="headerlink" title="627. 变更性别"></a>627. 变更性别</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p><code>sex</code> 是 <code>f</code> 时返回 <code>m</code> 否则返回 <code>f</code></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- mysql</span></span><br><span class="line"># Write your MySQL query statement below</span><br><span class="line"><span class="keyword">update</span> Salary <span class="keyword">set</span> sex <span class="operator">=</span> if(sex <span class="operator">=</span> &quot;f&quot;, &quot;m&quot;, &quot;f&quot;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;今日份 leetcode&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY2FsY3VsYXRlLXNwZWNpYWwtYm9udXMv&quot;&gt;1873. 计算特殊奖金&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc3dhcC1zYWxhcnkv&quot;&gt;627. 变更性别&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://blog-gh-pages.jesspig.site/categories/LeetCode/"/>
    
    
    <category term="leetcode" scheme="http://blog-gh-pages.jesspig.site/tags/leetcode/"/>
    
    <category term="mysql" scheme="http://blog-gh-pages.jesspig.site/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>【Harmonyos】22-04-14 在 Java 中使用布局的属性</title>
    <link href="http://blog-gh-pages.jesspig.site/2022/04/14/211120/aff37c54d9fe/"/>
    <id>http://blog-gh-pages.jesspig.site/2022/04/14/211120/aff37c54d9fe/</id>
    <published>2022-04-14T13:11:20.000Z</published>
    <updated>2022-09-21T04:58:19.699Z</updated>
    
    <content type="html"><![CDATA[<p>今天在写鸿蒙应用时遇到的一个问题，经过我的长时间认真思考，最终在华为的开发者论坛上找到了解决方案🤣🤣<span id="more"></span></p><h2 id="事情的经过"><a href="#事情的经过" class="headerlink" title="事情的经过"></a>事情的经过</h2><p>在写鸿蒙应用时，因为要用到很多重重复复的布局，所以为了方便打算使用 <code>Java</code> 来代替 <code>XML</code> ，但是发现一个问题，居然有一些属性在 <code>Java</code> 中没有找到</p><p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204142059120.png"></p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>于是我就在华为开发者论坛里找到了一篇名为 <a href="https://developer.huawei.com/consumer/cn/forum/topic/0201624372344830169?fid=0101587866109860105&pid=0303853338792740130"><strong>如何在代码中给DirectionalLayout配置权重weight</strong></a> 的帖子，然后我尝试了一下，发现代码不报错，但是运行会报错</p><ul><li>代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DirectionalLayout.<span class="type">LayoutConfig</span> <span class="variable">config</span> <span class="operator">=</span> (DirectionalLayout.LayoutConfig) text.getLayoutConfig();</span><br><span class="line">config.weight = <span class="number">1</span>;</span><br><span class="line">text.setLayoutConfig(config);</span><br></pre></td></tr></table></figure><ul><li>错误信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[phone][Engine Log] SEVERE java.lang.ClassCastException: class ohos.agp.components.ComponentContainer$LayoutConfig cannot be cast to class ohos.agp.components.DirectionalLayout$LayoutConfig (ohos.agp.components.ComponentContainer$LayoutConfig and ohos.agp.components.DirectionalLayout$LayoutConfig are in unnamed module of loader &#x27;app&#x27;)</span><br></pre></td></tr></table></figure><p>于是我发布了一篇求助帖 <a href="https://developer.huawei.com/consumer/cn/forum/topic/0203853228224320031?fid=0101587866109860105"><strong>求助：怎么通过 Java 代码给组件设置 weight</strong></a> </p><p>发现原来是我代码的顺序错了</p><blockquote><p><strong>参考自以下内容</strong></p><p>华为开发者论坛 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuaHVhd2VpLmNvbS9jb25zdW1lci9jbi9mb3J1bS90b3BpYy8wMjAxNjI0MzcyMzQ0ODMwMTY5P2ZpZD0wMTAxNTg3ODY2MTA5ODYwMTA1JnBpZD0wMzAzODUzMzM4NzkyNzQwMTMw">https://developer.huawei.com/consumer/cn/forum/topic/0201624372344830169?fid=0101587866109860105&amp;pid=0303853338792740130<i class="fa fa-external-link-alt"></i></span></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天在写鸿蒙应用时遇到的一个问题，经过我的长时间认真思考，最终在华为的开发者论坛上找到了解决方案🤣🤣</summary>
    
    
    
    <category term="小技巧" scheme="http://blog-gh-pages.jesspig.site/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Java" scheme="http://blog-gh-pages.jesspig.site/tags/Java/"/>
    
    <category term="harmonyos" scheme="http://blog-gh-pages.jesspig.site/tags/harmonyos/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 22-04-13</title>
    <link href="http://blog-gh-pages.jesspig.site/2022/04/13/120313/eae37935120e/"/>
    <id>http://blog-gh-pages.jesspig.site/2022/04/13/120313/eae37935120e/</id>
    <published>2022-04-13T04:03:13.000Z</published>
    <updated>2022-09-20T13:31:47.876Z</updated>
    
    <content type="html"><![CDATA[<p>今日份 leetcode，整点数据库</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmlnLWNvdW50cmllcy8=">595. 大的国家<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmVjeWNsYWJsZS1hbmQtbG93LWZhdC1wcm9kdWN0cy8=">1757. 可回收且低脂的产品<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZmluZC1jdXN0b21lci1yZWZlcmVlLw==">584. 寻找用户推荐人<i class="fa fa-external-link-alt"></i></span></li></ul><span id="more"></span><p><img data-src="https://stats.justsong.cn/api/leetcode/?username=jesspig&cn=true"></p><h2 id="595-大的国家"><a href="#595-大的国家" class="headerlink" title="595. 大的国家"></a>595. 大的国家</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>直接根据条件查就好了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- mysql</span></span><br><span class="line"># Write your MySQL query statement below</span><br><span class="line"><span class="keyword">select</span> name, population, area <span class="keyword">from</span> world <span class="keyword">where</span> population <span class="operator">&gt;=</span> <span class="number">25000000</span> <span class="keyword">or</span> area <span class="operator">&gt;=</span> <span class="number">3000000</span>;</span><br></pre></td></tr></table></figure><h2 id="1757-可回收且低脂的产品"><a href="#1757-可回收且低脂的产品" class="headerlink" title="1757. 可回收且低脂的产品"></a>1757. 可回收且低脂的产品</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>直接根据条件查就好了</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- mysql</span></span><br><span class="line"># Write your MySQL query statement below</span><br><span class="line"><span class="keyword">select</span> product_id <span class="keyword">from</span> Products <span class="keyword">where</span> low_fats <span class="operator">=</span> &quot;Y&quot; <span class="keyword">and</span> recyclable <span class="operator">=</span> &quot;Y&quot;;</span><br></pre></td></tr></table></figure><h2 id="584-寻找用户推荐人"><a href="#584-寻找用户推荐人" class="headerlink" title="584. 寻找用户推荐人"></a>584. 寻找用户推荐人</h2><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>这道题感觉有点反直觉，直觉上来说直接下面这样就好了，但结果并不仅排除了 <code>2</code> 还排除了 <code>null</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> customer <span class="keyword">where</span> referee_id <span class="operator">!=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>所以再加一个条件就好了</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- mysql</span></span><br><span class="line"># Write your MySQL query statement below</span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> customer <span class="keyword">where</span> referee_id <span class="operator">!=</span> <span class="number">2</span> <span class="keyword">or</span> referee_id <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;今日份 leetcode，整点数据库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmlnLWNvdW50cmllcy8=&quot;&gt;595. 大的国家&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmVjeWNsYWJsZS1hbmQtbG93LWZhdC1wcm9kdWN0cy8=&quot;&gt;1757. 可回收且低脂的产品&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZmluZC1jdXN0b21lci1yZWZlcmVlLw==&quot;&gt;584. 寻找用户推荐人&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://blog-gh-pages.jesspig.site/categories/LeetCode/"/>
    
    
    <category term="leetcode" scheme="http://blog-gh-pages.jesspig.site/tags/leetcode/"/>
    
    <category term="mysql" scheme="http://blog-gh-pages.jesspig.site/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 22-04-05</title>
    <link href="http://blog-gh-pages.jesspig.site/2022/04/05/222755/f25dbf83e235/"/>
    <id>http://blog-gh-pages.jesspig.site/2022/04/05/222755/f25dbf83e235/</id>
    <published>2022-04-05T14:27:55.000Z</published>
    <updated>2022-09-20T13:31:47.875Z</updated>
    
    <content type="html"><![CDATA[<p>今日份 leetcode</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmluYXJ5LXByZWZpeC1kaXZpc2libGUtYnktNS8=">1018. 可被 5 整除的二进制前缀<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmVwbGFjZS1hbGwtZGlnaXRzLXdpdGgtY2hhcmFjdGVycy8=">1844. 将所有数字用字符替换<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYnVsbHMtYW5kLWNvd3Mv">299. 猜数字游戏<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZmluZC1ncmVhdGVzdC1jb21tb24tZGl2aXNvci1vZi1hcnJheS8=">1979. 找出数组的最大公约数<i class="fa fa-external-link-alt"></i></span></li></ul><span id="more"></span><p><img data-src="https://stats.justsong.cn/api/leetcode/?username=jesspig&cn=true"></p><p>最近学校的作业有那么亿点点多，所以没太多时间刷题</p><p><img data-src="https://cdn.jsdelivr.net/gh/jesspig/PicBed@main/img/202204051846179.png"></p><h2 id="1018-可被-5-整除的二进制前缀"><a href="#1018-可被-5-整除的二进制前缀" class="headerlink" title="1018. 可被 5 整除的二进制前缀"></a>1018. 可被 5 整除的二进制前缀</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>通过左移加上二进制数组的元素再模 <code>5</code>，然后再判断是否等于 <code>0</code> 即可<br>但会有一个问题，那就是这个数会变得很大，不过根据平时的计算可以发现 <code>5</code> 的倍数跟其他位无关，只跟个位上的数有关，所以其余的位数可以舍去，只需要知道<code>(个位数上的数 * 2 + 数组元素) % 5</code> 是否等于 <code>0</code> 即可</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note: The returned array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="type">bool</span>* <span class="title function_">prefixesDivBy5</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span>* returnSize)</span>&#123;</span><br><span class="line">    *returnSize = numsSize;</span><br><span class="line">    <span class="type">bool</span> * ans = (<span class="type">bool</span> *) <span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(<span class="type">bool</span>) * numsSize);</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++)&#123;</span><br><span class="line">        ans[i] = (n = ((n &lt;&lt; <span class="number">1</span>) + nums[i]) % <span class="number">5</span>) == <span class="number">0</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="1844-将所有数字用字符替换"><a href="#1844-将所有数字用字符替换" class="headerlink" title="1844. 将所有数字用字符替换"></a>1844. 将所有数字用字符替换</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>如果是字母直接保存，是 <code>&#39;0&#39; - &#39;9&#39;</code> 话就减去 <code>&#39;0&#39;</code>，因为减去 <code>&#39;0&#39;</code> 就可以得到本身的数字，然后让上一个字符加上这个数保存即可</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">char</span> * <span class="title function_">replaceDigits</span><span class="params">(<span class="type">char</span> * s)</span>&#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="type">char</span> * res =  (<span class="type">char</span> *) <span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(<span class="type">char</span>) * len + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        res[i] = (s[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;9&#x27;</span>) ? s[i - <span class="number">1</span>] + s[i] - <span class="string">&#x27;0&#x27;</span> : s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    res[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="299-猜数字游戏"><a href="#299-猜数字游戏" class="headerlink" title="299. 猜数字游戏"></a>299. 猜数字游戏</h2><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>统计对应的个数，不对应的则分别记录出现次数，然后判断出现过的数的交集，因为交集且不对应的数才是 <code>Cows</code>，然后求出交集中每个数最小出现次数的和，因为每个位置不对的数只匹配一次</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">char</span> * <span class="title function_">getHint</span><span class="params">(<span class="type">char</span> * secret, <span class="type">char</span> * guess)</span>&#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(secret);</span><br><span class="line">    <span class="type">int</span> As[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> Bs[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> A = <span class="number">0</span>,B = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> * res = (<span class="type">char</span> *) <span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(<span class="type">char</span>) * <span class="number">9</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(secret[i] == guess[i]) A++;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            As[secret[i] - <span class="string">&#x27;0&#x27;</span>]++;</span><br><span class="line">            Bs[guess[i] - <span class="string">&#x27;0&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(As[i] &gt; <span class="number">0</span> &amp;&amp; Bs[i] &gt; <span class="number">0</span>) B += As[i] &gt; Bs[i] ? Bs[i] : As[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sprintf</span>(res,<span class="string">&quot;%dA%dB&quot;</span>,A,B);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1979-找出数组的最大公约数"><a href="#1979-找出数组的最大公约数" class="headerlink" title="1979. 找出数组的最大公约数"></a>1979. 找出数组的最大公约数</h2><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><p>先使用 qsort 对数组进行排序，然后利用辗转相除法求出最大公约数</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">void</span> * a, <span class="type">void</span> * b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> * (<span class="type">int</span> *) a - * (<span class="type">int</span> *)b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">findGCD</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span>&#123;</span><br><span class="line">    qsort(nums, numsSize, <span class="keyword">sizeof</span>(<span class="type">int</span>), cmp);</span><br><span class="line">    <span class="type">int</span> max = nums[numsSize - <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> min = nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n= max % min;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        max = min;</span><br><span class="line">        min = n;</span><br><span class="line">        n= max % min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;今日份 leetcode&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmluYXJ5LXByZWZpeC1kaXZpc2libGUtYnktNS8=&quot;&gt;1018. 可被 5 整除的二进制前缀&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmVwbGFjZS1hbGwtZGlnaXRzLXdpdGgtY2hhcmFjdGVycy8=&quot;&gt;1844. 将所有数字用字符替换&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYnVsbHMtYW5kLWNvd3Mv&quot;&gt;299. 猜数字游戏&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZmluZC1ncmVhdGVzdC1jb21tb24tZGl2aXNvci1vZi1hcnJheS8=&quot;&gt;1979. 找出数组的最大公约数&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://blog-gh-pages.jesspig.site/categories/LeetCode/"/>
    
    
    <category term="leetcode" scheme="http://blog-gh-pages.jesspig.site/tags/leetcode/"/>
    
    <category term="C" scheme="http://blog-gh-pages.jesspig.site/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>画画练习 22-03-29</title>
    <link href="http://blog-gh-pages.jesspig.site/2022/03/29/214823/02b33d73a2c8/"/>
    <id>http://blog-gh-pages.jesspig.site/2022/03/29/214823/02b33d73a2c8/</id>
    <published>2022-03-29T13:48:23.000Z</published>
    <updated>2022-09-21T04:58:19.706Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204052015422.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img data-src=&quot;https://gcore.jsdelivr.net/gh/jesspig/PicBed@main/img/202204052015422.png&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="绘画" scheme="http://blog-gh-pages.jesspig.site/categories/%E7%BB%98%E7%94%BB/"/>
    
    
    <category term="线稿" scheme="http://blog-gh-pages.jesspig.site/tags/%E7%BA%BF%E7%A8%BF/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 22-03-29</title>
    <link href="http://blog-gh-pages.jesspig.site/2022/03/29/012204/22c6f06ff444/"/>
    <id>http://blog-gh-pages.jesspig.site/2022/03/29/012204/22c6f06ff444/</id>
    <published>2022-03-28T17:22:04.000Z</published>
    <updated>2022-09-20T13:31:47.874Z</updated>
    
    <content type="html"><![CDATA[<p>今日份 leetcode</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY29udGFpbnMtZHVwbGljYXRlLw==">217. 存在重复元素<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdHdvLXN1bS1paS1pbnB1dC1hcnJheS1pcy1zb3J0ZWQv">167. 两数之和 II - 输入有序数组<i class="fa fa-external-link-alt"></i></span></li></ul><span id="more"></span><p><img data-src="https://stats.justsong.cn/api/leetcode/?username=jesspig&cn=true"></p><h2 id="217-存在重复元素"><a href="#217-存在重复元素" class="headerlink" title="217. 存在重复元素"></a>217. 存在重复元素</h2><p>提交时才发现这道题之前做过一次，但好像没发题解</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>先将代码进行排序，然后逐一比较，若当前元素等于后一个，则表示存在重复元素</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">int</span> *x, <span class="type">int</span> *y)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> *x - *y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">containsDuplicate</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span> &#123;</span><br><span class="line">    qsort(nums, numsSize, <span class="keyword">sizeof</span>(<span class="type">int</span>), cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] == nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> containsDuplicate = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    nums.<span class="title function_">sort</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] == nums[i + <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="167-两数之和-II-输入有序数组"><a href="#167-两数之和-II-输入有序数组" class="headerlink" title="167. 两数之和 II - 输入有序数组"></a>167. 两数之和 II - 输入有序数组</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>因为给定的数组是有序的，所以可以得出以下结论<br>左边和右边相加，如果比目标值大，说明右边的数太大了，所以往前推<br>左边和右边相加，如果比目标值小，说明左边的数太小了，所以往后推<br>左边和右边相加，如果等于目标值，说明找到了，所以返回下标 <code>+1</code>，一开始没看清楚题目以为是返回下标</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note: The returned array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span>* <span class="title function_">twoSum</span><span class="params">(<span class="type">int</span>* numbers, <span class="type">int</span> numbersSize, <span class="type">int</span> target, <span class="type">int</span>* returnSize)</span>&#123;</span><br><span class="line">    <span class="type">int</span> * res = (<span class="type">int</span> *) <span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">2</span>);</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = numbersSize - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; numbersSize)&#123;</span><br><span class="line">        <span class="keyword">if</span>(numbers[left] + numbers[right] == target)&#123;</span><br><span class="line">            res[<span class="number">0</span>] = left + <span class="number">1</span>;</span><br><span class="line">            res[<span class="number">1</span>] = right + <span class="number">1</span>;</span><br><span class="line">            *returnSize = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(numbers[left] + numbers[right] &gt; target) right--;</span><br><span class="line">        <span class="keyword">if</span>(numbers[left] + numbers[right] &lt; target) left++;</span><br><span class="line">    &#125;</span><br><span class="line">    *returnSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后吐槽一下，为什么别人暴力能过，我暴力超时😭<br><img data-src="https://pic.leetcode-cn.com/1648487226-smZsZq-image.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* <span class="title function_">twoSum</span><span class="params">(<span class="type">int</span>* numbers, <span class="type">int</span> numbersSize, <span class="type">int</span> target, <span class="type">int</span>* returnSize)</span>&#123;</span><br><span class="line">    <span class="type">int</span> * res = (<span class="type">int</span> *) <span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numbersSize - <span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; numbersSize; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(numbers[i] + numbers[j] == target)&#123;</span><br><span class="line">                res[<span class="number">0</span>] = i + <span class="number">1</span>;</span><br><span class="line">                res[<span class="number">1</span>] = j + <span class="number">1</span>;</span><br><span class="line">                *returnSize = <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *returnSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;今日份 leetcode&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY29udGFpbnMtZHVwbGljYXRlLw==&quot;&gt;217. 存在重复元素&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdHdvLXN1bS1paS1pbnB1dC1hcnJheS1pcy1zb3J0ZWQv&quot;&gt;167. 两数之和 II - 输入有序数组&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://blog-gh-pages.jesspig.site/categories/LeetCode/"/>
    
    
    <category term="JavaScript" scheme="http://blog-gh-pages.jesspig.site/tags/JavaScript/"/>
    
    <category term="leetcode" scheme="http://blog-gh-pages.jesspig.site/tags/leetcode/"/>
    
    <category term="C" scheme="http://blog-gh-pages.jesspig.site/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>高数-集合</title>
    <link href="http://blog-gh-pages.jesspig.site/2022/03/27/225942/6a4bab6fcd04/"/>
    <id>http://blog-gh-pages.jesspig.site/2022/03/27/225942/6a4bab6fcd04/</id>
    <published>2022-03-27T14:59:42.000Z</published>
    <updated>2022-09-21T04:35:29.834Z</updated>
    
    <content type="html"><![CDATA[<p>集合是指一组确定的对象或事物，如   $ \lbrace1,2,3 \rbrace $ ，班上的学生等都属于集合<span id="more"></span></p><h2 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h2><p>集合里的内容都叫元素，如 $1$ 是 $\lbrace 1,2,3 \rbrace$ 中的元素</p><p>如果某个元素 <strong>在</strong> 一个集合里，那么表示这个元素 <strong>属于</strong> 这个集合，用 $\in$ 来表示<br>$$<br>1 \in \lbrace{1,2,3}\rbrace<br>$$<br>如果某个元素 <strong>不在</strong> 一个集合里，那么表示这个元素 <strong>不属于</strong> 这个集合，用 $\notin$ 来表示<br>$$<br>4 \notin \lbrace { 1,2,3 }\rbrace<br>$$</p><h2 id="数集"><a href="#数集" class="headerlink" title="数集"></a>数集</h2><p>有限个元素叫 <strong>有限集</strong> ，无限个元素叫 <strong>无限集</strong> </p><ul><li>$\mathbb{R} $ ：全体实数<ul><li>$\mathbb{R} ^{+}$ ：全体正实数</li><li>\mathbb{R} ^{-}$ ：全体负实数</li><li>$\mathbb{R} ^{*}$ ：$0$ 以外的全体实数</li></ul></li><li>$\mathbb{Q} $ ：全体有理数</li><li>$\mathbb{N} $ ：全体自然数</li><li>$\mathbb{Z} $ ： 全体整数</li></ul><h2 id="表示方法"><a href="#表示方法" class="headerlink" title="表示方法"></a>表示方法</h2><p>一些常见的集合表示形式</p><h3 id="列举法"><a href="#列举法" class="headerlink" title="列举法"></a>列举法</h3><p>将所有元素一个个的列出来，就是列举法<br>$$<br>\lbrace {1, 2, 3, 4, 5, 6, 7, 8, 9} \rbrace<br>$$</p><h3 id="描述法"><a href="#描述法" class="headerlink" title="描述法"></a>描述法</h3><p>描述集合的特征<br>$$<br>\lbrace{x \mid x \leqslant 10,x \in \mathbb{N}  }\rbrace<br>$$</p><h2 id="子集"><a href="#子集" class="headerlink" title="子集"></a>子集</h2><p>元素和集合是属于 $ \in $ 或者不属于 $ \notin $ 的关系，比如 $a \in{ A }$ </p><p>而集合跟集合间的关系是包含，比如 $A \subset B $ 或 $A \supset B$ </p><p>*<strong>注意</strong>：当集合作为元素时用的是 $ \in $ 而不是 $\subset$ </p><p>$$<br>\begin{array}{}<br>\lbrace{1}\rbrace \subset \lbrace{\lbrace{1}\rbrace, \lbrace{2}\rbrace,\lbrace{3}\rbrace}\rbrace  (✖️) \\<br>\lbrace{1}\rbrace \in \lbrace{\lbrace{1}\rbrace,\lbrace{2}\rbrace,\lbrace{3}\rbrace}\rbrace   (✔️)<br>\end{array} \<br>$$<br>没有任何元素的集合叫空集 $\emptyset$ ，空集是任何集合的子集 $ \emptyset \subset A$  </p><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><p>$A \cup B$ 并集运算，将两个集合合并<br>$$<br>\lbrace{1,2,3}\rbrace \cup \lbrace{4,5}\rbrace &#x3D; \lbrace{1,2,3,4,5}\rbrace<br>$$</p><p>$A \cap B$ 交集运算，将两个集合的公共部分<br>$$<br>\lbrace{1,2,3}\rbrace \cup \lbrace{2,3,4}\rbrace &#x3D; \lbrace{2,3}\rbrace<br>$$</p><p>$A - B$ 差集运算，$A$ 减去与 $B$ 两个集合的公共部分<br>$$<br>\lbrace{1,2,3}\rbrace - \lbrace{2,3,4}\rbrace &#x3D; \lbrace{1}\rbrace<br>$$<br>$\mathbb{U} $ 全集，全部</p><p>$\complement_{\mathbb{U}} A$ ，补集，$\mathbb{U}$ 挖去 $A$ 的剩余部分叫补给</p><h2 id="运算律"><a href="#运算律" class="headerlink" title="运算律"></a>运算律</h2><h3 id="交换律"><a href="#交换律" class="headerlink" title="交换律"></a>交换律</h3><p>$$<br>\begin{array}{}<br>A \cup B &#x3D; B \cup A \\<br>A \cap B &#x3D; B \cap A<br>\end{array} \<br>$$</p><h3 id="结合律"><a href="#结合律" class="headerlink" title="结合律"></a>结合律</h3><p>$$<br>\begin{array}{l}<br>(A \cup B) \cup C&#x3D;A \cup(B \cup C) \\<br>(A \cap B) \cap C&#x3D;A \cap(B \cap C)<br>\end{array}<br>$$</p><h3 id="分配律"><a href="#分配律" class="headerlink" title="分配律"></a>分配律</h3><p>$$<br>\begin{array}{l}<br>A \cap(B \cup C)&#x3D;(A \cap B) \cup(A \cap C) \\<br>A \cup(B \cap C)&#x3D;(A \cup B) \cap(A \cup C)<br>\end{array}<br>$$</p><h3 id="对偶律"><a href="#对偶律" class="headerlink" title="对偶律"></a>对偶律</h3><p>$$<br>\begin{aligned}<br>\complement_{\mathrm{U}}(A \cup B) &amp;&#x3D;\complement_{\mathrm{U}} A \cap \complement_{\mathrm{U}} B \\<br>\complement_{\mathrm{U}}(A \cap B) &amp;&#x3D;\complement_{\mathrm{U}} A \cup \complement_{\mathrm{U}} B<br>\end{aligned}<br>$$</p><h3 id="直积"><a href="#直积" class="headerlink" title="直积"></a>直积</h3><p>$$<br>A \times B&#x3D;\lbrace(a, b) \mid a \in A, b \in B \rbrace<br>$$</p><h2 id="区间"><a href="#区间" class="headerlink" title="区间"></a>区间</h2><table><thead><tr><th>区间</th><th>取值</th></tr></thead><tbody><tr><td>开区间</td><td>$(a, b)$</td></tr><tr><td>闭区间</td><td>$[a, b]$</td></tr><tr><td>半开半闭区间</td><td>$ (a, b] \quad [a, b) $</td></tr><tr><td>有限区间</td><td>有限长</td></tr><tr><td>无限区间</td><td>无限长</td></tr></tbody></table><h2 id="邻域"><a href="#邻域" class="headerlink" title="邻域"></a>邻域</h2><p>$a$ 表示中心 $\delta$ 表示半径</p><p><strong>邻域</strong><br>$$<br>U(a, \delta)&#x3D;{x \mid a-\delta&lt;x&lt;a+\delta}<br>$$<br><strong>去心邻域</strong><br>$$<br>\stackrel{\circ}{U}(a, \delta) &#x3D; {x \mid 0&lt;  \lvert{x-a}\rvert &lt;\delta}<br>$$</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;集合是指一组确定的对象或事物，如   $ \lbrace1,2,3 \rbrace $ ，班上的学生等都属于集合</summary>
    
    
    
    <category term="高数" scheme="http://blog-gh-pages.jesspig.site/categories/%E9%AB%98%E6%95%B0/"/>
    
    
    <category term="集合" scheme="http://blog-gh-pages.jesspig.site/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 22-03-27</title>
    <link href="http://blog-gh-pages.jesspig.site/2022/03/27/171557/7c83337496ca/"/>
    <id>http://blog-gh-pages.jesspig.site/2022/03/27/171557/7c83337496ca/</id>
    <published>2022-03-27T09:15:57.000Z</published>
    <updated>2022-09-20T13:31:47.873Z</updated>
    
    <content type="html"><![CDATA[<p>今日份 leetcode</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcm90YXRlLWFycmF5Lw==">189. 轮转数组<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdG8tbG93ZXItY2FzZS8=">709. 转换成小写字母<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZGVjcnlwdC1zdHJpbmctZnJvbS1hbHBoYWJldC10by1pbnRlZ2VyLW1hcHBpbmcv">1309. 解码字母到整数映射<i class="fa fa-external-link-alt"></i></span></li></ul><span id="more"></span><p><img data-src="https://stats.justsong.cn/api/leetcode/?username=jesspig&cn=true"></p><h2 id="189-轮转数组"><a href="#189-轮转数组" class="headerlink" title="189. 轮转数组"></a>189. 轮转数组</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>将值放到新数组中对应的位置，然后用新数组覆盖原数组</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">rotate</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> k)</span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[numsSize];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++) &#123;</span><br><span class="line">        arr[(i + k) % numsSize] = nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++) &#123;</span><br><span class="line">        nums[i] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="709-转换成小写字母"><a href="#709-转换成小写字母" class="headerlink" title="709. 转换成小写字母"></a>709. 转换成小写字母</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>判断是否为大写，是大写就 ‘+32’，因为大小写相差 32</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C</span></span><br><span class="line"><span class="type">char</span> * <span class="title function_">toLowerCase</span><span class="params">(<span class="type">char</span> * s)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;Z&#x27;</span>) s[i] += <span class="number">32</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1309-解码字母到整数映射"><a href="#1309-解码字母到整数映射" class="headerlink" title="1309. 解码字母到整数映射"></a>1309. 解码字母到整数映射</h2><p>又是个难得的好成绩🤣</p><p><img data-src="https://cdn.jsdelivr.net/gh/jesspig/PicBed@main/img/202203271659043.png"></p><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>字符 <code>0 - 9</code> 减去 字符 <code>0</code> 就是数字 <code>0 - 9</code>，这时只要加上字符 <code>a</code> 就会等于其对应的小写字母，知道这些，就只需要判断输入的字符满足 <code>0 - 9</code> 还是 <code>#</code> 的条件就好了</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="type">char</span> * <span class="title function_">freqAlphabets</span><span class="params">(<span class="type">char</span> * s)</span>&#123;</span><br><span class="line">    <span class="type">char</span> *res= <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * (<span class="built_in">strlen</span>(s) + <span class="number">1</span>) );</span><br><span class="line">    <span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s);)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i+<span class="number">2</span> &lt; <span class="built_in">strlen</span>(s) &amp;&amp; s[i+<span class="number">2</span>] == <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">            res[idx++] = ((s[i] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + s[i + <span class="number">1</span>] - <span class="string">&#x27;1&#x27;</span>) + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            i += <span class="number">3</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res[idx++] = (s[i] - <span class="string">&#x27;1&#x27;</span>) + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res[idx] =  <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;今日份 leetcode&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcm90YXRlLWFycmF5Lw==&quot;&gt;189. 轮转数组&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdG8tbG93ZXItY2FzZS8=&quot;&gt;709. 转换成小写字母&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZGVjcnlwdC1zdHJpbmctZnJvbS1hbHBoYWJldC10by1pbnRlZ2VyLW1hcHBpbmcv&quot;&gt;1309. 解码字母到整数映射&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://blog-gh-pages.jesspig.site/categories/LeetCode/"/>
    
    
    <category term="leetcode" scheme="http://blog-gh-pages.jesspig.site/tags/leetcode/"/>
    
    <category term="C" scheme="http://blog-gh-pages.jesspig.site/tags/C/"/>
    
  </entry>
  
</feed>
